// source: type.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var vendor_pb = require('./vendor_pb.js');
goog.object.extend(proto, vendor_pb);
var enum_pb = require('./enum_pb.js');
goog.object.extend(proto, enum_pb);
goog.exportSymbol('proto.forge_abi.AbciContext', null, global);
goog.exportSymbol('proto.forge_abi.AccountConfig', null, global);
goog.exportSymbol('proto.forge_abi.BigSint', null, global);
goog.exportSymbol('proto.forge_abi.BigUint', null, global);
goog.exportSymbol('proto.forge_abi.BlockInfo', null, global);
goog.exportSymbol('proto.forge_abi.BlockInfoSimple', null, global);
goog.exportSymbol('proto.forge_abi.ChainInfo', null, global);
goog.exportSymbol('proto.forge_abi.CircularQueue', null, global);
goog.exportSymbol('proto.forge_abi.ConsensusParams', null, global);
goog.exportSymbol('proto.forge_abi.DeclareConfig', null, global);
goog.exportSymbol('proto.forge_abi.DelegateConfig', null, global);
goog.exportSymbol('proto.forge_abi.Evidence', null, global);
goog.exportSymbol('proto.forge_abi.ForgeStats', null, global);
goog.exportSymbol('proto.forge_abi.ForgeToken', null, global);
goog.exportSymbol('proto.forge_abi.GenesisInfo', null, global);
goog.exportSymbol('proto.forge_abi.GeoInfo', null, global);
goog.exportSymbol('proto.forge_abi.Multisig', null, global);
goog.exportSymbol('proto.forge_abi.NetInfo', null, global);
goog.exportSymbol('proto.forge_abi.NodeInfo', null, global);
goog.exportSymbol('proto.forge_abi.PeerInfo', null, global);
goog.exportSymbol('proto.forge_abi.PokeConfig', null, global);
goog.exportSymbol('proto.forge_abi.PokeInfo', null, global);
goog.exportSymbol('proto.forge_abi.StakeConfig', null, global);
goog.exportSymbol('proto.forge_abi.StakeContext', null, global);
goog.exportSymbol('proto.forge_abi.StakeSummary', null, global);
goog.exportSymbol('proto.forge_abi.StateContext', null, global);
goog.exportSymbol('proto.forge_abi.TokenSwapConfig', null, global);
goog.exportSymbol('proto.forge_abi.Transaction', null, global);
goog.exportSymbol('proto.forge_abi.TransactionConfig', null, global);
goog.exportSymbol('proto.forge_abi.TransactionInfo', null, global);
goog.exportSymbol('proto.forge_abi.TxStatistics', null, global);
goog.exportSymbol('proto.forge_abi.TxStatus', null, global);
goog.exportSymbol('proto.forge_abi.UnconfirmedTxs', null, global);
goog.exportSymbol('proto.forge_abi.UpgradeInfo', null, global);
goog.exportSymbol('proto.forge_abi.UpgradeTask', null, global);
goog.exportSymbol('proto.forge_abi.UpgradeTasks', null, global);
goog.exportSymbol('proto.forge_abi.Validator', null, global);
goog.exportSymbol('proto.forge_abi.ValidatorInfo', null, global);
goog.exportSymbol('proto.forge_abi.ValidatorsInfo', null, global);
goog.exportSymbol('proto.forge_abi.WalletInfo', null, global);
goog.exportSymbol('proto.forge_abi.WalletType', null, global);
goog.exportSymbol('proto.forge_abi.WithdrawItem', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.BigUint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.BigUint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.BigUint.displayName = 'proto.forge_abi.BigUint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.BigSint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.BigSint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.BigSint.displayName = 'proto.forge_abi.BigSint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.WalletType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.WalletType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.WalletType.displayName = 'proto.forge_abi.WalletType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.WalletInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.WalletInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.WalletInfo.displayName = 'proto.forge_abi.WalletInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ChainInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.ChainInfo.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.ChainInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.ChainInfo.displayName = 'proto.forge_abi.ChainInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.NodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.NodeInfo.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.NodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.NodeInfo.displayName = 'proto.forge_abi.NodeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.Validator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.Validator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.Validator.displayName = 'proto.forge_abi.Validator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ConsensusParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.ConsensusParams.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.ConsensusParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.ConsensusParams.displayName = 'proto.forge_abi.ConsensusParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.UpgradeTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.UpgradeTask.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.UpgradeTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.UpgradeTask.displayName = 'proto.forge_abi.UpgradeTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.UpgradeTasks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.UpgradeTasks.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.UpgradeTasks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.UpgradeTasks.displayName = 'proto.forge_abi.UpgradeTasks';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.AbciContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.AbciContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.AbciContext.displayName = 'proto.forge_abi.AbciContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.Multisig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.Multisig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.Multisig.displayName = 'proto.forge_abi.Multisig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.Transaction.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.Transaction.displayName = 'proto.forge_abi.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.TransactionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.TransactionInfo.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.TransactionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.TransactionInfo.displayName = 'proto.forge_abi.TransactionInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.DeclareConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.DeclareConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.DeclareConfig.displayName = 'proto.forge_abi.DeclareConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.DelegateConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.DelegateConfig.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.DelegateConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.DelegateConfig.displayName = 'proto.forge_abi.DelegateConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.TransactionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.TransactionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.TransactionConfig.displayName = 'proto.forge_abi.TransactionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.BlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.BlockInfo.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.BlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.BlockInfo.displayName = 'proto.forge_abi.BlockInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.BlockInfoSimple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.BlockInfoSimple.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.BlockInfoSimple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.BlockInfoSimple.displayName = 'proto.forge_abi.BlockInfoSimple';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.TxStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.TxStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.TxStatus.displayName = 'proto.forge_abi.TxStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.CircularQueue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.CircularQueue.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.CircularQueue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.CircularQueue.displayName = 'proto.forge_abi.CircularQueue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.StateContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.StateContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.StateContext.displayName = 'proto.forge_abi.StateContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.StakeContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.StakeContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.StakeContext.displayName = 'proto.forge_abi.StakeContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.StakeSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.StakeSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.StakeSummary.displayName = 'proto.forge_abi.StakeSummary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.StakeConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.StakeConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.StakeConfig.displayName = 'proto.forge_abi.StakeConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.UnconfirmedTxs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.UnconfirmedTxs.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.UnconfirmedTxs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.UnconfirmedTxs.displayName = 'proto.forge_abi.UnconfirmedTxs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.NetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.NetInfo.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.NetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.NetInfo.displayName = 'proto.forge_abi.NetInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.GeoInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.GeoInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.GeoInfo.displayName = 'proto.forge_abi.GeoInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.PeerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.PeerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.PeerInfo.displayName = 'proto.forge_abi.PeerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ValidatorsInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.ValidatorsInfo.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.ValidatorsInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.ValidatorsInfo.displayName = 'proto.forge_abi.ValidatorsInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ValidatorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ValidatorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.ValidatorInfo.displayName = 'proto.forge_abi.ValidatorInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.GenesisInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.GenesisInfo.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.GenesisInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.GenesisInfo.displayName = 'proto.forge_abi.GenesisInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ForgeStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.ForgeStats.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.ForgeStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.ForgeStats.displayName = 'proto.forge_abi.ForgeStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.TxStatistics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.TxStatistics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.TxStatistics.displayName = 'proto.forge_abi.TxStatistics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ForgeToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ForgeToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.ForgeToken.displayName = 'proto.forge_abi.ForgeToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.PokeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.PokeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.PokeInfo.displayName = 'proto.forge_abi.PokeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.PokeConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.PokeConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.PokeConfig.displayName = 'proto.forge_abi.PokeConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.UpgradeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.UpgradeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.UpgradeInfo.displayName = 'proto.forge_abi.UpgradeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.WithdrawItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.WithdrawItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.WithdrawItem.displayName = 'proto.forge_abi.WithdrawItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.AccountConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.AccountConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.AccountConfig.displayName = 'proto.forge_abi.AccountConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.TokenSwapConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.TokenSwapConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.TokenSwapConfig.displayName = 'proto.forge_abi.TokenSwapConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.Evidence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.Evidence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.forge_abi.Evidence.displayName = 'proto.forge_abi.Evidence';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.BigUint.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.BigUint.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.BigUint} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.BigUint.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        value: msg.getValue(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.BigUint}
 */
proto.forge_abi.BigUint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.BigUint();
  return proto.forge_abi.BigUint.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.BigUint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.BigUint}
 */
proto.forge_abi.BigUint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.BigUint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.BigUint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.BigUint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.BigUint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BigUint.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.forge_abi.BigUint.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getValue()));
};

/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BigUint.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getValue()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BigUint} returns this
 */
proto.forge_abi.BigUint.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.BigSint.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.BigSint.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.BigSint} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.BigSint.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        value: msg.getValue(),
        minus: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.BigSint}
 */
proto.forge_abi.BigSint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.BigSint();
  return proto.forge_abi.BigSint.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.BigSint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.BigSint}
 */
proto.forge_abi.BigSint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setValue(value);
        break;
      case 2:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setMinus(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.BigSint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.BigSint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.BigSint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.BigSint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getMinus();
  if (f) {
    writer.writeBool(2, f);
  }
};

/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BigSint.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.forge_abi.BigSint.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getValue()));
};

/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BigSint.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getValue()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BigSint} returns this
 */
proto.forge_abi.BigSint.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bool minus = 2;
 * @return {boolean}
 */
proto.forge_abi.BigSint.prototype.getMinus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};

/**
 * @param {boolean} value
 * @return {!proto.forge_abi.BigSint} returns this
 */
proto.forge_abi.BigSint.prototype.setMinus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.WalletType.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.WalletType.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.WalletType} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.WalletType.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        pk: jspb.Message.getFieldWithDefault(msg, 1, 0),
        hash: jspb.Message.getFieldWithDefault(msg, 2, 0),
        address: jspb.Message.getFieldWithDefault(msg, 3, 0),
        role: jspb.Message.getFieldWithDefault(msg, 4, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.WalletType}
 */
proto.forge_abi.WalletType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.WalletType();
  return proto.forge_abi.WalletType.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.WalletType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.WalletType}
 */
proto.forge_abi.WalletType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.KeyType} */ (reader.readEnum());
        msg.setPk(value);
        break;
      case 2:
        var value = /** @type {!proto.forge_abi.HashType} */ (reader.readEnum());
        msg.setHash(value);
        break;
      case 3:
        var value = /** @type {!proto.forge_abi.EncodingType} */ (reader.readEnum());
        msg.setAddress(value);
        break;
      case 4:
        var value = /** @type {!proto.forge_abi.RoleType} */ (reader.readEnum());
        msg.setRole(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.WalletType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.WalletType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.WalletType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.WalletType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPk();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getHash();
  if (f !== 0.0) {
    writer.writeEnum(2, f);
  }
  f = message.getAddress();
  if (f !== 0.0) {
    writer.writeEnum(3, f);
  }
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(4, f);
  }
};

/**
 * optional KeyType pk = 1;
 * @return {!proto.forge_abi.KeyType}
 */
proto.forge_abi.WalletType.prototype.getPk = function() {
  return /** @type {!proto.forge_abi.KeyType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {!proto.forge_abi.KeyType} value
 * @return {!proto.forge_abi.WalletType} returns this
 */
proto.forge_abi.WalletType.prototype.setPk = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional HashType hash = 2;
 * @return {!proto.forge_abi.HashType}
 */
proto.forge_abi.WalletType.prototype.getHash = function() {
  return /** @type {!proto.forge_abi.HashType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {!proto.forge_abi.HashType} value
 * @return {!proto.forge_abi.WalletType} returns this
 */
proto.forge_abi.WalletType.prototype.setHash = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};

/**
 * optional EncodingType address = 3;
 * @return {!proto.forge_abi.EncodingType}
 */
proto.forge_abi.WalletType.prototype.getAddress = function() {
  return /** @type {!proto.forge_abi.EncodingType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {!proto.forge_abi.EncodingType} value
 * @return {!proto.forge_abi.WalletType} returns this
 */
proto.forge_abi.WalletType.prototype.setAddress = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};

/**
 * optional RoleType role = 4;
 * @return {!proto.forge_abi.RoleType}
 */
proto.forge_abi.WalletType.prototype.getRole = function() {
  return /** @type {!proto.forge_abi.RoleType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {!proto.forge_abi.RoleType} value
 * @return {!proto.forge_abi.WalletType} returns this
 */
proto.forge_abi.WalletType.prototype.setRole = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.WalletInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.WalletInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.WalletInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.WalletInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        type: (f = msg.getType()) && proto.forge_abi.WalletType.toObject(includeInstance, f),
        sk: msg.getSk(),
        pk: msg.getPk(),
        address: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.WalletInfo}
 */
proto.forge_abi.WalletInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.WalletInfo();
  return proto.forge_abi.WalletInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.WalletInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.WalletInfo}
 */
proto.forge_abi.WalletInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.forge_abi.WalletType();
        reader.readMessage(value, proto.forge_abi.WalletType.deserializeBinaryFromReader);
        msg.setType(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSk(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPk(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.WalletInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.WalletInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.WalletInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.WalletInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f != null) {
    writer.writeMessage(1, f, proto.forge_abi.WalletType.serializeBinaryToWriter);
  }
  f = message.getSk_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional WalletType type = 1;
 * @return {?proto.forge_abi.WalletType}
 */
proto.forge_abi.WalletInfo.prototype.getType = function() {
  return /** @type{?proto.forge_abi.WalletType} */ (jspb.Message.getWrapperField(this, proto.forge_abi.WalletType, 1));
};

/**
 * @param {?proto.forge_abi.WalletType|undefined} value
 * @return {!proto.forge_abi.WalletInfo} returns this
 */
proto.forge_abi.WalletInfo.prototype.setType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.WalletInfo} returns this
 */
proto.forge_abi.WalletInfo.prototype.clearType = function() {
  return this.setType(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.WalletInfo.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bytes sk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.WalletInfo.prototype.getSk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes sk = 2;
 * This is a type-conversion wrapper around `getSk()`
 * @return {string}
 */
proto.forge_abi.WalletInfo.prototype.getSk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSk()));
};

/**
 * optional bytes sk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSk()`
 * @return {!Uint8Array}
 */
proto.forge_abi.WalletInfo.prototype.getSk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSk()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.WalletInfo} returns this
 */
proto.forge_abi.WalletInfo.prototype.setSk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional bytes pk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.WalletInfo.prototype.getPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * optional bytes pk = 3;
 * This is a type-conversion wrapper around `getPk()`
 * @return {string}
 */
proto.forge_abi.WalletInfo.prototype.getPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPk()));
};

/**
 * optional bytes pk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPk()`
 * @return {!Uint8Array}
 */
proto.forge_abi.WalletInfo.prototype.getPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPk()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.WalletInfo} returns this
 */
proto.forge_abi.WalletInfo.prototype.setPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional string address = 4;
 * @return {string}
 */
proto.forge_abi.WalletInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.WalletInfo} returns this
 */
proto.forge_abi.WalletInfo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.ChainInfo.repeatedFields_ = [16];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ChainInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ChainInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ChainInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ChainInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        network: jspb.Message.getFieldWithDefault(msg, 2, ''),
        moniker: jspb.Message.getFieldWithDefault(msg, 3, ''),
        consensusVersion: jspb.Message.getFieldWithDefault(msg, 4, ''),
        synced: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
        appHash: msg.getAppHash(),
        blockHash: msg.getBlockHash(),
        blockHeight: jspb.Message.getFieldWithDefault(msg, 8, 0),
        blockTime: (f = msg.getBlockTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        address: jspb.Message.getFieldWithDefault(msg, 10, ''),
        votingPower: jspb.Message.getFieldWithDefault(msg, 11, 0),
        totalTxs: jspb.Message.getFieldWithDefault(msg, 12, 0),
        version: jspb.Message.getFieldWithDefault(msg, 13, ''),
        forgeAppsVersionMap: (f = msg.getForgeAppsVersionMap()) ? f.toObject(includeInstance, undefined) : [],
        supportedTxsList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ChainInfo}
 */
proto.forge_abi.ChainInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ChainInfo();
  return proto.forge_abi.ChainInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ChainInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ChainInfo}
 */
proto.forge_abi.ChainInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setNetwork(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setMoniker(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setConsensusVersion(value);
        break;
      case 5:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSynced(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAppHash(value);
        break;
      case 7:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setBlockHash(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setBlockHeight(value);
        break;
      case 9:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setBlockTime(value);
        break;
      case 10:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 11:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setVotingPower(value);
        break;
      case 12:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTotalTxs(value);
        break;
      case 13:
        var value = /** @type {string} */ (reader.readString());
        msg.setVersion(value);
        break;
      case 15:
        var value = msg.getForgeAppsVersionMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            ''
          );
        });
        break;
      case 16:
        var value = /** @type {string} */ (reader.readString());
        msg.addSupportedTxs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ChainInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ChainInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ChainInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ChainInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getConsensusVersion();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getSynced();
  if (f) {
    writer.writeBool(5, f);
  }
  f = message.getAppHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(6, f);
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(7, f);
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(8, f);
  }
  f = message.getBlockTime();
  if (f != null) {
    writer.writeMessage(9, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(10, f);
  }
  f = message.getVotingPower();
  if (f !== 0) {
    writer.writeUint64(11, f);
  }
  f = message.getTotalTxs();
  if (f !== 0) {
    writer.writeUint64(12, f);
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(13, f);
  }
  f = message.getForgeAppsVersionMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSupportedTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(16, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string network = 2;
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string moniker = 3;
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.setMoniker = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string consensus_version = 4;
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getConsensusVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.setConsensusVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional bool synced = 5;
 * @return {boolean}
 */
proto.forge_abi.ChainInfo.prototype.getSynced = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};

/**
 * @param {boolean} value
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.setSynced = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};

/**
 * optional bytes app_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.ChainInfo.prototype.getAppHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * optional bytes app_hash = 6;
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getAppHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAppHash()));
};

/**
 * optional bytes app_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.ChainInfo.prototype.getAppHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAppHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.setAppHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};

/**
 * optional bytes block_hash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.ChainInfo.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * optional bytes block_hash = 7;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockHash()));
};

/**
 * optional bytes block_hash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.ChainInfo.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};

/**
 * optional uint64 block_height = 8;
 * @return {number}
 */
proto.forge_abi.ChainInfo.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional google.protobuf.Timestamp block_time = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_abi.ChainInfo.prototype.getBlockTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    9
  ));
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.setBlockTime = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.clearBlockTime = function() {
  return this.setBlockTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.ChainInfo.prototype.hasBlockTime = function() {
  return jspb.Message.getField(this, 9) != null;
};

/**
 * optional string address = 10;
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};

/**
 * optional uint64 voting_power = 11;
 * @return {number}
 */
proto.forge_abi.ChainInfo.prototype.getVotingPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.setVotingPower = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};

/**
 * optional uint64 total_txs = 12;
 * @return {number}
 */
proto.forge_abi.ChainInfo.prototype.getTotalTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.setTotalTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};

/**
 * optional string version = 13;
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};

/**
 * map<string, string> forge_apps_version = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.forge_abi.ChainInfo.prototype.getForgeAppsVersionMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(this, 15, opt_noLazyCreate, null));
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.clearForgeAppsVersionMap = function() {
  this.getForgeAppsVersionMap().clear();
  return this;
};

/**
 * repeated string supported_txs = 16;
 * @return {!Array<string>}
 */
proto.forge_abi.ChainInfo.prototype.getSupportedTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.setSupportedTxsList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.addSupportedTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ChainInfo} returns this
 */
proto.forge_abi.ChainInfo.prototype.clearSupportedTxsList = function() {
  return this.setSupportedTxsList([]);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.NodeInfo.repeatedFields_ = [16];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.NodeInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.NodeInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.NodeInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.NodeInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        network: jspb.Message.getFieldWithDefault(msg, 2, ''),
        moniker: jspb.Message.getFieldWithDefault(msg, 3, ''),
        consensusVersion: jspb.Message.getFieldWithDefault(msg, 4, ''),
        synced: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
        appHash: msg.getAppHash(),
        blockHash: msg.getBlockHash(),
        blockHeight: jspb.Message.getFieldWithDefault(msg, 8, 0),
        blockTime: (f = msg.getBlockTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        address: jspb.Message.getFieldWithDefault(msg, 10, ''),
        votingPower: jspb.Message.getFieldWithDefault(msg, 11, 0),
        totalTxs: jspb.Message.getFieldWithDefault(msg, 12, 0),
        version: jspb.Message.getFieldWithDefault(msg, 13, ''),
        forgeAppsVersionMap: (f = msg.getForgeAppsVersionMap()) ? f.toObject(includeInstance, undefined) : [],
        supportedTxsList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
        ip: jspb.Message.getFieldWithDefault(msg, 17, ''),
        geoInfo: (f = msg.getGeoInfo()) && proto.forge_abi.GeoInfo.toObject(includeInstance, f),
        p2pAddress: jspb.Message.getFieldWithDefault(msg, 19, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.NodeInfo}
 */
proto.forge_abi.NodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.NodeInfo();
  return proto.forge_abi.NodeInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.NodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.NodeInfo}
 */
proto.forge_abi.NodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setNetwork(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setMoniker(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setConsensusVersion(value);
        break;
      case 5:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSynced(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAppHash(value);
        break;
      case 7:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setBlockHash(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setBlockHeight(value);
        break;
      case 9:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setBlockTime(value);
        break;
      case 10:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 11:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setVotingPower(value);
        break;
      case 12:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTotalTxs(value);
        break;
      case 13:
        var value = /** @type {string} */ (reader.readString());
        msg.setVersion(value);
        break;
      case 15:
        var value = msg.getForgeAppsVersionMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            ''
          );
        });
        break;
      case 16:
        var value = /** @type {string} */ (reader.readString());
        msg.addSupportedTxs(value);
        break;
      case 17:
        var value = /** @type {string} */ (reader.readString());
        msg.setIp(value);
        break;
      case 18:
        var value = new proto.forge_abi.GeoInfo();
        reader.readMessage(value, proto.forge_abi.GeoInfo.deserializeBinaryFromReader);
        msg.setGeoInfo(value);
        break;
      case 19:
        var value = /** @type {string} */ (reader.readString());
        msg.setP2pAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.NodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.NodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.NodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.NodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getConsensusVersion();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getSynced();
  if (f) {
    writer.writeBool(5, f);
  }
  f = message.getAppHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(6, f);
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(7, f);
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(8, f);
  }
  f = message.getBlockTime();
  if (f != null) {
    writer.writeMessage(9, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(10, f);
  }
  f = message.getVotingPower();
  if (f !== 0) {
    writer.writeUint64(11, f);
  }
  f = message.getTotalTxs();
  if (f !== 0) {
    writer.writeUint64(12, f);
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(13, f);
  }
  f = message.getForgeAppsVersionMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSupportedTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(16, f);
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(17, f);
  }
  f = message.getGeoInfo();
  if (f != null) {
    writer.writeMessage(18, f, proto.forge_abi.GeoInfo.serializeBinaryToWriter);
  }
  f = message.getP2pAddress();
  if (f.length > 0) {
    writer.writeString(19, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string network = 2;
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string moniker = 3;
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setMoniker = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string consensus_version = 4;
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getConsensusVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setConsensusVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional bool synced = 5;
 * @return {boolean}
 */
proto.forge_abi.NodeInfo.prototype.getSynced = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};

/**
 * @param {boolean} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setSynced = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};

/**
 * optional bytes app_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.NodeInfo.prototype.getAppHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * optional bytes app_hash = 6;
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getAppHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAppHash()));
};

/**
 * optional bytes app_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.NodeInfo.prototype.getAppHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAppHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setAppHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};

/**
 * optional bytes block_hash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.NodeInfo.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * optional bytes block_hash = 7;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockHash()));
};

/**
 * optional bytes block_hash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.NodeInfo.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};

/**
 * optional uint64 block_height = 8;
 * @return {number}
 */
proto.forge_abi.NodeInfo.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional google.protobuf.Timestamp block_time = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_abi.NodeInfo.prototype.getBlockTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    9
  ));
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setBlockTime = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.clearBlockTime = function() {
  return this.setBlockTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.NodeInfo.prototype.hasBlockTime = function() {
  return jspb.Message.getField(this, 9) != null;
};

/**
 * optional string address = 10;
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};

/**
 * optional uint64 voting_power = 11;
 * @return {number}
 */
proto.forge_abi.NodeInfo.prototype.getVotingPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setVotingPower = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};

/**
 * optional uint64 total_txs = 12;
 * @return {number}
 */
proto.forge_abi.NodeInfo.prototype.getTotalTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setTotalTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};

/**
 * optional string version = 13;
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};

/**
 * map<string, string> forge_apps_version = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.forge_abi.NodeInfo.prototype.getForgeAppsVersionMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(this, 15, opt_noLazyCreate, null));
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.clearForgeAppsVersionMap = function() {
  this.getForgeAppsVersionMap().clear();
  return this;
};

/**
 * repeated string supported_txs = 16;
 * @return {!Array<string>}
 */
proto.forge_abi.NodeInfo.prototype.getSupportedTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setSupportedTxsList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.addSupportedTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.clearSupportedTxsList = function() {
  return this.setSupportedTxsList([]);
};

/**
 * optional string ip = 17;
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};

/**
 * optional GeoInfo geo_info = 18;
 * @return {?proto.forge_abi.GeoInfo}
 */
proto.forge_abi.NodeInfo.prototype.getGeoInfo = function() {
  return /** @type{?proto.forge_abi.GeoInfo} */ (jspb.Message.getWrapperField(this, proto.forge_abi.GeoInfo, 18));
};

/**
 * @param {?proto.forge_abi.GeoInfo|undefined} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setGeoInfo = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.clearGeoInfo = function() {
  return this.setGeoInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.NodeInfo.prototype.hasGeoInfo = function() {
  return jspb.Message.getField(this, 18) != null;
};

/**
 * optional string p2p_address = 19;
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getP2pAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.NodeInfo} returns this
 */
proto.forge_abi.NodeInfo.prototype.setP2pAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.Validator.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.Validator.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.Validator} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.Validator.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        power: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.Validator}
 */
proto.forge_abi.Validator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.Validator();
  return proto.forge_abi.Validator.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.Validator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.Validator}
 */
proto.forge_abi.Validator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setPower(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.Validator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.Validator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.Validator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.Validator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.forge_abi.Validator.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.Validator} returns this
 */
proto.forge_abi.Validator.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional uint64 power = 2;
 * @return {number}
 */
proto.forge_abi.Validator.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.Validator} returns this
 */
proto.forge_abi.Validator.prototype.setPower = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.ConsensusParams.repeatedFields_ = [5, 6];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ConsensusParams.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ConsensusParams.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ConsensusParams} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ConsensusParams.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        maxBytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
        maxGas: jspb.Message.getFieldWithDefault(msg, 2, 0),
        maxValidators: jspb.Message.getFieldWithDefault(msg, 3, 0),
        maxCandidates: jspb.Message.getFieldWithDefault(msg, 4, 0),
        pubKeyTypesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
        validatorsList: jspb.Message.toObjectList(
          msg.getValidatorsList(),
          proto.forge_abi.Validator.toObject,
          includeInstance
        ),
        validatorChanged: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
        paramChanged: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ConsensusParams}
 */
proto.forge_abi.ConsensusParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ConsensusParams();
  return proto.forge_abi.ConsensusParams.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ConsensusParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ConsensusParams}
 */
proto.forge_abi.ConsensusParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMaxBytes(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readSint64());
        msg.setMaxGas(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setMaxValidators(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setMaxCandidates(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.addPubKeyTypes(value);
        break;
      case 6:
        var value = new proto.forge_abi.Validator();
        reader.readMessage(value, proto.forge_abi.Validator.deserializeBinaryFromReader);
        msg.addValidators(value);
        break;
      case 7:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setValidatorChanged(value);
        break;
      case 8:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setParamChanged(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ConsensusParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ConsensusParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ConsensusParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ConsensusParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxBytes();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getMaxGas();
  if (f !== 0) {
    writer.writeSint64(2, f);
  }
  f = message.getMaxValidators();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getMaxCandidates();
  if (f !== 0) {
    writer.writeUint32(4, f);
  }
  f = message.getPubKeyTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(5, f);
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(6, f, proto.forge_abi.Validator.serializeBinaryToWriter);
  }
  f = message.getValidatorChanged();
  if (f) {
    writer.writeBool(7, f);
  }
  f = message.getParamChanged();
  if (f) {
    writer.writeBool(8, f);
  }
};

/**
 * optional uint64 max_bytes = 1;
 * @return {number}
 */
proto.forge_abi.ConsensusParams.prototype.getMaxBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ConsensusParams} returns this
 */
proto.forge_abi.ConsensusParams.prototype.setMaxBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional sint64 max_gas = 2;
 * @return {number}
 */
proto.forge_abi.ConsensusParams.prototype.getMaxGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ConsensusParams} returns this
 */
proto.forge_abi.ConsensusParams.prototype.setMaxGas = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint32 max_validators = 3;
 * @return {number}
 */
proto.forge_abi.ConsensusParams.prototype.getMaxValidators = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ConsensusParams} returns this
 */
proto.forge_abi.ConsensusParams.prototype.setMaxValidators = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint32 max_candidates = 4;
 * @return {number}
 */
proto.forge_abi.ConsensusParams.prototype.getMaxCandidates = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ConsensusParams} returns this
 */
proto.forge_abi.ConsensusParams.prototype.setMaxCandidates = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * repeated string pub_key_types = 5;
 * @return {!Array<string>}
 */
proto.forge_abi.ConsensusParams.prototype.getPubKeyTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.forge_abi.ConsensusParams} returns this
 */
proto.forge_abi.ConsensusParams.prototype.setPubKeyTypesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ConsensusParams} returns this
 */
proto.forge_abi.ConsensusParams.prototype.addPubKeyTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ConsensusParams} returns this
 */
proto.forge_abi.ConsensusParams.prototype.clearPubKeyTypesList = function() {
  return this.setPubKeyTypesList([]);
};

/**
 * repeated Validator validators = 6;
 * @return {!Array<!proto.forge_abi.Validator>}
 */
proto.forge_abi.ConsensusParams.prototype.getValidatorsList = function() {
  return /** @type{!Array<!proto.forge_abi.Validator>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.Validator,
    6
  ));
};

/**
 * @param {!Array<!proto.forge_abi.Validator>} value
 * @return {!proto.forge_abi.ConsensusParams} returns this
 */
proto.forge_abi.ConsensusParams.prototype.setValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};

/**
 * @param {!proto.forge_abi.Validator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.Validator}
 */
proto.forge_abi.ConsensusParams.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.forge_abi.Validator, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ConsensusParams} returns this
 */
proto.forge_abi.ConsensusParams.prototype.clearValidatorsList = function() {
  return this.setValidatorsList([]);
};

/**
 * optional bool validator_changed = 7;
 * @return {boolean}
 */
proto.forge_abi.ConsensusParams.prototype.getValidatorChanged = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};

/**
 * @param {boolean} value
 * @return {!proto.forge_abi.ConsensusParams} returns this
 */
proto.forge_abi.ConsensusParams.prototype.setValidatorChanged = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};

/**
 * optional bool param_changed = 8;
 * @return {boolean}
 */
proto.forge_abi.ConsensusParams.prototype.getParamChanged = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};

/**
 * @param {boolean} value
 * @return {!proto.forge_abi.ConsensusParams} returns this
 */
proto.forge_abi.ConsensusParams.prototype.setParamChanged = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.UpgradeTask.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.UpgradeTask.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.UpgradeTask.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.UpgradeTask} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.UpgradeTask.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, 0),
        dataHash: jspb.Message.getFieldWithDefault(msg, 2, ''),
        actionsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.UpgradeTask}
 */
proto.forge_abi.UpgradeTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.UpgradeTask();
  return proto.forge_abi.UpgradeTask.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.UpgradeTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.UpgradeTask}
 */
proto.forge_abi.UpgradeTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.UpgradeType} */ (reader.readEnum());
        msg.setType(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setDataHash(value);
        break;
      case 4:
        var value = /** @type {!Array<!proto.forge_abi.UpgradeAction>} */ (reader.readPackedEnum());
        msg.setActionsList(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.UpgradeTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.UpgradeTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.UpgradeTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.UpgradeTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getDataHash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writePackedEnum(4, f);
  }
};

/**
 * optional UpgradeType type = 1;
 * @return {!proto.forge_abi.UpgradeType}
 */
proto.forge_abi.UpgradeTask.prototype.getType = function() {
  return /** @type {!proto.forge_abi.UpgradeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {!proto.forge_abi.UpgradeType} value
 * @return {!proto.forge_abi.UpgradeTask} returns this
 */
proto.forge_abi.UpgradeTask.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional string data_hash = 2;
 * @return {string}
 */
proto.forge_abi.UpgradeTask.prototype.getDataHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.UpgradeTask} returns this
 */
proto.forge_abi.UpgradeTask.prototype.setDataHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * repeated UpgradeAction actions = 4;
 * @return {!Array<!proto.forge_abi.UpgradeAction>}
 */
proto.forge_abi.UpgradeTask.prototype.getActionsList = function() {
  return /** @type {!Array<!proto.forge_abi.UpgradeAction>} */ (jspb.Message.getRepeatedField(this, 4));
};

/**
 * @param {!Array<!proto.forge_abi.UpgradeAction>} value
 * @return {!proto.forge_abi.UpgradeTask} returns this
 */
proto.forge_abi.UpgradeTask.prototype.setActionsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};

/**
 * @param {!proto.forge_abi.UpgradeAction} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.UpgradeTask} returns this
 */
proto.forge_abi.UpgradeTask.prototype.addActions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.UpgradeTask} returns this
 */
proto.forge_abi.UpgradeTask.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.UpgradeTasks.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.UpgradeTasks.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.UpgradeTasks.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.UpgradeTasks} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.UpgradeTasks.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        itemList: jspb.Message.toObjectList(msg.getItemList(), proto.forge_abi.UpgradeTask.toObject, includeInstance),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.UpgradeTasks}
 */
proto.forge_abi.UpgradeTasks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.UpgradeTasks();
  return proto.forge_abi.UpgradeTasks.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.UpgradeTasks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.UpgradeTasks}
 */
proto.forge_abi.UpgradeTasks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.forge_abi.UpgradeTask();
        reader.readMessage(value, proto.forge_abi.UpgradeTask.deserializeBinaryFromReader);
        msg.addItem(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.UpgradeTasks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.UpgradeTasks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.UpgradeTasks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.UpgradeTasks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.forge_abi.UpgradeTask.serializeBinaryToWriter);
  }
};

/**
 * repeated UpgradeTask item = 1;
 * @return {!Array<!proto.forge_abi.UpgradeTask>}
 */
proto.forge_abi.UpgradeTasks.prototype.getItemList = function() {
  return /** @type{!Array<!proto.forge_abi.UpgradeTask>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.UpgradeTask,
    1
  ));
};

/**
 * @param {!Array<!proto.forge_abi.UpgradeTask>} value
 * @return {!proto.forge_abi.UpgradeTasks} returns this
 */
proto.forge_abi.UpgradeTasks.prototype.setItemList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.forge_abi.UpgradeTask=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.UpgradeTask}
 */
proto.forge_abi.UpgradeTasks.prototype.addItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.forge_abi.UpgradeTask, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.UpgradeTasks} returns this
 */
proto.forge_abi.UpgradeTasks.prototype.clearItemList = function() {
  return this.setItemList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.AbciContext.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.AbciContext.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.AbciContext} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.AbciContext.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        txHash: jspb.Message.getFieldWithDefault(msg, 1, ''),
        blockHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
        blockTime: (f = msg.getBlockTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        totalTxs: jspb.Message.getFieldWithDefault(msg, 4, 0),
        txStatistics: (f = msg.getTxStatistics()) && proto.forge_abi.TxStatistics.toObject(includeInstance, f),
        txIndex: jspb.Message.getFieldWithDefault(msg, 6, 0),
        lastBlockTime:
          (f = msg.getLastBlockTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.AbciContext}
 */
proto.forge_abi.AbciContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.AbciContext();
  return proto.forge_abi.AbciContext.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.AbciContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.AbciContext}
 */
proto.forge_abi.AbciContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTxHash(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setBlockHeight(value);
        break;
      case 3:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setBlockTime(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTotalTxs(value);
        break;
      case 5:
        var value = new proto.forge_abi.TxStatistics();
        reader.readMessage(value, proto.forge_abi.TxStatistics.deserializeBinaryFromReader);
        msg.setTxStatistics(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTxIndex(value);
        break;
      case 7:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setLastBlockTime(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.AbciContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.AbciContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.AbciContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.AbciContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getBlockTime();
  if (f != null) {
    writer.writeMessage(3, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
  f = message.getTotalTxs();
  if (f !== 0) {
    writer.writeUint64(4, f);
  }
  f = message.getTxStatistics();
  if (f != null) {
    writer.writeMessage(5, f, proto.forge_abi.TxStatistics.serializeBinaryToWriter);
  }
  f = message.getTxIndex();
  if (f !== 0) {
    writer.writeUint32(6, f);
  }
  f = message.getLastBlockTime();
  if (f != null) {
    writer.writeMessage(7, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
};

/**
 * optional string tx_hash = 1;
 * @return {string}
 */
proto.forge_abi.AbciContext.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.AbciContext} returns this
 */
proto.forge_abi.AbciContext.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional uint64 block_height = 2;
 * @return {number}
 */
proto.forge_abi.AbciContext.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.AbciContext} returns this
 */
proto.forge_abi.AbciContext.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional google.protobuf.Timestamp block_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_abi.AbciContext.prototype.getBlockTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    3
  ));
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.forge_abi.AbciContext} returns this
 */
proto.forge_abi.AbciContext.prototype.setBlockTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.AbciContext} returns this
 */
proto.forge_abi.AbciContext.prototype.clearBlockTime = function() {
  return this.setBlockTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.AbciContext.prototype.hasBlockTime = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional uint64 total_txs = 4;
 * @return {number}
 */
proto.forge_abi.AbciContext.prototype.getTotalTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.AbciContext} returns this
 */
proto.forge_abi.AbciContext.prototype.setTotalTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional TxStatistics tx_statistics = 5;
 * @return {?proto.forge_abi.TxStatistics}
 */
proto.forge_abi.AbciContext.prototype.getTxStatistics = function() {
  return /** @type{?proto.forge_abi.TxStatistics} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.TxStatistics,
    5
  ));
};

/**
 * @param {?proto.forge_abi.TxStatistics|undefined} value
 * @return {!proto.forge_abi.AbciContext} returns this
 */
proto.forge_abi.AbciContext.prototype.setTxStatistics = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.AbciContext} returns this
 */
proto.forge_abi.AbciContext.prototype.clearTxStatistics = function() {
  return this.setTxStatistics(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.AbciContext.prototype.hasTxStatistics = function() {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * optional uint32 tx_index = 6;
 * @return {number}
 */
proto.forge_abi.AbciContext.prototype.getTxIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.AbciContext} returns this
 */
proto.forge_abi.AbciContext.prototype.setTxIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional google.protobuf.Timestamp last_block_time = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_abi.AbciContext.prototype.getLastBlockTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    7
  ));
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.forge_abi.AbciContext} returns this
 */
proto.forge_abi.AbciContext.prototype.setLastBlockTime = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.AbciContext} returns this
 */
proto.forge_abi.AbciContext.prototype.clearLastBlockTime = function() {
  return this.setLastBlockTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.AbciContext.prototype.hasLastBlockTime = function() {
  return jspb.Message.getField(this, 7) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.Multisig.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.Multisig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.Multisig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.Multisig.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        signer: jspb.Message.getFieldWithDefault(msg, 1, ''),
        pk: msg.getPk(),
        signature: msg.getSignature(),
        delegator: jspb.Message.getFieldWithDefault(msg, 4, ''),
        data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.Multisig}
 */
proto.forge_abi.Multisig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.Multisig();
  return proto.forge_abi.Multisig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.Multisig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.Multisig}
 */
proto.forge_abi.Multisig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setSigner(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPk(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSignature(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setDelegator(value);
        break;
      case 15:
        var value = new google_protobuf_any_pb.Any();
        reader.readMessage(value, google_protobuf_any_pb.Any.deserializeBinaryFromReader);
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.Multisig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.Multisig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.Multisig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.Multisig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getDelegator();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(15, f, google_protobuf_any_pb.Any.serializeBinaryToWriter);
  }
};

/**
 * optional string signer = 1;
 * @return {string}
 */
proto.forge_abi.Multisig.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.Multisig} returns this
 */
proto.forge_abi.Multisig.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional bytes pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.Multisig.prototype.getPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes pk = 2;
 * This is a type-conversion wrapper around `getPk()`
 * @return {string}
 */
proto.forge_abi.Multisig.prototype.getPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPk()));
};

/**
 * optional bytes pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPk()`
 * @return {!Uint8Array}
 */
proto.forge_abi.Multisig.prototype.getPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPk()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.Multisig} returns this
 */
proto.forge_abi.Multisig.prototype.setPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.Multisig.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.forge_abi.Multisig.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.forge_abi.Multisig.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSignature()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.Multisig} returns this
 */
proto.forge_abi.Multisig.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional string delegator = 4;
 * @return {string}
 */
proto.forge_abi.Multisig.prototype.getDelegator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.Multisig} returns this
 */
proto.forge_abi.Multisig.prototype.setDelegator = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional google.protobuf.Any data = 15;
 * @return {?proto.google.protobuf.Any}
 */
proto.forge_abi.Multisig.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 15));
};

/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.forge_abi.Multisig} returns this
 */
proto.forge_abi.Multisig.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.Multisig} returns this
 */
proto.forge_abi.Multisig.prototype.clearData = function() {
  return this.setData(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.Multisig.prototype.hasData = function() {
  return jspb.Message.getField(this, 15) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.Transaction.repeatedFields_ = [14];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.Transaction.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.Transaction.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.Transaction} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.Transaction.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        from: jspb.Message.getFieldWithDefault(msg, 1, ''),
        nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
        chainId: jspb.Message.getFieldWithDefault(msg, 3, ''),
        pk: msg.getPk(),
        gas: jspb.Message.getFieldWithDefault(msg, 5, 0),
        delegator: jspb.Message.getFieldWithDefault(msg, 6, ''),
        signature: msg.getSignature(),
        signaturesList: jspb.Message.toObjectList(
          msg.getSignaturesList(),
          proto.forge_abi.Multisig.toObject,
          includeInstance
        ),
        itx: (f = msg.getItx()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.Transaction}
 */
proto.forge_abi.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.Transaction();
  return proto.forge_abi.Transaction.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.Transaction}
 */
proto.forge_abi.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setFrom(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNonce(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setChainId(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPk(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setGas(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setDelegator(value);
        break;
      case 13:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSignature(value);
        break;
      case 14:
        var value = new proto.forge_abi.Multisig();
        reader.readMessage(value, proto.forge_abi.Multisig.deserializeBinaryFromReader);
        msg.addSignatures(value);
        break;
      case 15:
        var value = new google_protobuf_any_pb.Any();
        reader.readMessage(value, google_protobuf_any_pb.Any.deserializeBinaryFromReader);
        msg.setItx(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint32(5, f);
  }
  f = message.getDelegator();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(13, f);
  }
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(14, f, proto.forge_abi.Multisig.serializeBinaryToWriter);
  }
  f = message.getItx();
  if (f != null) {
    writer.writeMessage(15, f, google_protobuf_any_pb.Any.serializeBinaryToWriter);
  }
};

/**
 * optional string from = 1;
 * @return {string}
 */
proto.forge_abi.Transaction.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.Transaction} returns this
 */
proto.forge_abi.Transaction.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.forge_abi.Transaction.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.Transaction} returns this
 */
proto.forge_abi.Transaction.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string chain_id = 3;
 * @return {string}
 */
proto.forge_abi.Transaction.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.Transaction} returns this
 */
proto.forge_abi.Transaction.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional bytes pk = 4;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.Transaction.prototype.getPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * optional bytes pk = 4;
 * This is a type-conversion wrapper around `getPk()`
 * @return {string}
 */
proto.forge_abi.Transaction.prototype.getPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPk()));
};

/**
 * optional bytes pk = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPk()`
 * @return {!Uint8Array}
 */
proto.forge_abi.Transaction.prototype.getPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPk()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.Transaction} returns this
 */
proto.forge_abi.Transaction.prototype.setPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional uint32 gas = 5;
 * @return {number}
 */
proto.forge_abi.Transaction.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.Transaction} returns this
 */
proto.forge_abi.Transaction.prototype.setGas = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional string delegator = 6;
 * @return {string}
 */
proto.forge_abi.Transaction.prototype.getDelegator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.Transaction} returns this
 */
proto.forge_abi.Transaction.prototype.setDelegator = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional bytes signature = 13;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.Transaction.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ''));
};

/**
 * optional bytes signature = 13;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.forge_abi.Transaction.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.forge_abi.Transaction.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSignature()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.Transaction} returns this
 */
proto.forge_abi.Transaction.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};

/**
 * repeated Multisig signatures = 14;
 * @return {!Array<!proto.forge_abi.Multisig>}
 */
proto.forge_abi.Transaction.prototype.getSignaturesList = function() {
  return /** @type{!Array<!proto.forge_abi.Multisig>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.Multisig,
    14
  ));
};

/**
 * @param {!Array<!proto.forge_abi.Multisig>} value
 * @return {!proto.forge_abi.Transaction} returns this
 */
proto.forge_abi.Transaction.prototype.setSignaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};

/**
 * @param {!proto.forge_abi.Multisig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.Multisig}
 */
proto.forge_abi.Transaction.prototype.addSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.forge_abi.Multisig, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.Transaction} returns this
 */
proto.forge_abi.Transaction.prototype.clearSignaturesList = function() {
  return this.setSignaturesList([]);
};

/**
 * optional google.protobuf.Any itx = 15;
 * @return {?proto.google.protobuf.Any}
 */
proto.forge_abi.Transaction.prototype.getItx = function() {
  return /** @type{?proto.google.protobuf.Any} */ (jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 15));
};

/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.forge_abi.Transaction} returns this
 */
proto.forge_abi.Transaction.prototype.setItx = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.Transaction} returns this
 */
proto.forge_abi.Transaction.prototype.clearItx = function() {
  return this.setItx(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.Transaction.prototype.hasItx = function() {
  return jspb.Message.getField(this, 15) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.TransactionInfo.repeatedFields_ = [5];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.TransactionInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.TransactionInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.TransactionInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.TransactionInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        tx: (f = msg.getTx()) && proto.forge_abi.Transaction.toObject(includeInstance, f),
        height: jspb.Message.getFieldWithDefault(msg, 2, 0),
        index: jspb.Message.getFieldWithDefault(msg, 3, 0),
        hash: jspb.Message.getFieldWithDefault(msg, 4, ''),
        tagsList: jspb.Message.toObjectList(msg.getTagsList(), vendor_pb.KVPair.toObject, includeInstance),
        code: jspb.Message.getFieldWithDefault(msg, 6, 0),
        time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.TransactionInfo}
 */
proto.forge_abi.TransactionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.TransactionInfo();
  return proto.forge_abi.TransactionInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.TransactionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.TransactionInfo}
 */
proto.forge_abi.TransactionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.forge_abi.Transaction();
        reader.readMessage(value, proto.forge_abi.Transaction.deserializeBinaryFromReader);
        msg.setTx(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setHeight(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setIndex(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setHash(value);
        break;
      case 5:
        var value = new vendor_pb.KVPair();
        reader.readMessage(value, vendor_pb.KVPair.deserializeBinaryFromReader);
        msg.addTags(value);
        break;
      case 6:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 7:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setTime(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.TransactionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.TransactionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.TransactionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.TransactionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(1, f, proto.forge_abi.Transaction.serializeBinaryToWriter);
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(5, f, vendor_pb.KVPair.serializeBinaryToWriter);
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(6, f);
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(7, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
};

/**
 * optional Transaction tx = 1;
 * @return {?proto.forge_abi.Transaction}
 */
proto.forge_abi.TransactionInfo.prototype.getTx = function() {
  return /** @type{?proto.forge_abi.Transaction} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.Transaction,
    1
  ));
};

/**
 * @param {?proto.forge_abi.Transaction|undefined} value
 * @return {!proto.forge_abi.TransactionInfo} returns this
 */
proto.forge_abi.TransactionInfo.prototype.setTx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.TransactionInfo} returns this
 */
proto.forge_abi.TransactionInfo.prototype.clearTx = function() {
  return this.setTx(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.TransactionInfo.prototype.hasTx = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.forge_abi.TransactionInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TransactionInfo} returns this
 */
proto.forge_abi.TransactionInfo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint32 index = 3;
 * @return {number}
 */
proto.forge_abi.TransactionInfo.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TransactionInfo} returns this
 */
proto.forge_abi.TransactionInfo.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string hash = 4;
 * @return {string}
 */
proto.forge_abi.TransactionInfo.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.TransactionInfo} returns this
 */
proto.forge_abi.TransactionInfo.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * repeated abci_vendor.KVPair tags = 5;
 * @return {!Array<!proto.abci_vendor.KVPair>}
 */
proto.forge_abi.TransactionInfo.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.abci_vendor.KVPair>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    vendor_pb.KVPair,
    5
  ));
};

/**
 * @param {!Array<!proto.abci_vendor.KVPair>} value
 * @return {!proto.forge_abi.TransactionInfo} returns this
 */
proto.forge_abi.TransactionInfo.prototype.setTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};

/**
 * @param {!proto.abci_vendor.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.abci_vendor.KVPair}
 */
proto.forge_abi.TransactionInfo.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.abci_vendor.KVPair, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.TransactionInfo} returns this
 */
proto.forge_abi.TransactionInfo.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};

/**
 * optional StatusCode code = 6;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.TransactionInfo.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {!proto.forge_abi.StatusCode} value
 * @return {!proto.forge_abi.TransactionInfo} returns this
 */
proto.forge_abi.TransactionInfo.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};

/**
 * optional google.protobuf.Timestamp time = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_abi.TransactionInfo.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    7
  ));
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.forge_abi.TransactionInfo} returns this
 */
proto.forge_abi.TransactionInfo.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.TransactionInfo} returns this
 */
proto.forge_abi.TransactionInfo.prototype.clearTime = function() {
  return this.setTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.TransactionInfo.prototype.hasTime = function() {
  return jspb.Message.getField(this, 7) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.DeclareConfig.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.DeclareConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.DeclareConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.DeclareConfig.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        restricted: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        hierarchy: jspb.Message.getFieldWithDefault(msg, 2, 0),
        cost: (f = msg.getCost()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.DeclareConfig}
 */
proto.forge_abi.DeclareConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.DeclareConfig();
  return proto.forge_abi.DeclareConfig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.DeclareConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.DeclareConfig}
 */
proto.forge_abi.DeclareConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setRestricted(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setHierarchy(value);
        break;
      case 3:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setCost(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.DeclareConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.DeclareConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.DeclareConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.DeclareConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRestricted();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getHierarchy();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getCost();
  if (f != null) {
    writer.writeMessage(3, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
};

/**
 * optional bool restricted = 1;
 * @return {boolean}
 */
proto.forge_abi.DeclareConfig.prototype.getRestricted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};

/**
 * @param {boolean} value
 * @return {!proto.forge_abi.DeclareConfig} returns this
 */
proto.forge_abi.DeclareConfig.prototype.setRestricted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional uint32 hierarchy = 2;
 * @return {number}
 */
proto.forge_abi.DeclareConfig.prototype.getHierarchy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.DeclareConfig} returns this
 */
proto.forge_abi.DeclareConfig.prototype.setHierarchy = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional BigUint cost = 3;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.DeclareConfig.prototype.getCost = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(this, proto.forge_abi.BigUint, 3));
};

/**
 * @param {?proto.forge_abi.BigUint|undefined} value
 * @return {!proto.forge_abi.DeclareConfig} returns this
 */
proto.forge_abi.DeclareConfig.prototype.setCost = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.DeclareConfig} returns this
 */
proto.forge_abi.DeclareConfig.prototype.clearCost = function() {
  return this.setCost(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.DeclareConfig.prototype.hasCost = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.DelegateConfig.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.DelegateConfig.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.DelegateConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.DelegateConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.DelegateConfig.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        deltaInterval: jspb.Message.getFieldWithDefault(msg, 1, 0),
        typeUrlsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.DelegateConfig}
 */
proto.forge_abi.DelegateConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.DelegateConfig();
  return proto.forge_abi.DelegateConfig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.DelegateConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.DelegateConfig}
 */
proto.forge_abi.DelegateConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setDeltaInterval(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.addTypeUrls(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.DelegateConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.DelegateConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.DelegateConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.DelegateConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeltaInterval();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getTypeUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(2, f);
  }
};

/**
 * optional uint32 delta_interval = 1;
 * @return {number}
 */
proto.forge_abi.DelegateConfig.prototype.getDeltaInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.DelegateConfig} returns this
 */
proto.forge_abi.DelegateConfig.prototype.setDeltaInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * repeated string type_urls = 2;
 * @return {!Array<string>}
 */
proto.forge_abi.DelegateConfig.prototype.getTypeUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.forge_abi.DelegateConfig} returns this
 */
proto.forge_abi.DelegateConfig.prototype.setTypeUrlsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.DelegateConfig} returns this
 */
proto.forge_abi.DelegateConfig.prototype.addTypeUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.DelegateConfig} returns this
 */
proto.forge_abi.DelegateConfig.prototype.clearTypeUrlsList = function() {
  return this.setTypeUrlsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.TransactionConfig.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.TransactionConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.TransactionConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.TransactionConfig.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        maxAssetSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
        maxListSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
        maxMultisig: jspb.Message.getFieldWithDefault(msg, 3, 0),
        minimumStake: jspb.Message.getFieldWithDefault(msg, 4, 0),
        declare: (f = msg.getDeclare()) && proto.forge_abi.DeclareConfig.toObject(includeInstance, f),
        delegate: (f = msg.getDelegate()) && proto.forge_abi.DelegateConfig.toObject(includeInstance, f),
        poke: (f = msg.getPoke()) && proto.forge_abi.PokeConfig.toObject(includeInstance, f),
        stake: (f = msg.getStake()) && proto.forge_abi.StakeConfig.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.TransactionConfig}
 */
proto.forge_abi.TransactionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.TransactionConfig();
  return proto.forge_abi.TransactionConfig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.TransactionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.TransactionConfig}
 */
proto.forge_abi.TransactionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setMaxAssetSize(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setMaxListSize(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setMaxMultisig(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMinimumStake(value);
        break;
      case 5:
        var value = new proto.forge_abi.DeclareConfig();
        reader.readMessage(value, proto.forge_abi.DeclareConfig.deserializeBinaryFromReader);
        msg.setDeclare(value);
        break;
      case 6:
        var value = new proto.forge_abi.DelegateConfig();
        reader.readMessage(value, proto.forge_abi.DelegateConfig.deserializeBinaryFromReader);
        msg.setDelegate(value);
        break;
      case 7:
        var value = new proto.forge_abi.PokeConfig();
        reader.readMessage(value, proto.forge_abi.PokeConfig.deserializeBinaryFromReader);
        msg.setPoke(value);
        break;
      case 8:
        var value = new proto.forge_abi.StakeConfig();
        reader.readMessage(value, proto.forge_abi.StakeConfig.deserializeBinaryFromReader);
        msg.setStake(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.TransactionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.TransactionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.TransactionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.TransactionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxAssetSize();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getMaxListSize();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getMaxMultisig();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getMinimumStake();
  if (f !== 0) {
    writer.writeUint64(4, f);
  }
  f = message.getDeclare();
  if (f != null) {
    writer.writeMessage(5, f, proto.forge_abi.DeclareConfig.serializeBinaryToWriter);
  }
  f = message.getDelegate();
  if (f != null) {
    writer.writeMessage(6, f, proto.forge_abi.DelegateConfig.serializeBinaryToWriter);
  }
  f = message.getPoke();
  if (f != null) {
    writer.writeMessage(7, f, proto.forge_abi.PokeConfig.serializeBinaryToWriter);
  }
  f = message.getStake();
  if (f != null) {
    writer.writeMessage(8, f, proto.forge_abi.StakeConfig.serializeBinaryToWriter);
  }
};

/**
 * optional uint32 max_asset_size = 1;
 * @return {number}
 */
proto.forge_abi.TransactionConfig.prototype.getMaxAssetSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TransactionConfig} returns this
 */
proto.forge_abi.TransactionConfig.prototype.setMaxAssetSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint32 max_list_size = 2;
 * @return {number}
 */
proto.forge_abi.TransactionConfig.prototype.getMaxListSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TransactionConfig} returns this
 */
proto.forge_abi.TransactionConfig.prototype.setMaxListSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint32 max_multisig = 3;
 * @return {number}
 */
proto.forge_abi.TransactionConfig.prototype.getMaxMultisig = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TransactionConfig} returns this
 */
proto.forge_abi.TransactionConfig.prototype.setMaxMultisig = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint64 minimum_stake = 4;
 * @return {number}
 */
proto.forge_abi.TransactionConfig.prototype.getMinimumStake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TransactionConfig} returns this
 */
proto.forge_abi.TransactionConfig.prototype.setMinimumStake = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional DeclareConfig declare = 5;
 * @return {?proto.forge_abi.DeclareConfig}
 */
proto.forge_abi.TransactionConfig.prototype.getDeclare = function() {
  return /** @type{?proto.forge_abi.DeclareConfig} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.DeclareConfig,
    5
  ));
};

/**
 * @param {?proto.forge_abi.DeclareConfig|undefined} value
 * @return {!proto.forge_abi.TransactionConfig} returns this
 */
proto.forge_abi.TransactionConfig.prototype.setDeclare = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.TransactionConfig} returns this
 */
proto.forge_abi.TransactionConfig.prototype.clearDeclare = function() {
  return this.setDeclare(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.TransactionConfig.prototype.hasDeclare = function() {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * optional DelegateConfig delegate = 6;
 * @return {?proto.forge_abi.DelegateConfig}
 */
proto.forge_abi.TransactionConfig.prototype.getDelegate = function() {
  return /** @type{?proto.forge_abi.DelegateConfig} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.DelegateConfig,
    6
  ));
};

/**
 * @param {?proto.forge_abi.DelegateConfig|undefined} value
 * @return {!proto.forge_abi.TransactionConfig} returns this
 */
proto.forge_abi.TransactionConfig.prototype.setDelegate = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.TransactionConfig} returns this
 */
proto.forge_abi.TransactionConfig.prototype.clearDelegate = function() {
  return this.setDelegate(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.TransactionConfig.prototype.hasDelegate = function() {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * optional PokeConfig poke = 7;
 * @return {?proto.forge_abi.PokeConfig}
 */
proto.forge_abi.TransactionConfig.prototype.getPoke = function() {
  return /** @type{?proto.forge_abi.PokeConfig} */ (jspb.Message.getWrapperField(this, proto.forge_abi.PokeConfig, 7));
};

/**
 * @param {?proto.forge_abi.PokeConfig|undefined} value
 * @return {!proto.forge_abi.TransactionConfig} returns this
 */
proto.forge_abi.TransactionConfig.prototype.setPoke = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.TransactionConfig} returns this
 */
proto.forge_abi.TransactionConfig.prototype.clearPoke = function() {
  return this.setPoke(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.TransactionConfig.prototype.hasPoke = function() {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * optional StakeConfig stake = 8;
 * @return {?proto.forge_abi.StakeConfig}
 */
proto.forge_abi.TransactionConfig.prototype.getStake = function() {
  return /** @type{?proto.forge_abi.StakeConfig} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.StakeConfig,
    8
  ));
};

/**
 * @param {?proto.forge_abi.StakeConfig|undefined} value
 * @return {!proto.forge_abi.TransactionConfig} returns this
 */
proto.forge_abi.TransactionConfig.prototype.setStake = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.TransactionConfig} returns this
 */
proto.forge_abi.TransactionConfig.prototype.clearStake = function() {
  return this.setStake(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.TransactionConfig.prototype.hasStake = function() {
  return jspb.Message.getField(this, 8) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.BlockInfo.repeatedFields_ = [6, 8, 9, 10];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.BlockInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.BlockInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.BlockInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.BlockInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        height: jspb.Message.getFieldWithDefault(msg, 1, 0),
        numTxs: jspb.Message.getFieldWithDefault(msg, 2, 0),
        time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        appHash: msg.getAppHash(),
        proposer: msg.getProposer(),
        txsList: jspb.Message.toObjectList(msg.getTxsList(), proto.forge_abi.TransactionInfo.toObject, includeInstance),
        totalTxs: jspb.Message.getFieldWithDefault(msg, 7, 0),
        invalidTxsList: jspb.Message.toObjectList(
          msg.getInvalidTxsList(),
          proto.forge_abi.TransactionInfo.toObject,
          includeInstance
        ),
        txsHashesList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
        invalidTxsHashesList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
        consensusHash: msg.getConsensusHash(),
        dataHash: msg.getDataHash(),
        evidenceHash: msg.getEvidenceHash(),
        lastCommitHash: msg.getLastCommitHash(),
        lastResultsHash: msg.getLastResultsHash(),
        nextValidatorsHash: msg.getNextValidatorsHash(),
        validatorsHash: msg.getValidatorsHash(),
        version: (f = msg.getVersion()) && vendor_pb.Version.toObject(includeInstance, f),
        lastBlockId: (f = msg.getLastBlockId()) && vendor_pb.BlockID.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.BlockInfo}
 */
proto.forge_abi.BlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.BlockInfo();
  return proto.forge_abi.BlockInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.BlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.BlockInfo}
 */
proto.forge_abi.BlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setHeight(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setNumTxs(value);
        break;
      case 3:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setTime(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAppHash(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setProposer(value);
        break;
      case 6:
        var value = new proto.forge_abi.TransactionInfo();
        reader.readMessage(value, proto.forge_abi.TransactionInfo.deserializeBinaryFromReader);
        msg.addTxs(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTotalTxs(value);
        break;
      case 8:
        var value = new proto.forge_abi.TransactionInfo();
        reader.readMessage(value, proto.forge_abi.TransactionInfo.deserializeBinaryFromReader);
        msg.addInvalidTxs(value);
        break;
      case 9:
        var value = /** @type {string} */ (reader.readString());
        msg.addTxsHashes(value);
        break;
      case 10:
        var value = /** @type {string} */ (reader.readString());
        msg.addInvalidTxsHashes(value);
        break;
      case 11:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setConsensusHash(value);
        break;
      case 12:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setDataHash(value);
        break;
      case 13:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setEvidenceHash(value);
        break;
      case 14:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setLastCommitHash(value);
        break;
      case 15:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setLastResultsHash(value);
        break;
      case 16:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setNextValidatorsHash(value);
        break;
      case 17:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setValidatorsHash(value);
        break;
      case 18:
        var value = new vendor_pb.Version();
        reader.readMessage(value, vendor_pb.Version.deserializeBinaryFromReader);
        msg.setVersion(value);
        break;
      case 19:
        var value = new vendor_pb.BlockID();
        reader.readMessage(value, vendor_pb.BlockID.deserializeBinaryFromReader);
        msg.setLastBlockId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.BlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.BlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.BlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getNumTxs();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(3, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
  f = message.getAppHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getProposer_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(6, f, proto.forge_abi.TransactionInfo.serializeBinaryToWriter);
  }
  f = message.getTotalTxs();
  if (f !== 0) {
    writer.writeUint64(7, f);
  }
  f = message.getInvalidTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(8, f, proto.forge_abi.TransactionInfo.serializeBinaryToWriter);
  }
  f = message.getTxsHashesList();
  if (f.length > 0) {
    writer.writeRepeatedString(9, f);
  }
  f = message.getInvalidTxsHashesList();
  if (f.length > 0) {
    writer.writeRepeatedString(10, f);
  }
  f = message.getConsensusHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(11, f);
  }
  f = message.getDataHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(12, f);
  }
  f = message.getEvidenceHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(13, f);
  }
  f = message.getLastCommitHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(14, f);
  }
  f = message.getLastResultsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(15, f);
  }
  f = message.getNextValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(16, f);
  }
  f = message.getValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(17, f);
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(18, f, vendor_pb.Version.serializeBinaryToWriter);
  }
  f = message.getLastBlockId();
  if (f != null) {
    writer.writeMessage(19, f, vendor_pb.BlockID.serializeBinaryToWriter);
  }
};

/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.forge_abi.BlockInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint32 num_txs = 2;
 * @return {number}
 */
proto.forge_abi.BlockInfo.prototype.getNumTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setNumTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional google.protobuf.Timestamp time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_abi.BlockInfo.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    3
  ));
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.clearTime = function() {
  return this.setTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.BlockInfo.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional bytes app_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfo.prototype.getAppHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * optional bytes app_hash = 4;
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfo.prototype.getAppHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAppHash()));
};

/**
 * optional bytes app_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfo.prototype.getAppHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAppHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setAppHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional bytes proposer = 5;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfo.prototype.getProposer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * optional bytes proposer = 5;
 * This is a type-conversion wrapper around `getProposer()`
 * @return {string}
 */
proto.forge_abi.BlockInfo.prototype.getProposer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getProposer()));
};

/**
 * optional bytes proposer = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposer()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfo.prototype.getProposer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getProposer()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setProposer = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

/**
 * repeated TransactionInfo txs = 6;
 * @return {!Array<!proto.forge_abi.TransactionInfo>}
 */
proto.forge_abi.BlockInfo.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.forge_abi.TransactionInfo>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.TransactionInfo,
    6
  ));
};

/**
 * @param {!Array<!proto.forge_abi.TransactionInfo>} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};

/**
 * @param {!proto.forge_abi.TransactionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.TransactionInfo}
 */
proto.forge_abi.BlockInfo.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.forge_abi.TransactionInfo, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};

/**
 * optional uint64 total_txs = 7;
 * @return {number}
 */
proto.forge_abi.BlockInfo.prototype.getTotalTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setTotalTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * repeated TransactionInfo invalid_txs = 8;
 * @return {!Array<!proto.forge_abi.TransactionInfo>}
 */
proto.forge_abi.BlockInfo.prototype.getInvalidTxsList = function() {
  return /** @type{!Array<!proto.forge_abi.TransactionInfo>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.TransactionInfo,
    8
  ));
};

/**
 * @param {!Array<!proto.forge_abi.TransactionInfo>} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setInvalidTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};

/**
 * @param {!proto.forge_abi.TransactionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.TransactionInfo}
 */
proto.forge_abi.BlockInfo.prototype.addInvalidTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.forge_abi.TransactionInfo, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.clearInvalidTxsList = function() {
  return this.setInvalidTxsList([]);
};

/**
 * repeated string txs_hashes = 9;
 * @return {!Array<string>}
 */
proto.forge_abi.BlockInfo.prototype.getTxsHashesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setTxsHashesList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.addTxsHashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.clearTxsHashesList = function() {
  return this.setTxsHashesList([]);
};

/**
 * repeated string invalid_txs_hashes = 10;
 * @return {!Array<string>}
 */
proto.forge_abi.BlockInfo.prototype.getInvalidTxsHashesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setInvalidTxsHashesList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.addInvalidTxsHashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.clearInvalidTxsHashesList = function() {
  return this.setInvalidTxsHashesList([]);
};

/**
 * optional bytes consensus_hash = 11;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfo.prototype.getConsensusHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ''));
};

/**
 * optional bytes consensus_hash = 11;
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfo.prototype.getConsensusHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getConsensusHash()));
};

/**
 * optional bytes consensus_hash = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfo.prototype.getConsensusHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getConsensusHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setConsensusHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};

/**
 * optional bytes data_hash = 12;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfo.prototype.getDataHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ''));
};

/**
 * optional bytes data_hash = 12;
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfo.prototype.getDataHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getDataHash()));
};

/**
 * optional bytes data_hash = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfo.prototype.getDataHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getDataHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setDataHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};

/**
 * optional bytes evidence_hash = 13;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfo.prototype.getEvidenceHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ''));
};

/**
 * optional bytes evidence_hash = 13;
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfo.prototype.getEvidenceHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEvidenceHash()));
};

/**
 * optional bytes evidence_hash = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfo.prototype.getEvidenceHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEvidenceHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setEvidenceHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};

/**
 * optional bytes last_commit_hash = 14;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfo.prototype.getLastCommitHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ''));
};

/**
 * optional bytes last_commit_hash = 14;
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfo.prototype.getLastCommitHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getLastCommitHash()));
};

/**
 * optional bytes last_commit_hash = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfo.prototype.getLastCommitHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getLastCommitHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setLastCommitHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};

/**
 * optional bytes last_results_hash = 15;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfo.prototype.getLastResultsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ''));
};

/**
 * optional bytes last_results_hash = 15;
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfo.prototype.getLastResultsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getLastResultsHash()));
};

/**
 * optional bytes last_results_hash = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfo.prototype.getLastResultsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getLastResultsHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setLastResultsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};

/**
 * optional bytes next_validators_hash = 16;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfo.prototype.getNextValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 16, ''));
};

/**
 * optional bytes next_validators_hash = 16;
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfo.prototype.getNextValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNextValidatorsHash()));
};

/**
 * optional bytes next_validators_hash = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfo.prototype.getNextValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNextValidatorsHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setNextValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 16, value);
};

/**
 * optional bytes validators_hash = 17;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfo.prototype.getValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ''));
};

/**
 * optional bytes validators_hash = 17;
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfo.prototype.getValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getValidatorsHash()));
};

/**
 * optional bytes validators_hash = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfo.prototype.getValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getValidatorsHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 17, value);
};

/**
 * optional abci_vendor.Version version = 18;
 * @return {?proto.abci_vendor.Version}
 */
proto.forge_abi.BlockInfo.prototype.getVersion = function() {
  return /** @type{?proto.abci_vendor.Version} */ (jspb.Message.getWrapperField(this, vendor_pb.Version, 18));
};

/**
 * @param {?proto.abci_vendor.Version|undefined} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setVersion = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.clearVersion = function() {
  return this.setVersion(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.BlockInfo.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 18) != null;
};

/**
 * optional abci_vendor.BlockID last_block_id = 19;
 * @return {?proto.abci_vendor.BlockID}
 */
proto.forge_abi.BlockInfo.prototype.getLastBlockId = function() {
  return /** @type{?proto.abci_vendor.BlockID} */ (jspb.Message.getWrapperField(this, vendor_pb.BlockID, 19));
};

/**
 * @param {?proto.abci_vendor.BlockID|undefined} value
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.setLastBlockId = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.BlockInfo} returns this
 */
proto.forge_abi.BlockInfo.prototype.clearLastBlockId = function() {
  return this.setLastBlockId(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.BlockInfo.prototype.hasLastBlockId = function() {
  return jspb.Message.getField(this, 19) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.BlockInfoSimple.repeatedFields_ = [7, 8];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.BlockInfoSimple.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.BlockInfoSimple.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.BlockInfoSimple} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.BlockInfoSimple.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        height: jspb.Message.getFieldWithDefault(msg, 1, 0),
        numTxs: jspb.Message.getFieldWithDefault(msg, 2, 0),
        time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        appHash: msg.getAppHash(),
        proposer: msg.getProposer(),
        totalTxs: jspb.Message.getFieldWithDefault(msg, 6, 0),
        txsHashesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
        invalidTxsHashesList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
        consensusHash: msg.getConsensusHash(),
        dataHash: msg.getDataHash(),
        evidenceHash: msg.getEvidenceHash(),
        lastCommitHash: msg.getLastCommitHash(),
        lastResultsHash: msg.getLastResultsHash(),
        nextValidatorsHash: msg.getNextValidatorsHash(),
        validatorsHash: msg.getValidatorsHash(),
        version: (f = msg.getVersion()) && vendor_pb.Version.toObject(includeInstance, f),
        lastBlockId: (f = msg.getLastBlockId()) && vendor_pb.BlockID.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.BlockInfoSimple}
 */
proto.forge_abi.BlockInfoSimple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.BlockInfoSimple();
  return proto.forge_abi.BlockInfoSimple.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.BlockInfoSimple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.BlockInfoSimple}
 */
proto.forge_abi.BlockInfoSimple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setHeight(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setNumTxs(value);
        break;
      case 3:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setTime(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAppHash(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setProposer(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTotalTxs(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.addTxsHashes(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.addInvalidTxsHashes(value);
        break;
      case 9:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setConsensusHash(value);
        break;
      case 10:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setDataHash(value);
        break;
      case 11:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setEvidenceHash(value);
        break;
      case 12:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setLastCommitHash(value);
        break;
      case 13:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setLastResultsHash(value);
        break;
      case 14:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setNextValidatorsHash(value);
        break;
      case 15:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setValidatorsHash(value);
        break;
      case 16:
        var value = new vendor_pb.Version();
        reader.readMessage(value, vendor_pb.Version.deserializeBinaryFromReader);
        msg.setVersion(value);
        break;
      case 17:
        var value = new vendor_pb.BlockID();
        reader.readMessage(value, vendor_pb.BlockID.deserializeBinaryFromReader);
        msg.setLastBlockId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfoSimple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.BlockInfoSimple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.BlockInfoSimple} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.BlockInfoSimple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getNumTxs();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(3, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
  f = message.getAppHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getProposer_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = message.getTotalTxs();
  if (f !== 0) {
    writer.writeUint64(6, f);
  }
  f = message.getTxsHashesList();
  if (f.length > 0) {
    writer.writeRepeatedString(7, f);
  }
  f = message.getInvalidTxsHashesList();
  if (f.length > 0) {
    writer.writeRepeatedString(8, f);
  }
  f = message.getConsensusHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(9, f);
  }
  f = message.getDataHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(10, f);
  }
  f = message.getEvidenceHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(11, f);
  }
  f = message.getLastCommitHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(12, f);
  }
  f = message.getLastResultsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(13, f);
  }
  f = message.getNextValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(14, f);
  }
  f = message.getValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(15, f);
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(16, f, vendor_pb.Version.serializeBinaryToWriter);
  }
  f = message.getLastBlockId();
  if (f != null) {
    writer.writeMessage(17, f, vendor_pb.BlockID.serializeBinaryToWriter);
  }
};

/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.forge_abi.BlockInfoSimple.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint32 num_txs = 2;
 * @return {number}
 */
proto.forge_abi.BlockInfoSimple.prototype.getNumTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setNumTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional google.protobuf.Timestamp time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_abi.BlockInfoSimple.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    3
  ));
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.clearTime = function() {
  return this.setTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.BlockInfoSimple.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional bytes app_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfoSimple.prototype.getAppHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * optional bytes app_hash = 4;
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfoSimple.prototype.getAppHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAppHash()));
};

/**
 * optional bytes app_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfoSimple.prototype.getAppHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAppHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setAppHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional bytes proposer = 5;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfoSimple.prototype.getProposer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * optional bytes proposer = 5;
 * This is a type-conversion wrapper around `getProposer()`
 * @return {string}
 */
proto.forge_abi.BlockInfoSimple.prototype.getProposer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getProposer()));
};

/**
 * optional bytes proposer = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposer()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfoSimple.prototype.getProposer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getProposer()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setProposer = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

/**
 * optional uint64 total_txs = 6;
 * @return {number}
 */
proto.forge_abi.BlockInfoSimple.prototype.getTotalTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setTotalTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * repeated string txs_hashes = 7;
 * @return {!Array<string>}
 */
proto.forge_abi.BlockInfoSimple.prototype.getTxsHashesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setTxsHashesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.addTxsHashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.clearTxsHashesList = function() {
  return this.setTxsHashesList([]);
};

/**
 * repeated string invalid_txs_hashes = 8;
 * @return {!Array<string>}
 */
proto.forge_abi.BlockInfoSimple.prototype.getInvalidTxsHashesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setInvalidTxsHashesList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.addInvalidTxsHashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.clearInvalidTxsHashesList = function() {
  return this.setInvalidTxsHashesList([]);
};

/**
 * optional bytes consensus_hash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfoSimple.prototype.getConsensusHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ''));
};

/**
 * optional bytes consensus_hash = 9;
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfoSimple.prototype.getConsensusHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getConsensusHash()));
};

/**
 * optional bytes consensus_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfoSimple.prototype.getConsensusHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getConsensusHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setConsensusHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};

/**
 * optional bytes data_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfoSimple.prototype.getDataHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ''));
};

/**
 * optional bytes data_hash = 10;
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfoSimple.prototype.getDataHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getDataHash()));
};

/**
 * optional bytes data_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfoSimple.prototype.getDataHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getDataHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setDataHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};

/**
 * optional bytes evidence_hash = 11;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfoSimple.prototype.getEvidenceHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ''));
};

/**
 * optional bytes evidence_hash = 11;
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfoSimple.prototype.getEvidenceHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEvidenceHash()));
};

/**
 * optional bytes evidence_hash = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfoSimple.prototype.getEvidenceHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEvidenceHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setEvidenceHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};

/**
 * optional bytes last_commit_hash = 12;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfoSimple.prototype.getLastCommitHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ''));
};

/**
 * optional bytes last_commit_hash = 12;
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfoSimple.prototype.getLastCommitHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getLastCommitHash()));
};

/**
 * optional bytes last_commit_hash = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfoSimple.prototype.getLastCommitHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getLastCommitHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setLastCommitHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};

/**
 * optional bytes last_results_hash = 13;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfoSimple.prototype.getLastResultsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ''));
};

/**
 * optional bytes last_results_hash = 13;
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfoSimple.prototype.getLastResultsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getLastResultsHash()));
};

/**
 * optional bytes last_results_hash = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfoSimple.prototype.getLastResultsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getLastResultsHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setLastResultsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};

/**
 * optional bytes next_validators_hash = 14;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfoSimple.prototype.getNextValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ''));
};

/**
 * optional bytes next_validators_hash = 14;
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfoSimple.prototype.getNextValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNextValidatorsHash()));
};

/**
 * optional bytes next_validators_hash = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfoSimple.prototype.getNextValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNextValidatorsHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setNextValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};

/**
 * optional bytes validators_hash = 15;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BlockInfoSimple.prototype.getValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ''));
};

/**
 * optional bytes validators_hash = 15;
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {string}
 */
proto.forge_abi.BlockInfoSimple.prototype.getValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getValidatorsHash()));
};

/**
 * optional bytes validators_hash = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfoSimple.prototype.getValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getValidatorsHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};

/**
 * optional abci_vendor.Version version = 16;
 * @return {?proto.abci_vendor.Version}
 */
proto.forge_abi.BlockInfoSimple.prototype.getVersion = function() {
  return /** @type{?proto.abci_vendor.Version} */ (jspb.Message.getWrapperField(this, vendor_pb.Version, 16));
};

/**
 * @param {?proto.abci_vendor.Version|undefined} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setVersion = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.clearVersion = function() {
  return this.setVersion(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.BlockInfoSimple.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 16) != null;
};

/**
 * optional abci_vendor.BlockID last_block_id = 17;
 * @return {?proto.abci_vendor.BlockID}
 */
proto.forge_abi.BlockInfoSimple.prototype.getLastBlockId = function() {
  return /** @type{?proto.abci_vendor.BlockID} */ (jspb.Message.getWrapperField(this, vendor_pb.BlockID, 17));
};

/**
 * @param {?proto.abci_vendor.BlockID|undefined} value
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.setLastBlockId = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.BlockInfoSimple} returns this
 */
proto.forge_abi.BlockInfoSimple.prototype.clearLastBlockId = function() {
  return this.setLastBlockId(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.BlockInfoSimple.prototype.hasLastBlockId = function() {
  return jspb.Message.getField(this, 17) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.TxStatus.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.TxStatus.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.TxStatus} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.TxStatus.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        hash: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.TxStatus}
 */
proto.forge_abi.TxStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.TxStatus();
  return proto.forge_abi.TxStatus.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.TxStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.TxStatus}
 */
proto.forge_abi.TxStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.TxStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.TxStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.TxStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.TxStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.TxStatus.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {!proto.forge_abi.StatusCode} value
 * @return {!proto.forge_abi.TxStatus} returns this
 */
proto.forge_abi.TxStatus.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional string hash = 2;
 * @return {string}
 */
proto.forge_abi.TxStatus.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.TxStatus} returns this
 */
proto.forge_abi.TxStatus.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.CircularQueue.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.CircularQueue.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.CircularQueue.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.CircularQueue} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.CircularQueue.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        itemsList: msg.getItemsList(),
        typeUrl: jspb.Message.getFieldWithDefault(msg, 2, ''),
        maxItems: jspb.Message.getFieldWithDefault(msg, 3, 0),
        circular: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
        fifo: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.CircularQueue}
 */
proto.forge_abi.CircularQueue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.CircularQueue();
  return proto.forge_abi.CircularQueue.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.CircularQueue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.CircularQueue}
 */
proto.forge_abi.CircularQueue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addItems(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setTypeUrl(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setMaxItems(value);
        break;
      case 4:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setCircular(value);
        break;
      case 5:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setFifo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.CircularQueue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.CircularQueue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.CircularQueue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.CircularQueue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(1, f);
  }
  f = message.getTypeUrl();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getMaxItems();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getCircular();
  if (f) {
    writer.writeBool(4, f);
  }
  f = message.getFifo();
  if (f) {
    writer.writeBool(5, f);
  }
};

/**
 * repeated bytes items = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.forge_abi.CircularQueue.prototype.getItemsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};

/**
 * repeated bytes items = 1;
 * This is a type-conversion wrapper around `getItemsList()`
 * @return {!Array<string>}
 */
proto.forge_abi.CircularQueue.prototype.getItemsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(this.getItemsList()));
};

/**
 * repeated bytes items = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getItemsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.forge_abi.CircularQueue.prototype.getItemsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(this.getItemsList()));
};

/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.forge_abi.CircularQueue} returns this
 */
proto.forge_abi.CircularQueue.prototype.setItemsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.CircularQueue} returns this
 */
proto.forge_abi.CircularQueue.prototype.addItems = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.CircularQueue} returns this
 */
proto.forge_abi.CircularQueue.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};

/**
 * optional string type_url = 2;
 * @return {string}
 */
proto.forge_abi.CircularQueue.prototype.getTypeUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.CircularQueue} returns this
 */
proto.forge_abi.CircularQueue.prototype.setTypeUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional uint32 max_items = 3;
 * @return {number}
 */
proto.forge_abi.CircularQueue.prototype.getMaxItems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.CircularQueue} returns this
 */
proto.forge_abi.CircularQueue.prototype.setMaxItems = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional bool circular = 4;
 * @return {boolean}
 */
proto.forge_abi.CircularQueue.prototype.getCircular = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};

/**
 * @param {boolean} value
 * @return {!proto.forge_abi.CircularQueue} returns this
 */
proto.forge_abi.CircularQueue.prototype.setCircular = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};

/**
 * optional bool fifo = 5;
 * @return {boolean}
 */
proto.forge_abi.CircularQueue.prototype.getFifo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};

/**
 * @param {boolean} value
 * @return {!proto.forge_abi.CircularQueue} returns this
 */
proto.forge_abi.CircularQueue.prototype.setFifo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.StateContext.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.StateContext.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.StateContext} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.StateContext.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        genesisTx: jspb.Message.getFieldWithDefault(msg, 1, ''),
        renaissanceTx: jspb.Message.getFieldWithDefault(msg, 2, ''),
        genesisTime: (f = msg.getGenesisTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        renaissanceTime:
          (f = msg.getRenaissanceTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.StateContext}
 */
proto.forge_abi.StateContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.StateContext();
  return proto.forge_abi.StateContext.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.StateContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.StateContext}
 */
proto.forge_abi.StateContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setGenesisTx(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setRenaissanceTx(value);
        break;
      case 3:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setGenesisTime(value);
        break;
      case 4:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setRenaissanceTime(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.StateContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.StateContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.StateContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.StateContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGenesisTx();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getRenaissanceTx();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getGenesisTime();
  if (f != null) {
    writer.writeMessage(3, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
  f = message.getRenaissanceTime();
  if (f != null) {
    writer.writeMessage(4, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
};

/**
 * optional string genesis_tx = 1;
 * @return {string}
 */
proto.forge_abi.StateContext.prototype.getGenesisTx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.StateContext} returns this
 */
proto.forge_abi.StateContext.prototype.setGenesisTx = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string renaissance_tx = 2;
 * @return {string}
 */
proto.forge_abi.StateContext.prototype.getRenaissanceTx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.StateContext} returns this
 */
proto.forge_abi.StateContext.prototype.setRenaissanceTx = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional google.protobuf.Timestamp genesis_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_abi.StateContext.prototype.getGenesisTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    3
  ));
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.forge_abi.StateContext} returns this
 */
proto.forge_abi.StateContext.prototype.setGenesisTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.StateContext} returns this
 */
proto.forge_abi.StateContext.prototype.clearGenesisTime = function() {
  return this.setGenesisTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.StateContext.prototype.hasGenesisTime = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional google.protobuf.Timestamp renaissance_time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_abi.StateContext.prototype.getRenaissanceTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    4
  ));
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.forge_abi.StateContext} returns this
 */
proto.forge_abi.StateContext.prototype.setRenaissanceTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.StateContext} returns this
 */
proto.forge_abi.StateContext.prototype.clearRenaissanceTime = function() {
  return this.setRenaissanceTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.StateContext.prototype.hasRenaissanceTime = function() {
  return jspb.Message.getField(this, 4) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.StakeContext.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.StakeContext.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.StakeContext} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.StakeContext.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        totalStakes: (f = msg.getTotalStakes()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
        totalUnstakes: (f = msg.getTotalUnstakes()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
        totalReceivedStakes: (f = msg.getTotalReceivedStakes()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
        recentStakes: (f = msg.getRecentStakes()) && proto.forge_abi.CircularQueue.toObject(includeInstance, f),
        recentReceivedStakes:
          (f = msg.getRecentReceivedStakes()) && proto.forge_abi.CircularQueue.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.StakeContext}
 */
proto.forge_abi.StakeContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.StakeContext();
  return proto.forge_abi.StakeContext.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.StakeContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.StakeContext}
 */
proto.forge_abi.StakeContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setTotalStakes(value);
        break;
      case 2:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setTotalUnstakes(value);
        break;
      case 3:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setTotalReceivedStakes(value);
        break;
      case 4:
        var value = new proto.forge_abi.CircularQueue();
        reader.readMessage(value, proto.forge_abi.CircularQueue.deserializeBinaryFromReader);
        msg.setRecentStakes(value);
        break;
      case 15:
        var value = new proto.forge_abi.CircularQueue();
        reader.readMessage(value, proto.forge_abi.CircularQueue.deserializeBinaryFromReader);
        msg.setRecentReceivedStakes(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.StakeContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.StakeContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.StakeContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.StakeContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalStakes();
  if (f != null) {
    writer.writeMessage(1, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
  f = message.getTotalUnstakes();
  if (f != null) {
    writer.writeMessage(2, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
  f = message.getTotalReceivedStakes();
  if (f != null) {
    writer.writeMessage(3, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
  f = message.getRecentStakes();
  if (f != null) {
    writer.writeMessage(4, f, proto.forge_abi.CircularQueue.serializeBinaryToWriter);
  }
  f = message.getRecentReceivedStakes();
  if (f != null) {
    writer.writeMessage(15, f, proto.forge_abi.CircularQueue.serializeBinaryToWriter);
  }
};

/**
 * optional BigUint total_stakes = 1;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.StakeContext.prototype.getTotalStakes = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(this, proto.forge_abi.BigUint, 1));
};

/**
 * @param {?proto.forge_abi.BigUint|undefined} value
 * @return {!proto.forge_abi.StakeContext} returns this
 */
proto.forge_abi.StakeContext.prototype.setTotalStakes = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.StakeContext} returns this
 */
proto.forge_abi.StakeContext.prototype.clearTotalStakes = function() {
  return this.setTotalStakes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.StakeContext.prototype.hasTotalStakes = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional BigUint total_unstakes = 2;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.StakeContext.prototype.getTotalUnstakes = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(this, proto.forge_abi.BigUint, 2));
};

/**
 * @param {?proto.forge_abi.BigUint|undefined} value
 * @return {!proto.forge_abi.StakeContext} returns this
 */
proto.forge_abi.StakeContext.prototype.setTotalUnstakes = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.StakeContext} returns this
 */
proto.forge_abi.StakeContext.prototype.clearTotalUnstakes = function() {
  return this.setTotalUnstakes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.StakeContext.prototype.hasTotalUnstakes = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional BigUint total_received_stakes = 3;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.StakeContext.prototype.getTotalReceivedStakes = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(this, proto.forge_abi.BigUint, 3));
};

/**
 * @param {?proto.forge_abi.BigUint|undefined} value
 * @return {!proto.forge_abi.StakeContext} returns this
 */
proto.forge_abi.StakeContext.prototype.setTotalReceivedStakes = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.StakeContext} returns this
 */
proto.forge_abi.StakeContext.prototype.clearTotalReceivedStakes = function() {
  return this.setTotalReceivedStakes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.StakeContext.prototype.hasTotalReceivedStakes = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional CircularQueue recent_stakes = 4;
 * @return {?proto.forge_abi.CircularQueue}
 */
proto.forge_abi.StakeContext.prototype.getRecentStakes = function() {
  return /** @type{?proto.forge_abi.CircularQueue} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.CircularQueue,
    4
  ));
};

/**
 * @param {?proto.forge_abi.CircularQueue|undefined} value
 * @return {!proto.forge_abi.StakeContext} returns this
 */
proto.forge_abi.StakeContext.prototype.setRecentStakes = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.StakeContext} returns this
 */
proto.forge_abi.StakeContext.prototype.clearRecentStakes = function() {
  return this.setRecentStakes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.StakeContext.prototype.hasRecentStakes = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional CircularQueue recent_received_stakes = 15;
 * @return {?proto.forge_abi.CircularQueue}
 */
proto.forge_abi.StakeContext.prototype.getRecentReceivedStakes = function() {
  return /** @type{?proto.forge_abi.CircularQueue} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.CircularQueue,
    15
  ));
};

/**
 * @param {?proto.forge_abi.CircularQueue|undefined} value
 * @return {!proto.forge_abi.StakeContext} returns this
 */
proto.forge_abi.StakeContext.prototype.setRecentReceivedStakes = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.StakeContext} returns this
 */
proto.forge_abi.StakeContext.prototype.clearRecentReceivedStakes = function() {
  return this.setRecentReceivedStakes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.StakeContext.prototype.hasRecentReceivedStakes = function() {
  return jspb.Message.getField(this, 15) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.StakeSummary.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.StakeSummary.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.StakeSummary} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.StakeSummary.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        totalStakes: (f = msg.getTotalStakes()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
        totalUnstakes: (f = msg.getTotalUnstakes()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
        context: (f = msg.getContext()) && proto.forge_abi.StateContext.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.StakeSummary}
 */
proto.forge_abi.StakeSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.StakeSummary();
  return proto.forge_abi.StakeSummary.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.StakeSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.StakeSummary}
 */
proto.forge_abi.StakeSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setTotalStakes(value);
        break;
      case 2:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setTotalUnstakes(value);
        break;
      case 3:
        var value = new proto.forge_abi.StateContext();
        reader.readMessage(value, proto.forge_abi.StateContext.deserializeBinaryFromReader);
        msg.setContext(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.StakeSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.StakeSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.StakeSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.StakeSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalStakes();
  if (f != null) {
    writer.writeMessage(1, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
  f = message.getTotalUnstakes();
  if (f != null) {
    writer.writeMessage(2, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(3, f, proto.forge_abi.StateContext.serializeBinaryToWriter);
  }
};

/**
 * optional BigUint total_stakes = 1;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.StakeSummary.prototype.getTotalStakes = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(this, proto.forge_abi.BigUint, 1));
};

/**
 * @param {?proto.forge_abi.BigUint|undefined} value
 * @return {!proto.forge_abi.StakeSummary} returns this
 */
proto.forge_abi.StakeSummary.prototype.setTotalStakes = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.StakeSummary} returns this
 */
proto.forge_abi.StakeSummary.prototype.clearTotalStakes = function() {
  return this.setTotalStakes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.StakeSummary.prototype.hasTotalStakes = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional BigUint total_unstakes = 2;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.StakeSummary.prototype.getTotalUnstakes = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(this, proto.forge_abi.BigUint, 2));
};

/**
 * @param {?proto.forge_abi.BigUint|undefined} value
 * @return {!proto.forge_abi.StakeSummary} returns this
 */
proto.forge_abi.StakeSummary.prototype.setTotalUnstakes = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.StakeSummary} returns this
 */
proto.forge_abi.StakeSummary.prototype.clearTotalUnstakes = function() {
  return this.setTotalUnstakes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.StakeSummary.prototype.hasTotalUnstakes = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional StateContext context = 3;
 * @return {?proto.forge_abi.StateContext}
 */
proto.forge_abi.StakeSummary.prototype.getContext = function() {
  return /** @type{?proto.forge_abi.StateContext} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.StateContext,
    3
  ));
};

/**
 * @param {?proto.forge_abi.StateContext|undefined} value
 * @return {!proto.forge_abi.StakeSummary} returns this
 */
proto.forge_abi.StakeSummary.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.StakeSummary} returns this
 */
proto.forge_abi.StakeSummary.prototype.clearContext = function() {
  return this.setContext(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.StakeSummary.prototype.hasContext = function() {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.StakeConfig.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.StakeConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.StakeConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.StakeConfig.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        timeoutGeneral: jspb.Message.getFieldWithDefault(msg, 1, 0),
        timeoutStakeForNode: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.StakeConfig}
 */
proto.forge_abi.StakeConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.StakeConfig();
  return proto.forge_abi.StakeConfig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.StakeConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.StakeConfig}
 */
proto.forge_abi.StakeConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTimeoutGeneral(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTimeoutStakeForNode(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.StakeConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.StakeConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.StakeConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.StakeConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeoutGeneral();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getTimeoutStakeForNode();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
};

/**
 * optional uint32 timeout_general = 1;
 * @return {number}
 */
proto.forge_abi.StakeConfig.prototype.getTimeoutGeneral = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.StakeConfig} returns this
 */
proto.forge_abi.StakeConfig.prototype.setTimeoutGeneral = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint32 timeout_stake_for_node = 2;
 * @return {number}
 */
proto.forge_abi.StakeConfig.prototype.getTimeoutStakeForNode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.StakeConfig} returns this
 */
proto.forge_abi.StakeConfig.prototype.setTimeoutStakeForNode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.UnconfirmedTxs.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.UnconfirmedTxs.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.UnconfirmedTxs.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.UnconfirmedTxs} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.UnconfirmedTxs.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        nTxs: jspb.Message.getFieldWithDefault(msg, 1, 0),
        txsList: jspb.Message.toObjectList(msg.getTxsList(), proto.forge_abi.Transaction.toObject, includeInstance),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.UnconfirmedTxs}
 */
proto.forge_abi.UnconfirmedTxs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.UnconfirmedTxs();
  return proto.forge_abi.UnconfirmedTxs.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.UnconfirmedTxs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.UnconfirmedTxs}
 */
proto.forge_abi.UnconfirmedTxs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setNTxs(value);
        break;
      case 2:
        var value = new proto.forge_abi.Transaction();
        reader.readMessage(value, proto.forge_abi.Transaction.deserializeBinaryFromReader);
        msg.addTxs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.UnconfirmedTxs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.UnconfirmedTxs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.UnconfirmedTxs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.UnconfirmedTxs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNTxs();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.forge_abi.Transaction.serializeBinaryToWriter);
  }
};

/**
 * optional uint32 n_txs = 1;
 * @return {number}
 */
proto.forge_abi.UnconfirmedTxs.prototype.getNTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.UnconfirmedTxs} returns this
 */
proto.forge_abi.UnconfirmedTxs.prototype.setNTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * repeated Transaction txs = 2;
 * @return {!Array<!proto.forge_abi.Transaction>}
 */
proto.forge_abi.UnconfirmedTxs.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.forge_abi.Transaction>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.Transaction,
    2
  ));
};

/**
 * @param {!Array<!proto.forge_abi.Transaction>} value
 * @return {!proto.forge_abi.UnconfirmedTxs} returns this
 */
proto.forge_abi.UnconfirmedTxs.prototype.setTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.forge_abi.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.Transaction}
 */
proto.forge_abi.UnconfirmedTxs.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.forge_abi.Transaction, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.UnconfirmedTxs} returns this
 */
proto.forge_abi.UnconfirmedTxs.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.NetInfo.repeatedFields_ = [2, 4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.NetInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.NetInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.NetInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.NetInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        listening: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        listenersList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
        nPeers: jspb.Message.getFieldWithDefault(msg, 3, 0),
        peersList: jspb.Message.toObjectList(msg.getPeersList(), proto.forge_abi.PeerInfo.toObject, includeInstance),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.NetInfo}
 */
proto.forge_abi.NetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.NetInfo();
  return proto.forge_abi.NetInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.NetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.NetInfo}
 */
proto.forge_abi.NetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setListening(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.addListeners(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setNPeers(value);
        break;
      case 4:
        var value = new proto.forge_abi.PeerInfo();
        reader.readMessage(value, proto.forge_abi.PeerInfo.deserializeBinaryFromReader);
        msg.addPeers(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.NetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.NetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.NetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.NetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListening();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getListenersList();
  if (f.length > 0) {
    writer.writeRepeatedString(2, f);
  }
  f = message.getNPeers();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(4, f, proto.forge_abi.PeerInfo.serializeBinaryToWriter);
  }
};

/**
 * optional bool listening = 1;
 * @return {boolean}
 */
proto.forge_abi.NetInfo.prototype.getListening = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};

/**
 * @param {boolean} value
 * @return {!proto.forge_abi.NetInfo} returns this
 */
proto.forge_abi.NetInfo.prototype.setListening = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * repeated string listeners = 2;
 * @return {!Array<string>}
 */
proto.forge_abi.NetInfo.prototype.getListenersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.forge_abi.NetInfo} returns this
 */
proto.forge_abi.NetInfo.prototype.setListenersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.NetInfo} returns this
 */
proto.forge_abi.NetInfo.prototype.addListeners = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.NetInfo} returns this
 */
proto.forge_abi.NetInfo.prototype.clearListenersList = function() {
  return this.setListenersList([]);
};

/**
 * optional uint32 n_peers = 3;
 * @return {number}
 */
proto.forge_abi.NetInfo.prototype.getNPeers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.NetInfo} returns this
 */
proto.forge_abi.NetInfo.prototype.setNPeers = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * repeated PeerInfo peers = 4;
 * @return {!Array<!proto.forge_abi.PeerInfo>}
 */
proto.forge_abi.NetInfo.prototype.getPeersList = function() {
  return /** @type{!Array<!proto.forge_abi.PeerInfo>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.PeerInfo,
    4
  ));
};

/**
 * @param {!Array<!proto.forge_abi.PeerInfo>} value
 * @return {!proto.forge_abi.NetInfo} returns this
 */
proto.forge_abi.NetInfo.prototype.setPeersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!proto.forge_abi.PeerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.PeerInfo}
 */
proto.forge_abi.NetInfo.prototype.addPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.forge_abi.PeerInfo, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.NetInfo} returns this
 */
proto.forge_abi.NetInfo.prototype.clearPeersList = function() {
  return this.setPeersList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.GeoInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.GeoInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.GeoInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.GeoInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        city: jspb.Message.getFieldWithDefault(msg, 1, ''),
        country: jspb.Message.getFieldWithDefault(msg, 2, ''),
        latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
        longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.GeoInfo}
 */
proto.forge_abi.GeoInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.GeoInfo();
  return proto.forge_abi.GeoInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.GeoInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.GeoInfo}
 */
proto.forge_abi.GeoInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setCity(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setCountry(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setLatitude(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setLongitude(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.GeoInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.GeoInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.GeoInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.GeoInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(3, f);
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(4, f);
  }
};

/**
 * optional string city = 1;
 * @return {string}
 */
proto.forge_abi.GeoInfo.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.GeoInfo} returns this
 */
proto.forge_abi.GeoInfo.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string country = 2;
 * @return {string}
 */
proto.forge_abi.GeoInfo.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.GeoInfo} returns this
 */
proto.forge_abi.GeoInfo.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional float latitude = 3;
 * @return {number}
 */
proto.forge_abi.GeoInfo.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.GeoInfo} returns this
 */
proto.forge_abi.GeoInfo.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};

/**
 * optional float longitude = 4;
 * @return {number}
 */
proto.forge_abi.GeoInfo.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.GeoInfo} returns this
 */
proto.forge_abi.GeoInfo.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.PeerInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.PeerInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.PeerInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.PeerInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        network: jspb.Message.getFieldWithDefault(msg, 2, ''),
        consensusVersion: jspb.Message.getFieldWithDefault(msg, 3, ''),
        moniker: jspb.Message.getFieldWithDefault(msg, 4, ''),
        ip: jspb.Message.getFieldWithDefault(msg, 5, ''),
        geoInfo: (f = msg.getGeoInfo()) && proto.forge_abi.GeoInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.PeerInfo}
 */
proto.forge_abi.PeerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.PeerInfo();
  return proto.forge_abi.PeerInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.PeerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.PeerInfo}
 */
proto.forge_abi.PeerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setNetwork(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setConsensusVersion(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setMoniker(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setIp(value);
        break;
      case 6:
        var value = new proto.forge_abi.GeoInfo();
        reader.readMessage(value, proto.forge_abi.GeoInfo.deserializeBinaryFromReader);
        msg.setGeoInfo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.PeerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.PeerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.PeerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.PeerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getConsensusVersion();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getGeoInfo();
  if (f != null) {
    writer.writeMessage(6, f, proto.forge_abi.GeoInfo.serializeBinaryToWriter);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.forge_abi.PeerInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.PeerInfo} returns this
 */
proto.forge_abi.PeerInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string network = 2;
 * @return {string}
 */
proto.forge_abi.PeerInfo.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.PeerInfo} returns this
 */
proto.forge_abi.PeerInfo.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string consensus_version = 3;
 * @return {string}
 */
proto.forge_abi.PeerInfo.prototype.getConsensusVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.PeerInfo} returns this
 */
proto.forge_abi.PeerInfo.prototype.setConsensusVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string moniker = 4;
 * @return {string}
 */
proto.forge_abi.PeerInfo.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.PeerInfo} returns this
 */
proto.forge_abi.PeerInfo.prototype.setMoniker = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string ip = 5;
 * @return {string}
 */
proto.forge_abi.PeerInfo.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.PeerInfo} returns this
 */
proto.forge_abi.PeerInfo.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional GeoInfo geo_info = 6;
 * @return {?proto.forge_abi.GeoInfo}
 */
proto.forge_abi.PeerInfo.prototype.getGeoInfo = function() {
  return /** @type{?proto.forge_abi.GeoInfo} */ (jspb.Message.getWrapperField(this, proto.forge_abi.GeoInfo, 6));
};

/**
 * @param {?proto.forge_abi.GeoInfo|undefined} value
 * @return {!proto.forge_abi.PeerInfo} returns this
 */
proto.forge_abi.PeerInfo.prototype.setGeoInfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.PeerInfo} returns this
 */
proto.forge_abi.PeerInfo.prototype.clearGeoInfo = function() {
  return this.setGeoInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.PeerInfo.prototype.hasGeoInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.ValidatorsInfo.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ValidatorsInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ValidatorsInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ValidatorsInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ValidatorsInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
        validatorsList: jspb.Message.toObjectList(
          msg.getValidatorsList(),
          proto.forge_abi.ValidatorInfo.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ValidatorsInfo}
 */
proto.forge_abi.ValidatorsInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ValidatorsInfo();
  return proto.forge_abi.ValidatorsInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ValidatorsInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ValidatorsInfo}
 */
proto.forge_abi.ValidatorsInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setBlockHeight(value);
        break;
      case 2:
        var value = new proto.forge_abi.ValidatorInfo();
        reader.readMessage(value, proto.forge_abi.ValidatorInfo.deserializeBinaryFromReader);
        msg.addValidators(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ValidatorsInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ValidatorsInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ValidatorsInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ValidatorsInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.forge_abi.ValidatorInfo.serializeBinaryToWriter);
  }
};

/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.forge_abi.ValidatorsInfo.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ValidatorsInfo} returns this
 */
proto.forge_abi.ValidatorsInfo.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * repeated ValidatorInfo validators = 2;
 * @return {!Array<!proto.forge_abi.ValidatorInfo>}
 */
proto.forge_abi.ValidatorsInfo.prototype.getValidatorsList = function() {
  return /** @type{!Array<!proto.forge_abi.ValidatorInfo>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.ValidatorInfo,
    2
  ));
};

/**
 * @param {!Array<!proto.forge_abi.ValidatorInfo>} value
 * @return {!proto.forge_abi.ValidatorsInfo} returns this
 */
proto.forge_abi.ValidatorsInfo.prototype.setValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.forge_abi.ValidatorInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ValidatorInfo}
 */
proto.forge_abi.ValidatorsInfo.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.forge_abi.ValidatorInfo, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ValidatorsInfo} returns this
 */
proto.forge_abi.ValidatorsInfo.prototype.clearValidatorsList = function() {
  return this.setValidatorsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ValidatorInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ValidatorInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ValidatorInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ValidatorInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        pubKey: (f = msg.getPubKey()) && vendor_pb.PubKey.toObject(includeInstance, f),
        votingPower: jspb.Message.getFieldWithDefault(msg, 3, 0),
        proposerPriority: jspb.Message.getFieldWithDefault(msg, 4, ''),
        name: jspb.Message.getFieldWithDefault(msg, 5, ''),
        geoInfo: (f = msg.getGeoInfo()) && proto.forge_abi.GeoInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ValidatorInfo}
 */
proto.forge_abi.ValidatorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ValidatorInfo();
  return proto.forge_abi.ValidatorInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ValidatorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ValidatorInfo}
 */
proto.forge_abi.ValidatorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = new vendor_pb.PubKey();
        reader.readMessage(value, vendor_pb.PubKey.deserializeBinaryFromReader);
        msg.setPubKey(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setVotingPower(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setProposerPriority(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 6:
        var value = new proto.forge_abi.GeoInfo();
        reader.readMessage(value, proto.forge_abi.GeoInfo.deserializeBinaryFromReader);
        msg.setGeoInfo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ValidatorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ValidatorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ValidatorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ValidatorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPubKey();
  if (f != null) {
    writer.writeMessage(2, f, vendor_pb.PubKey.serializeBinaryToWriter);
  }
  f = message.getVotingPower();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
  f = message.getProposerPriority();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getGeoInfo();
  if (f != null) {
    writer.writeMessage(6, f, proto.forge_abi.GeoInfo.serializeBinaryToWriter);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.forge_abi.ValidatorInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.ValidatorInfo} returns this
 */
proto.forge_abi.ValidatorInfo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional abci_vendor.PubKey pub_key = 2;
 * @return {?proto.abci_vendor.PubKey}
 */
proto.forge_abi.ValidatorInfo.prototype.getPubKey = function() {
  return /** @type{?proto.abci_vendor.PubKey} */ (jspb.Message.getWrapperField(this, vendor_pb.PubKey, 2));
};

/**
 * @param {?proto.abci_vendor.PubKey|undefined} value
 * @return {!proto.forge_abi.ValidatorInfo} returns this
 */
proto.forge_abi.ValidatorInfo.prototype.setPubKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.ValidatorInfo} returns this
 */
proto.forge_abi.ValidatorInfo.prototype.clearPubKey = function() {
  return this.setPubKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.ValidatorInfo.prototype.hasPubKey = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional uint64 voting_power = 3;
 * @return {number}
 */
proto.forge_abi.ValidatorInfo.prototype.getVotingPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ValidatorInfo} returns this
 */
proto.forge_abi.ValidatorInfo.prototype.setVotingPower = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string proposer_priority = 4;
 * @return {string}
 */
proto.forge_abi.ValidatorInfo.prototype.getProposerPriority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.ValidatorInfo} returns this
 */
proto.forge_abi.ValidatorInfo.prototype.setProposerPriority = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string name = 5;
 * @return {string}
 */
proto.forge_abi.ValidatorInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.ValidatorInfo} returns this
 */
proto.forge_abi.ValidatorInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional GeoInfo geo_info = 6;
 * @return {?proto.forge_abi.GeoInfo}
 */
proto.forge_abi.ValidatorInfo.prototype.getGeoInfo = function() {
  return /** @type{?proto.forge_abi.GeoInfo} */ (jspb.Message.getWrapperField(this, proto.forge_abi.GeoInfo, 6));
};

/**
 * @param {?proto.forge_abi.GeoInfo|undefined} value
 * @return {!proto.forge_abi.ValidatorInfo} returns this
 */
proto.forge_abi.ValidatorInfo.prototype.setGeoInfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.ValidatorInfo} returns this
 */
proto.forge_abi.ValidatorInfo.prototype.clearGeoInfo = function() {
  return this.setGeoInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.ValidatorInfo.prototype.hasGeoInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.GenesisInfo.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.GenesisInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.GenesisInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.GenesisInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.GenesisInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        genesisTime: jspb.Message.getFieldWithDefault(msg, 1, ''),
        chainId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        consensusParams: (f = msg.getConsensusParams()) && vendor_pb.ConsensusParams.toObject(includeInstance, f),
        validatorsList: jspb.Message.toObjectList(
          msg.getValidatorsList(),
          proto.forge_abi.ValidatorInfo.toObject,
          includeInstance
        ),
        appHash: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.GenesisInfo}
 */
proto.forge_abi.GenesisInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.GenesisInfo();
  return proto.forge_abi.GenesisInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.GenesisInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.GenesisInfo}
 */
proto.forge_abi.GenesisInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setGenesisTime(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setChainId(value);
        break;
      case 3:
        var value = new vendor_pb.ConsensusParams();
        reader.readMessage(value, vendor_pb.ConsensusParams.deserializeBinaryFromReader);
        msg.setConsensusParams(value);
        break;
      case 4:
        var value = new proto.forge_abi.ValidatorInfo();
        reader.readMessage(value, proto.forge_abi.ValidatorInfo.deserializeBinaryFromReader);
        msg.addValidators(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setAppHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.GenesisInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.GenesisInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.GenesisInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.GenesisInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGenesisTime();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getConsensusParams();
  if (f != null) {
    writer.writeMessage(3, f, vendor_pb.ConsensusParams.serializeBinaryToWriter);
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(4, f, proto.forge_abi.ValidatorInfo.serializeBinaryToWriter);
  }
  f = message.getAppHash();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string genesis_time = 1;
 * @return {string}
 */
proto.forge_abi.GenesisInfo.prototype.getGenesisTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.GenesisInfo} returns this
 */
proto.forge_abi.GenesisInfo.prototype.setGenesisTime = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.forge_abi.GenesisInfo.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.GenesisInfo} returns this
 */
proto.forge_abi.GenesisInfo.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional abci_vendor.ConsensusParams consensus_params = 3;
 * @return {?proto.abci_vendor.ConsensusParams}
 */
proto.forge_abi.GenesisInfo.prototype.getConsensusParams = function() {
  return /** @type{?proto.abci_vendor.ConsensusParams} */ (jspb.Message.getWrapperField(
    this,
    vendor_pb.ConsensusParams,
    3
  ));
};

/**
 * @param {?proto.abci_vendor.ConsensusParams|undefined} value
 * @return {!proto.forge_abi.GenesisInfo} returns this
 */
proto.forge_abi.GenesisInfo.prototype.setConsensusParams = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.GenesisInfo} returns this
 */
proto.forge_abi.GenesisInfo.prototype.clearConsensusParams = function() {
  return this.setConsensusParams(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.GenesisInfo.prototype.hasConsensusParams = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * repeated ValidatorInfo validators = 4;
 * @return {!Array<!proto.forge_abi.ValidatorInfo>}
 */
proto.forge_abi.GenesisInfo.prototype.getValidatorsList = function() {
  return /** @type{!Array<!proto.forge_abi.ValidatorInfo>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.ValidatorInfo,
    4
  ));
};

/**
 * @param {!Array<!proto.forge_abi.ValidatorInfo>} value
 * @return {!proto.forge_abi.GenesisInfo} returns this
 */
proto.forge_abi.GenesisInfo.prototype.setValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!proto.forge_abi.ValidatorInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ValidatorInfo}
 */
proto.forge_abi.GenesisInfo.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.forge_abi.ValidatorInfo, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.GenesisInfo} returns this
 */
proto.forge_abi.GenesisInfo.prototype.clearValidatorsList = function() {
  return this.setValidatorsList([]);
};

/**
 * optional string app_hash = 5;
 * @return {string}
 */
proto.forge_abi.GenesisInfo.prototype.getAppHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.GenesisInfo} returns this
 */
proto.forge_abi.GenesisInfo.prototype.setAppHash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.ForgeStats.repeatedFields_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ForgeStats.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ForgeStats.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ForgeStats} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ForgeStats.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        numBlocksList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
        numTxsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
        numStakesList: jspb.Message.toObjectList(
          msg.getNumStakesList(),
          proto.forge_abi.BigUint.toObject,
          includeInstance
        ),
        numValidatorsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
        numAccountMigrateTxsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
        numCreateAssetTxsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
        numConsensusUpgradeTxsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
        numDeclareTxsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
        numDeclareFileTxsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
        numExchangeTxsList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
        numStakeTxsList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
        numSysUpgradeTxsList: (f = jspb.Message.getRepeatedField(msg, 12)) == null ? undefined : f,
        numTransferTxsList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
        numUpdateAssetTxsList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
        numConsumeAssetTxsList: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f,
        numPokeTxsList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
        tpsList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f,
        maxTps: jspb.Message.getFieldWithDefault(msg, 18, 0),
        avgTps: jspb.Message.getFieldWithDefault(msg, 19, 0),
        avgBlockTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 0.0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ForgeStats}
 */
proto.forge_abi.ForgeStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ForgeStats();
  return proto.forge_abi.ForgeStats.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ForgeStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ForgeStats}
 */
proto.forge_abi.ForgeStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
        msg.setNumBlocksList(value);
        break;
      case 2:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
        msg.setNumTxsList(value);
        break;
      case 3:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.addNumStakes(value);
        break;
      case 4:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
        msg.setNumValidatorsList(value);
        break;
      case 5:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
        msg.setNumAccountMigrateTxsList(value);
        break;
      case 6:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
        msg.setNumCreateAssetTxsList(value);
        break;
      case 7:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
        msg.setNumConsensusUpgradeTxsList(value);
        break;
      case 8:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
        msg.setNumDeclareTxsList(value);
        break;
      case 9:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
        msg.setNumDeclareFileTxsList(value);
        break;
      case 10:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
        msg.setNumExchangeTxsList(value);
        break;
      case 11:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
        msg.setNumStakeTxsList(value);
        break;
      case 12:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
        msg.setNumSysUpgradeTxsList(value);
        break;
      case 13:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
        msg.setNumTransferTxsList(value);
        break;
      case 14:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
        msg.setNumUpdateAssetTxsList(value);
        break;
      case 15:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
        msg.setNumConsumeAssetTxsList(value);
        break;
      case 16:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
        msg.setNumPokeTxsList(value);
        break;
      case 17:
        var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
        msg.setTpsList(value);
        break;
      case 18:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setMaxTps(value);
        break;
      case 19:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setAvgTps(value);
        break;
      case 20:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setAvgBlockTime(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ForgeStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ForgeStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ForgeStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ForgeStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumBlocksList();
  if (f.length > 0) {
    writer.writePackedUint64(1, f);
  }
  f = message.getNumTxsList();
  if (f.length > 0) {
    writer.writePackedUint64(2, f);
  }
  f = message.getNumStakesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
  f = message.getNumValidatorsList();
  if (f.length > 0) {
    writer.writePackedUint32(4, f);
  }
  f = message.getNumAccountMigrateTxsList();
  if (f.length > 0) {
    writer.writePackedUint64(5, f);
  }
  f = message.getNumCreateAssetTxsList();
  if (f.length > 0) {
    writer.writePackedUint64(6, f);
  }
  f = message.getNumConsensusUpgradeTxsList();
  if (f.length > 0) {
    writer.writePackedUint32(7, f);
  }
  f = message.getNumDeclareTxsList();
  if (f.length > 0) {
    writer.writePackedUint64(8, f);
  }
  f = message.getNumDeclareFileTxsList();
  if (f.length > 0) {
    writer.writePackedUint64(9, f);
  }
  f = message.getNumExchangeTxsList();
  if (f.length > 0) {
    writer.writePackedUint64(10, f);
  }
  f = message.getNumStakeTxsList();
  if (f.length > 0) {
    writer.writePackedUint64(11, f);
  }
  f = message.getNumSysUpgradeTxsList();
  if (f.length > 0) {
    writer.writePackedUint32(12, f);
  }
  f = message.getNumTransferTxsList();
  if (f.length > 0) {
    writer.writePackedUint64(13, f);
  }
  f = message.getNumUpdateAssetTxsList();
  if (f.length > 0) {
    writer.writePackedUint64(14, f);
  }
  f = message.getNumConsumeAssetTxsList();
  if (f.length > 0) {
    writer.writePackedUint64(15, f);
  }
  f = message.getNumPokeTxsList();
  if (f.length > 0) {
    writer.writePackedUint64(16, f);
  }
  f = message.getTpsList();
  if (f.length > 0) {
    writer.writePackedUint32(17, f);
  }
  f = message.getMaxTps();
  if (f !== 0) {
    writer.writeUint32(18, f);
  }
  f = message.getAvgTps();
  if (f !== 0) {
    writer.writeUint32(19, f);
  }
  f = message.getAvgBlockTime();
  if (f !== 0.0) {
    writer.writeFloat(20, f);
  }
};

/**
 * repeated uint64 num_blocks = 1;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumBlocksList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumBlocksList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumBlocks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumBlocksList = function() {
  return this.setNumBlocksList([]);
};

/**
 * repeated uint64 num_txs = 2;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumTxsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumTxsList = function() {
  return this.setNumTxsList([]);
};

/**
 * repeated BigUint num_stakes = 3;
 * @return {!Array<!proto.forge_abi.BigUint>}
 */
proto.forge_abi.ForgeStats.prototype.getNumStakesList = function() {
  return /** @type{!Array<!proto.forge_abi.BigUint>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.BigUint,
    3
  ));
};

/**
 * @param {!Array<!proto.forge_abi.BigUint>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumStakesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.forge_abi.BigUint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.BigUint}
 */
proto.forge_abi.ForgeStats.prototype.addNumStakes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.forge_abi.BigUint, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumStakesList = function() {
  return this.setNumStakesList([]);
};

/**
 * repeated uint32 num_validators = 4;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumValidatorsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumValidatorsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumValidators = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumValidatorsList = function() {
  return this.setNumValidatorsList([]);
};

/**
 * repeated uint64 num_account_migrate_txs = 5;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumAccountMigrateTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumAccountMigrateTxsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumAccountMigrateTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumAccountMigrateTxsList = function() {
  return this.setNumAccountMigrateTxsList([]);
};

/**
 * repeated uint64 num_create_asset_txs = 6;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumCreateAssetTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumCreateAssetTxsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumCreateAssetTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumCreateAssetTxsList = function() {
  return this.setNumCreateAssetTxsList([]);
};

/**
 * repeated uint32 num_consensus_upgrade_txs = 7;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumConsensusUpgradeTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumConsensusUpgradeTxsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumConsensusUpgradeTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumConsensusUpgradeTxsList = function() {
  return this.setNumConsensusUpgradeTxsList([]);
};

/**
 * repeated uint64 num_declare_txs = 8;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumDeclareTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumDeclareTxsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumDeclareTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumDeclareTxsList = function() {
  return this.setNumDeclareTxsList([]);
};

/**
 * repeated uint64 num_declare_file_txs = 9;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumDeclareFileTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumDeclareFileTxsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumDeclareFileTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumDeclareFileTxsList = function() {
  return this.setNumDeclareFileTxsList([]);
};

/**
 * repeated uint64 num_exchange_txs = 10;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumExchangeTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumExchangeTxsList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumExchangeTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumExchangeTxsList = function() {
  return this.setNumExchangeTxsList([]);
};

/**
 * repeated uint64 num_stake_txs = 11;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumStakeTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 11));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumStakeTxsList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumStakeTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumStakeTxsList = function() {
  return this.setNumStakeTxsList([]);
};

/**
 * repeated uint32 num_sys_upgrade_txs = 12;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumSysUpgradeTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 12));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumSysUpgradeTxsList = function(value) {
  return jspb.Message.setField(this, 12, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumSysUpgradeTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumSysUpgradeTxsList = function() {
  return this.setNumSysUpgradeTxsList([]);
};

/**
 * repeated uint64 num_transfer_txs = 13;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumTransferTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 13));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumTransferTxsList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumTransferTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumTransferTxsList = function() {
  return this.setNumTransferTxsList([]);
};

/**
 * repeated uint64 num_update_asset_txs = 14;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumUpdateAssetTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 14));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumUpdateAssetTxsList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumUpdateAssetTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumUpdateAssetTxsList = function() {
  return this.setNumUpdateAssetTxsList([]);
};

/**
 * repeated uint64 num_consume_asset_txs = 15;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumConsumeAssetTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 15));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumConsumeAssetTxsList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumConsumeAssetTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumConsumeAssetTxsList = function() {
  return this.setNumConsumeAssetTxsList([]);
};

/**
 * repeated uint64 num_poke_txs = 16;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getNumPokeTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 16));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setNumPokeTxsList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addNumPokeTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearNumPokeTxsList = function() {
  return this.setNumPokeTxsList([]);
};

/**
 * repeated uint32 tps = 17;
 * @return {!Array<number>}
 */
proto.forge_abi.ForgeStats.prototype.getTpsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 17));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setTpsList = function(value) {
  return jspb.Message.setField(this, 17, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.addTps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 17, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.clearTpsList = function() {
  return this.setTpsList([]);
};

/**
 * optional uint32 max_tps = 18;
 * @return {number}
 */
proto.forge_abi.ForgeStats.prototype.getMaxTps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setMaxTps = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};

/**
 * optional uint32 avg_tps = 19;
 * @return {number}
 */
proto.forge_abi.ForgeStats.prototype.getAvgTps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setAvgTps = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};

/**
 * optional float avg_block_time = 20;
 * @return {number}
 */
proto.forge_abi.ForgeStats.prototype.getAvgBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ForgeStats} returns this
 */
proto.forge_abi.ForgeStats.prototype.setAvgBlockTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 20, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.TxStatistics.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.TxStatistics.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.TxStatistics} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.TxStatistics.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        numAccountMigrateTxs: jspb.Message.getFieldWithDefault(msg, 1, 0),
        numCreateAssetTxs: jspb.Message.getFieldWithDefault(msg, 2, 0),
        numConsensusUpgradeTxs: jspb.Message.getFieldWithDefault(msg, 3, 0),
        numDeclareTxs: jspb.Message.getFieldWithDefault(msg, 4, 0),
        numDeclareFileTxs: jspb.Message.getFieldWithDefault(msg, 5, 0),
        numExchangeTxs: jspb.Message.getFieldWithDefault(msg, 6, 0),
        numStakeTxs: jspb.Message.getFieldWithDefault(msg, 7, 0),
        numSysUpgradeTxs: jspb.Message.getFieldWithDefault(msg, 8, 0),
        numTransferTxs: jspb.Message.getFieldWithDefault(msg, 9, 0),
        numUpdateAssetTxs: jspb.Message.getFieldWithDefault(msg, 10, 0),
        numConsumeAssetTxs: jspb.Message.getFieldWithDefault(msg, 11, 0),
        numPokeTxs: jspb.Message.getFieldWithDefault(msg, 12, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.TxStatistics}
 */
proto.forge_abi.TxStatistics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.TxStatistics();
  return proto.forge_abi.TxStatistics.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.TxStatistics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.TxStatistics}
 */
proto.forge_abi.TxStatistics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNumAccountMigrateTxs(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNumCreateAssetTxs(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setNumConsensusUpgradeTxs(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNumDeclareTxs(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNumDeclareFileTxs(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNumExchangeTxs(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNumStakeTxs(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setNumSysUpgradeTxs(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNumTransferTxs(value);
        break;
      case 10:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNumUpdateAssetTxs(value);
        break;
      case 11:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNumConsumeAssetTxs(value);
        break;
      case 12:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNumPokeTxs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.TxStatistics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.TxStatistics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.TxStatistics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.TxStatistics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumAccountMigrateTxs();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getNumCreateAssetTxs();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getNumConsensusUpgradeTxs();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getNumDeclareTxs();
  if (f !== 0) {
    writer.writeUint64(4, f);
  }
  f = message.getNumDeclareFileTxs();
  if (f !== 0) {
    writer.writeUint64(5, f);
  }
  f = message.getNumExchangeTxs();
  if (f !== 0) {
    writer.writeUint64(6, f);
  }
  f = message.getNumStakeTxs();
  if (f !== 0) {
    writer.writeUint64(7, f);
  }
  f = message.getNumSysUpgradeTxs();
  if (f !== 0) {
    writer.writeUint32(8, f);
  }
  f = message.getNumTransferTxs();
  if (f !== 0) {
    writer.writeUint64(9, f);
  }
  f = message.getNumUpdateAssetTxs();
  if (f !== 0) {
    writer.writeUint64(10, f);
  }
  f = message.getNumConsumeAssetTxs();
  if (f !== 0) {
    writer.writeUint64(11, f);
  }
  f = message.getNumPokeTxs();
  if (f !== 0) {
    writer.writeUint64(12, f);
  }
};

/**
 * optional uint64 num_account_migrate_txs = 1;
 * @return {number}
 */
proto.forge_abi.TxStatistics.prototype.getNumAccountMigrateTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TxStatistics} returns this
 */
proto.forge_abi.TxStatistics.prototype.setNumAccountMigrateTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 num_create_asset_txs = 2;
 * @return {number}
 */
proto.forge_abi.TxStatistics.prototype.getNumCreateAssetTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TxStatistics} returns this
 */
proto.forge_abi.TxStatistics.prototype.setNumCreateAssetTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint32 num_consensus_upgrade_txs = 3;
 * @return {number}
 */
proto.forge_abi.TxStatistics.prototype.getNumConsensusUpgradeTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TxStatistics} returns this
 */
proto.forge_abi.TxStatistics.prototype.setNumConsensusUpgradeTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint64 num_declare_txs = 4;
 * @return {number}
 */
proto.forge_abi.TxStatistics.prototype.getNumDeclareTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TxStatistics} returns this
 */
proto.forge_abi.TxStatistics.prototype.setNumDeclareTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional uint64 num_declare_file_txs = 5;
 * @return {number}
 */
proto.forge_abi.TxStatistics.prototype.getNumDeclareFileTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TxStatistics} returns this
 */
proto.forge_abi.TxStatistics.prototype.setNumDeclareFileTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional uint64 num_exchange_txs = 6;
 * @return {number}
 */
proto.forge_abi.TxStatistics.prototype.getNumExchangeTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TxStatistics} returns this
 */
proto.forge_abi.TxStatistics.prototype.setNumExchangeTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional uint64 num_stake_txs = 7;
 * @return {number}
 */
proto.forge_abi.TxStatistics.prototype.getNumStakeTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TxStatistics} returns this
 */
proto.forge_abi.TxStatistics.prototype.setNumStakeTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional uint32 num_sys_upgrade_txs = 8;
 * @return {number}
 */
proto.forge_abi.TxStatistics.prototype.getNumSysUpgradeTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TxStatistics} returns this
 */
proto.forge_abi.TxStatistics.prototype.setNumSysUpgradeTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional uint64 num_transfer_txs = 9;
 * @return {number}
 */
proto.forge_abi.TxStatistics.prototype.getNumTransferTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TxStatistics} returns this
 */
proto.forge_abi.TxStatistics.prototype.setNumTransferTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * optional uint64 num_update_asset_txs = 10;
 * @return {number}
 */
proto.forge_abi.TxStatistics.prototype.getNumUpdateAssetTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TxStatistics} returns this
 */
proto.forge_abi.TxStatistics.prototype.setNumUpdateAssetTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};

/**
 * optional uint64 num_consume_asset_txs = 11;
 * @return {number}
 */
proto.forge_abi.TxStatistics.prototype.getNumConsumeAssetTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TxStatistics} returns this
 */
proto.forge_abi.TxStatistics.prototype.setNumConsumeAssetTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};

/**
 * optional uint64 num_poke_txs = 12;
 * @return {number}
 */
proto.forge_abi.TxStatistics.prototype.getNumPokeTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TxStatistics} returns this
 */
proto.forge_abi.TxStatistics.prototype.setNumPokeTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ForgeToken.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ForgeToken.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ForgeToken} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ForgeToken.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ''),
        symbol: jspb.Message.getFieldWithDefault(msg, 2, ''),
        unit: jspb.Message.getFieldWithDefault(msg, 3, ''),
        description: jspb.Message.getFieldWithDefault(msg, 4, ''),
        icon: msg.getIcon(),
        decimal: jspb.Message.getFieldWithDefault(msg, 6, 0),
        initialSupply: jspb.Message.getFieldWithDefault(msg, 7, 0),
        totalSupply: jspb.Message.getFieldWithDefault(msg, 8, 0),
        inflationRate: jspb.Message.getFieldWithDefault(msg, 9, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ForgeToken}
 */
proto.forge_abi.ForgeToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ForgeToken();
  return proto.forge_abi.ForgeToken.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ForgeToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ForgeToken}
 */
proto.forge_abi.ForgeToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSymbol(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setUnit(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setDescription(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setIcon(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setDecimal(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setInitialSupply(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTotalSupply(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setInflationRate(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ForgeToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ForgeToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ForgeToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ForgeToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getIcon_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = message.getDecimal();
  if (f !== 0) {
    writer.writeUint32(6, f);
  }
  f = message.getInitialSupply();
  if (f !== 0) {
    writer.writeUint64(7, f);
  }
  f = message.getTotalSupply();
  if (f !== 0) {
    writer.writeUint64(8, f);
  }
  f = message.getInflationRate();
  if (f !== 0) {
    writer.writeUint32(9, f);
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.forge_abi.ForgeToken.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.ForgeToken} returns this
 */
proto.forge_abi.ForgeToken.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.forge_abi.ForgeToken.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.ForgeToken} returns this
 */
proto.forge_abi.ForgeToken.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string unit = 3;
 * @return {string}
 */
proto.forge_abi.ForgeToken.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.ForgeToken} returns this
 */
proto.forge_abi.ForgeToken.prototype.setUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string description = 4;
 * @return {string}
 */
proto.forge_abi.ForgeToken.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.ForgeToken} returns this
 */
proto.forge_abi.ForgeToken.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional bytes icon = 5;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.ForgeToken.prototype.getIcon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * optional bytes icon = 5;
 * This is a type-conversion wrapper around `getIcon()`
 * @return {string}
 */
proto.forge_abi.ForgeToken.prototype.getIcon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getIcon()));
};

/**
 * optional bytes icon = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIcon()`
 * @return {!Uint8Array}
 */
proto.forge_abi.ForgeToken.prototype.getIcon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getIcon()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.ForgeToken} returns this
 */
proto.forge_abi.ForgeToken.prototype.setIcon = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};

/**
 * optional uint32 decimal = 6;
 * @return {number}
 */
proto.forge_abi.ForgeToken.prototype.getDecimal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ForgeToken} returns this
 */
proto.forge_abi.ForgeToken.prototype.setDecimal = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional uint64 initial_supply = 7;
 * @return {number}
 */
proto.forge_abi.ForgeToken.prototype.getInitialSupply = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ForgeToken} returns this
 */
proto.forge_abi.ForgeToken.prototype.setInitialSupply = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional uint64 total_supply = 8;
 * @return {number}
 */
proto.forge_abi.ForgeToken.prototype.getTotalSupply = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ForgeToken} returns this
 */
proto.forge_abi.ForgeToken.prototype.setTotalSupply = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional uint32 inflation_rate = 9;
 * @return {number}
 */
proto.forge_abi.ForgeToken.prototype.getInflationRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.ForgeToken} returns this
 */
proto.forge_abi.ForgeToken.prototype.setInflationRate = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.PokeInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.PokeInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.PokeInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.PokeInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        dailyLimit: (f = msg.getDailyLimit()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
        leftover: (f = msg.getLeftover()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
        amount: (f = msg.getAmount()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.PokeInfo}
 */
proto.forge_abi.PokeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.PokeInfo();
  return proto.forge_abi.PokeInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.PokeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.PokeInfo}
 */
proto.forge_abi.PokeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setDailyLimit(value);
        break;
      case 2:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setLeftover(value);
        break;
      case 3:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setAmount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.PokeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.PokeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.PokeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.PokeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDailyLimit();
  if (f != null) {
    writer.writeMessage(1, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
  f = message.getLeftover();
  if (f != null) {
    writer.writeMessage(2, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(3, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
};

/**
 * optional BigUint daily_limit = 1;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.PokeInfo.prototype.getDailyLimit = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(this, proto.forge_abi.BigUint, 1));
};

/**
 * @param {?proto.forge_abi.BigUint|undefined} value
 * @return {!proto.forge_abi.PokeInfo} returns this
 */
proto.forge_abi.PokeInfo.prototype.setDailyLimit = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.PokeInfo} returns this
 */
proto.forge_abi.PokeInfo.prototype.clearDailyLimit = function() {
  return this.setDailyLimit(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.PokeInfo.prototype.hasDailyLimit = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional BigUint leftover = 2;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.PokeInfo.prototype.getLeftover = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(this, proto.forge_abi.BigUint, 2));
};

/**
 * @param {?proto.forge_abi.BigUint|undefined} value
 * @return {!proto.forge_abi.PokeInfo} returns this
 */
proto.forge_abi.PokeInfo.prototype.setLeftover = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.PokeInfo} returns this
 */
proto.forge_abi.PokeInfo.prototype.clearLeftover = function() {
  return this.setLeftover(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.PokeInfo.prototype.hasLeftover = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional BigUint amount = 3;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.PokeInfo.prototype.getAmount = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(this, proto.forge_abi.BigUint, 3));
};

/**
 * @param {?proto.forge_abi.BigUint|undefined} value
 * @return {!proto.forge_abi.PokeInfo} returns this
 */
proto.forge_abi.PokeInfo.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.PokeInfo} returns this
 */
proto.forge_abi.PokeInfo.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.PokeInfo.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.PokeConfig.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.PokeConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.PokeConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.PokeConfig.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        dailyLimit: jspb.Message.getFieldWithDefault(msg, 2, 0),
        amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
        enabled: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.PokeConfig}
 */
proto.forge_abi.PokeConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.PokeConfig();
  return proto.forge_abi.PokeConfig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.PokeConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.PokeConfig}
 */
proto.forge_abi.PokeConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setDailyLimit(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setAmount(value);
        break;
      case 5:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setEnabled(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.PokeConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.PokeConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.PokeConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.PokeConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDailyLimit();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(4, f);
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(5, f);
  }
};

/**
 * optional uint64 daily_limit = 2;
 * @return {number}
 */
proto.forge_abi.PokeConfig.prototype.getDailyLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.PokeConfig} returns this
 */
proto.forge_abi.PokeConfig.prototype.setDailyLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint64 amount = 4;
 * @return {number}
 */
proto.forge_abi.PokeConfig.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.PokeConfig} returns this
 */
proto.forge_abi.PokeConfig.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional bool enabled = 5;
 * @return {boolean}
 */
proto.forge_abi.PokeConfig.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};

/**
 * @param {boolean} value
 * @return {!proto.forge_abi.PokeConfig} returns this
 */
proto.forge_abi.PokeConfig.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.UpgradeInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.UpgradeInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.UpgradeInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.UpgradeInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        height: jspb.Message.getFieldWithDefault(msg, 1, 0),
        version: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.UpgradeInfo}
 */
proto.forge_abi.UpgradeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.UpgradeInfo();
  return proto.forge_abi.UpgradeInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.UpgradeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.UpgradeInfo}
 */
proto.forge_abi.UpgradeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setHeight(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setVersion(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.UpgradeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.UpgradeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.UpgradeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.UpgradeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.forge_abi.UpgradeInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.UpgradeInfo} returns this
 */
proto.forge_abi.UpgradeInfo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string version = 2;
 * @return {string}
 */
proto.forge_abi.UpgradeInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.UpgradeInfo} returns this
 */
proto.forge_abi.UpgradeInfo.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.WithdrawItem.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.WithdrawItem.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.WithdrawItem} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.WithdrawItem.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        hash: jspb.Message.getFieldWithDefault(msg, 1, ''),
        value: (f = msg.getValue()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.WithdrawItem}
 */
proto.forge_abi.WithdrawItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.WithdrawItem();
  return proto.forge_abi.WithdrawItem.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.WithdrawItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.WithdrawItem}
 */
proto.forge_abi.WithdrawItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setHash(value);
        break;
      case 2:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.WithdrawItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.WithdrawItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.WithdrawItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.WithdrawItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(2, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
};

/**
 * optional string hash = 1;
 * @return {string}
 */
proto.forge_abi.WithdrawItem.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.WithdrawItem} returns this
 */
proto.forge_abi.WithdrawItem.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional BigUint value = 2;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.WithdrawItem.prototype.getValue = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(this, proto.forge_abi.BigUint, 2));
};

/**
 * @param {?proto.forge_abi.BigUint|undefined} value
 * @return {!proto.forge_abi.WithdrawItem} returns this
 */
proto.forge_abi.WithdrawItem.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.WithdrawItem} returns this
 */
proto.forge_abi.WithdrawItem.prototype.clearValue = function() {
  return this.setValue(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.WithdrawItem.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.AccountConfig.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.AccountConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.AccountConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.AccountConfig.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        pk: msg.getPk(),
        balance: (f = msg.getBalance()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.AccountConfig}
 */
proto.forge_abi.AccountConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.AccountConfig();
  return proto.forge_abi.AccountConfig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.AccountConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.AccountConfig}
 */
proto.forge_abi.AccountConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPk(value);
        break;
      case 3:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setBalance(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.AccountConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.AccountConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.AccountConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.AccountConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(3, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.forge_abi.AccountConfig.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.AccountConfig} returns this
 */
proto.forge_abi.AccountConfig.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional bytes pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.AccountConfig.prototype.getPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes pk = 2;
 * This is a type-conversion wrapper around `getPk()`
 * @return {string}
 */
proto.forge_abi.AccountConfig.prototype.getPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPk()));
};

/**
 * optional bytes pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPk()`
 * @return {!Uint8Array}
 */
proto.forge_abi.AccountConfig.prototype.getPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPk()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.AccountConfig} returns this
 */
proto.forge_abi.AccountConfig.prototype.setPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional BigUint balance = 3;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.AccountConfig.prototype.getBalance = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(this, proto.forge_abi.BigUint, 3));
};

/**
 * @param {?proto.forge_abi.BigUint|undefined} value
 * @return {!proto.forge_abi.AccountConfig} returns this
 */
proto.forge_abi.AccountConfig.prototype.setBalance = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.AccountConfig} returns this
 */
proto.forge_abi.AccountConfig.prototype.clearBalance = function() {
  return this.setBalance(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.AccountConfig.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.TokenSwapConfig.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.TokenSwapConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.TokenSwapConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.TokenSwapConfig.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        commissionHolderAddress: jspb.Message.getFieldWithDefault(msg, 1, ''),
        commissionRate: jspb.Message.getFieldWithDefault(msg, 4, 0),
        revokeCommissionRate: jspb.Message.getFieldWithDefault(msg, 5, 0),
        minCommission: (f = msg.getMinCommission()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
        maxCommission: (f = msg.getMaxCommission()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.TokenSwapConfig}
 */
proto.forge_abi.TokenSwapConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.TokenSwapConfig();
  return proto.forge_abi.TokenSwapConfig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.TokenSwapConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.TokenSwapConfig}
 */
proto.forge_abi.TokenSwapConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setCommissionHolderAddress(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCommissionRate(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setRevokeCommissionRate(value);
        break;
      case 6:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setMinCommission(value);
        break;
      case 7:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setMaxCommission(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.TokenSwapConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.TokenSwapConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.TokenSwapConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.TokenSwapConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommissionHolderAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getCommissionRate();
  if (f !== 0) {
    writer.writeUint32(4, f);
  }
  f = message.getRevokeCommissionRate();
  if (f !== 0) {
    writer.writeUint32(5, f);
  }
  f = message.getMinCommission();
  if (f != null) {
    writer.writeMessage(6, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
  f = message.getMaxCommission();
  if (f != null) {
    writer.writeMessage(7, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
};

/**
 * optional string commission_holder_address = 1;
 * @return {string}
 */
proto.forge_abi.TokenSwapConfig.prototype.getCommissionHolderAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.TokenSwapConfig} returns this
 */
proto.forge_abi.TokenSwapConfig.prototype.setCommissionHolderAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional uint32 commission_rate = 4;
 * @return {number}
 */
proto.forge_abi.TokenSwapConfig.prototype.getCommissionRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TokenSwapConfig} returns this
 */
proto.forge_abi.TokenSwapConfig.prototype.setCommissionRate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional uint32 revoke_commission_rate = 5;
 * @return {number}
 */
proto.forge_abi.TokenSwapConfig.prototype.getRevokeCommissionRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.forge_abi.TokenSwapConfig} returns this
 */
proto.forge_abi.TokenSwapConfig.prototype.setRevokeCommissionRate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional BigUint min_commission = 6;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.TokenSwapConfig.prototype.getMinCommission = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(this, proto.forge_abi.BigUint, 6));
};

/**
 * @param {?proto.forge_abi.BigUint|undefined} value
 * @return {!proto.forge_abi.TokenSwapConfig} returns this
 */
proto.forge_abi.TokenSwapConfig.prototype.setMinCommission = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.TokenSwapConfig} returns this
 */
proto.forge_abi.TokenSwapConfig.prototype.clearMinCommission = function() {
  return this.setMinCommission(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.TokenSwapConfig.prototype.hasMinCommission = function() {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * optional BigUint max_commission = 7;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.TokenSwapConfig.prototype.getMaxCommission = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(this, proto.forge_abi.BigUint, 7));
};

/**
 * @param {?proto.forge_abi.BigUint|undefined} value
 * @return {!proto.forge_abi.TokenSwapConfig} returns this
 */
proto.forge_abi.TokenSwapConfig.prototype.setMaxCommission = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.forge_abi.TokenSwapConfig} returns this
 */
proto.forge_abi.TokenSwapConfig.prototype.clearMaxCommission = function() {
  return this.setMaxCommission(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.forge_abi.TokenSwapConfig.prototype.hasMaxCommission = function() {
  return jspb.Message.getField(this, 7) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.Evidence.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.Evidence.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.Evidence} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.Evidence.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        hash: jspb.Message.getFieldWithDefault(msg, 1, ''),
        chainType: jspb.Message.getFieldWithDefault(msg, 2, ''),
        chainId: jspb.Message.getFieldWithDefault(msg, 3, ''),
        originalTx: msg.getOriginalTx(),
        receiverAddress: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.Evidence}
 */
proto.forge_abi.Evidence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.Evidence();
  return proto.forge_abi.Evidence.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.Evidence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.Evidence}
 */
proto.forge_abi.Evidence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setHash(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setChainType(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setChainId(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setOriginalTx(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setReceiverAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.Evidence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.Evidence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.Evidence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.Evidence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getChainType();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getOriginalTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getReceiverAddress();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string hash = 1;
 * @return {string}
 */
proto.forge_abi.Evidence.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.Evidence} returns this
 */
proto.forge_abi.Evidence.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string chain_type = 2;
 * @return {string}
 */
proto.forge_abi.Evidence.prototype.getChainType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.Evidence} returns this
 */
proto.forge_abi.Evidence.prototype.setChainType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string chain_id = 3;
 * @return {string}
 */
proto.forge_abi.Evidence.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.Evidence} returns this
 */
proto.forge_abi.Evidence.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional bytes original_tx = 4;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.Evidence.prototype.getOriginalTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * optional bytes original_tx = 4;
 * This is a type-conversion wrapper around `getOriginalTx()`
 * @return {string}
 */
proto.forge_abi.Evidence.prototype.getOriginalTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getOriginalTx()));
};

/**
 * optional bytes original_tx = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOriginalTx()`
 * @return {!Uint8Array}
 */
proto.forge_abi.Evidence.prototype.getOriginalTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getOriginalTx()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.forge_abi.Evidence} returns this
 */
proto.forge_abi.Evidence.prototype.setOriginalTx = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional string receiver_address = 5;
 * @return {string}
 */
proto.forge_abi.Evidence.prototype.getReceiverAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.forge_abi.Evidence} returns this
 */
proto.forge_abi.Evidence.prototype.setReceiverAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

goog.object.extend(exports, proto.forge_abi);
