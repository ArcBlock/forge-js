// source: vendor.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.abci_vendor.BlockID', null, global);
goog.exportSymbol('proto.abci_vendor.BlockParams', null, global);
goog.exportSymbol('proto.abci_vendor.ConsensusParams', null, global);
goog.exportSymbol('proto.abci_vendor.Evidence', null, global);
goog.exportSymbol('proto.abci_vendor.EvidenceParams', null, global);
goog.exportSymbol('proto.abci_vendor.Header', null, global);
goog.exportSymbol('proto.abci_vendor.KVPair', null, global);
goog.exportSymbol('proto.abci_vendor.LastCommitInfo', null, global);
goog.exportSymbol('proto.abci_vendor.PartSetHeader', null, global);
goog.exportSymbol('proto.abci_vendor.PubKey', null, global);
goog.exportSymbol('proto.abci_vendor.RequestBeginBlock', null, global);
goog.exportSymbol('proto.abci_vendor.RequestEndBlock', null, global);
goog.exportSymbol('proto.abci_vendor.ResponseBeginBlock', null, global);
goog.exportSymbol('proto.abci_vendor.ResponseCheckTx', null, global);
goog.exportSymbol('proto.abci_vendor.ResponseDeliverTx', null, global);
goog.exportSymbol('proto.abci_vendor.ResponseEndBlock', null, global);
goog.exportSymbol('proto.abci_vendor.Validator', null, global);
goog.exportSymbol('proto.abci_vendor.ValidatorParams', null, global);
goog.exportSymbol('proto.abci_vendor.ValidatorUpdate', null, global);
goog.exportSymbol('proto.abci_vendor.Version', null, global);
goog.exportSymbol('proto.abci_vendor.VoteInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.KVPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.abci_vendor.KVPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.KVPair.displayName = 'proto.abci_vendor.KVPair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.BlockParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.abci_vendor.BlockParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.BlockParams.displayName = 'proto.abci_vendor.BlockParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.EvidenceParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.abci_vendor.EvidenceParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.EvidenceParams.displayName = 'proto.abci_vendor.EvidenceParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.ValidatorParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.abci_vendor.ValidatorParams.repeatedFields_, null);
};
goog.inherits(proto.abci_vendor.ValidatorParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.ValidatorParams.displayName = 'proto.abci_vendor.ValidatorParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.ConsensusParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.abci_vendor.ConsensusParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.ConsensusParams.displayName = 'proto.abci_vendor.ConsensusParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.LastCommitInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.abci_vendor.LastCommitInfo.repeatedFields_, null);
};
goog.inherits(proto.abci_vendor.LastCommitInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.LastCommitInfo.displayName = 'proto.abci_vendor.LastCommitInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.Version = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.abci_vendor.Version, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.Version.displayName = 'proto.abci_vendor.Version';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.BlockID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.abci_vendor.BlockID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.BlockID.displayName = 'proto.abci_vendor.BlockID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.PartSetHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.abci_vendor.PartSetHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.PartSetHeader.displayName = 'proto.abci_vendor.PartSetHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.Validator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.abci_vendor.Validator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.Validator.displayName = 'proto.abci_vendor.Validator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.ValidatorUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.abci_vendor.ValidatorUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.ValidatorUpdate.displayName = 'proto.abci_vendor.ValidatorUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.VoteInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.abci_vendor.VoteInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.VoteInfo.displayName = 'proto.abci_vendor.VoteInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.PubKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.abci_vendor.PubKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.PubKey.displayName = 'proto.abci_vendor.PubKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.Evidence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.abci_vendor.Evidence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.Evidence.displayName = 'proto.abci_vendor.Evidence';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.abci_vendor.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.Header.displayName = 'proto.abci_vendor.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.RequestBeginBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.abci_vendor.RequestBeginBlock.repeatedFields_, null);
};
goog.inherits(proto.abci_vendor.RequestBeginBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.RequestBeginBlock.displayName = 'proto.abci_vendor.RequestBeginBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.RequestEndBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.abci_vendor.RequestEndBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.RequestEndBlock.displayName = 'proto.abci_vendor.RequestEndBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.ResponseBeginBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.abci_vendor.ResponseBeginBlock.repeatedFields_, null);
};
goog.inherits(proto.abci_vendor.ResponseBeginBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.ResponseBeginBlock.displayName = 'proto.abci_vendor.ResponseBeginBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.ResponseEndBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.abci_vendor.ResponseEndBlock.repeatedFields_, null);
};
goog.inherits(proto.abci_vendor.ResponseEndBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.ResponseEndBlock.displayName = 'proto.abci_vendor.ResponseEndBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.ResponseCheckTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.abci_vendor.ResponseCheckTx.repeatedFields_, null);
};
goog.inherits(proto.abci_vendor.ResponseCheckTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.ResponseCheckTx.displayName = 'proto.abci_vendor.ResponseCheckTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.abci_vendor.ResponseDeliverTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.abci_vendor.ResponseDeliverTx.repeatedFields_, null);
};
goog.inherits(proto.abci_vendor.ResponseDeliverTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.abci_vendor.ResponseDeliverTx.displayName = 'proto.abci_vendor.ResponseDeliverTx';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.KVPair.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.KVPair.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.KVPair} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.KVPair.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        key: msg.getKey(),
        value: msg.getValue(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.KVPair}
 */
proto.abci_vendor.KVPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.KVPair();
  return proto.abci_vendor.KVPair.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.KVPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.KVPair}
 */
proto.abci_vendor.KVPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setKey(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.KVPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.KVPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.KVPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.KVPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.KVPair.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.abci_vendor.KVPair.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getKey()));
};

/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.KVPair.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getKey()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.KVPair} returns this
 */
proto.abci_vendor.KVPair.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.KVPair.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.abci_vendor.KVPair.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getValue()));
};

/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.KVPair.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getValue()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.KVPair} returns this
 */
proto.abci_vendor.KVPair.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.BlockParams.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.BlockParams.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.BlockParams} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.BlockParams.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        maxBytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
        maxGas: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.BlockParams}
 */
proto.abci_vendor.BlockParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.BlockParams();
  return proto.abci_vendor.BlockParams.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.BlockParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.BlockParams}
 */
proto.abci_vendor.BlockParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setMaxBytes(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setMaxGas(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.BlockParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.BlockParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.BlockParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.BlockParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxBytes();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getMaxGas();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
};

/**
 * optional int64 max_bytes = 1;
 * @return {number}
 */
proto.abci_vendor.BlockParams.prototype.getMaxBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.BlockParams} returns this
 */
proto.abci_vendor.BlockParams.prototype.setMaxBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int64 max_gas = 2;
 * @return {number}
 */
proto.abci_vendor.BlockParams.prototype.getMaxGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.BlockParams} returns this
 */
proto.abci_vendor.BlockParams.prototype.setMaxGas = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.EvidenceParams.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.EvidenceParams.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.EvidenceParams} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.EvidenceParams.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        maxAge: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.EvidenceParams}
 */
proto.abci_vendor.EvidenceParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.EvidenceParams();
  return proto.abci_vendor.EvidenceParams.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.EvidenceParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.EvidenceParams}
 */
proto.abci_vendor.EvidenceParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setMaxAge(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.EvidenceParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.EvidenceParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.EvidenceParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.EvidenceParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxAge();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
};

/**
 * optional int64 max_age = 1;
 * @return {number}
 */
proto.abci_vendor.EvidenceParams.prototype.getMaxAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.EvidenceParams} returns this
 */
proto.abci_vendor.EvidenceParams.prototype.setMaxAge = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.abci_vendor.ValidatorParams.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.ValidatorParams.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.ValidatorParams.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.ValidatorParams} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.ValidatorParams.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        pubKeyTypesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.ValidatorParams}
 */
proto.abci_vendor.ValidatorParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.ValidatorParams();
  return proto.abci_vendor.ValidatorParams.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.ValidatorParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.ValidatorParams}
 */
proto.abci_vendor.ValidatorParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.addPubKeyTypes(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.ValidatorParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.ValidatorParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.ValidatorParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.ValidatorParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubKeyTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(1, f);
  }
};

/**
 * repeated string pub_key_types = 1;
 * @return {!Array<string>}
 */
proto.abci_vendor.ValidatorParams.prototype.getPubKeyTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.abci_vendor.ValidatorParams} returns this
 */
proto.abci_vendor.ValidatorParams.prototype.setPubKeyTypesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.abci_vendor.ValidatorParams} returns this
 */
proto.abci_vendor.ValidatorParams.prototype.addPubKeyTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.abci_vendor.ValidatorParams} returns this
 */
proto.abci_vendor.ValidatorParams.prototype.clearPubKeyTypesList = function() {
  return this.setPubKeyTypesList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.ConsensusParams.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.ConsensusParams.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.ConsensusParams} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.ConsensusParams.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        block: (f = msg.getBlock()) && proto.abci_vendor.BlockParams.toObject(includeInstance, f),
        evidence: (f = msg.getEvidence()) && proto.abci_vendor.EvidenceParams.toObject(includeInstance, f),
        validator: (f = msg.getValidator()) && proto.abci_vendor.ValidatorParams.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.ConsensusParams}
 */
proto.abci_vendor.ConsensusParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.ConsensusParams();
  return proto.abci_vendor.ConsensusParams.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.ConsensusParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.ConsensusParams}
 */
proto.abci_vendor.ConsensusParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.abci_vendor.BlockParams();
        reader.readMessage(value, proto.abci_vendor.BlockParams.deserializeBinaryFromReader);
        msg.setBlock(value);
        break;
      case 2:
        var value = new proto.abci_vendor.EvidenceParams();
        reader.readMessage(value, proto.abci_vendor.EvidenceParams.deserializeBinaryFromReader);
        msg.setEvidence(value);
        break;
      case 3:
        var value = new proto.abci_vendor.ValidatorParams();
        reader.readMessage(value, proto.abci_vendor.ValidatorParams.deserializeBinaryFromReader);
        msg.setValidator(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.ConsensusParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.ConsensusParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.ConsensusParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.ConsensusParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(1, f, proto.abci_vendor.BlockParams.serializeBinaryToWriter);
  }
  f = message.getEvidence();
  if (f != null) {
    writer.writeMessage(2, f, proto.abci_vendor.EvidenceParams.serializeBinaryToWriter);
  }
  f = message.getValidator();
  if (f != null) {
    writer.writeMessage(3, f, proto.abci_vendor.ValidatorParams.serializeBinaryToWriter);
  }
};

/**
 * optional BlockParams block = 1;
 * @return {?proto.abci_vendor.BlockParams}
 */
proto.abci_vendor.ConsensusParams.prototype.getBlock = function() {
  return /** @type{?proto.abci_vendor.BlockParams} */ (jspb.Message.getWrapperField(
    this,
    proto.abci_vendor.BlockParams,
    1
  ));
};

/**
 * @param {?proto.abci_vendor.BlockParams|undefined} value
 * @return {!proto.abci_vendor.ConsensusParams} returns this
 */
proto.abci_vendor.ConsensusParams.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.abci_vendor.ConsensusParams} returns this
 */
proto.abci_vendor.ConsensusParams.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.abci_vendor.ConsensusParams.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional EvidenceParams evidence = 2;
 * @return {?proto.abci_vendor.EvidenceParams}
 */
proto.abci_vendor.ConsensusParams.prototype.getEvidence = function() {
  return /** @type{?proto.abci_vendor.EvidenceParams} */ (jspb.Message.getWrapperField(
    this,
    proto.abci_vendor.EvidenceParams,
    2
  ));
};

/**
 * @param {?proto.abci_vendor.EvidenceParams|undefined} value
 * @return {!proto.abci_vendor.ConsensusParams} returns this
 */
proto.abci_vendor.ConsensusParams.prototype.setEvidence = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.abci_vendor.ConsensusParams} returns this
 */
proto.abci_vendor.ConsensusParams.prototype.clearEvidence = function() {
  return this.setEvidence(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.abci_vendor.ConsensusParams.prototype.hasEvidence = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional ValidatorParams validator = 3;
 * @return {?proto.abci_vendor.ValidatorParams}
 */
proto.abci_vendor.ConsensusParams.prototype.getValidator = function() {
  return /** @type{?proto.abci_vendor.ValidatorParams} */ (jspb.Message.getWrapperField(
    this,
    proto.abci_vendor.ValidatorParams,
    3
  ));
};

/**
 * @param {?proto.abci_vendor.ValidatorParams|undefined} value
 * @return {!proto.abci_vendor.ConsensusParams} returns this
 */
proto.abci_vendor.ConsensusParams.prototype.setValidator = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.abci_vendor.ConsensusParams} returns this
 */
proto.abci_vendor.ConsensusParams.prototype.clearValidator = function() {
  return this.setValidator(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.abci_vendor.ConsensusParams.prototype.hasValidator = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.abci_vendor.LastCommitInfo.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.LastCommitInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.LastCommitInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.LastCommitInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.LastCommitInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        round: jspb.Message.getFieldWithDefault(msg, 1, 0),
        votesList: jspb.Message.toObjectList(msg.getVotesList(), proto.abci_vendor.VoteInfo.toObject, includeInstance),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.LastCommitInfo}
 */
proto.abci_vendor.LastCommitInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.LastCommitInfo();
  return proto.abci_vendor.LastCommitInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.LastCommitInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.LastCommitInfo}
 */
proto.abci_vendor.LastCommitInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setRound(value);
        break;
      case 2:
        var value = new proto.abci_vendor.VoteInfo();
        reader.readMessage(value, proto.abci_vendor.VoteInfo.deserializeBinaryFromReader);
        msg.addVotes(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.LastCommitInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.LastCommitInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.LastCommitInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.LastCommitInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.abci_vendor.VoteInfo.serializeBinaryToWriter);
  }
};

/**
 * optional int32 round = 1;
 * @return {number}
 */
proto.abci_vendor.LastCommitInfo.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.LastCommitInfo} returns this
 */
proto.abci_vendor.LastCommitInfo.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * repeated VoteInfo votes = 2;
 * @return {!Array<!proto.abci_vendor.VoteInfo>}
 */
proto.abci_vendor.LastCommitInfo.prototype.getVotesList = function() {
  return /** @type{!Array<!proto.abci_vendor.VoteInfo>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.abci_vendor.VoteInfo,
    2
  ));
};

/**
 * @param {!Array<!proto.abci_vendor.VoteInfo>} value
 * @return {!proto.abci_vendor.LastCommitInfo} returns this
 */
proto.abci_vendor.LastCommitInfo.prototype.setVotesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.abci_vendor.VoteInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.abci_vendor.VoteInfo}
 */
proto.abci_vendor.LastCommitInfo.prototype.addVotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.abci_vendor.VoteInfo, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.abci_vendor.LastCommitInfo} returns this
 */
proto.abci_vendor.LastCommitInfo.prototype.clearVotesList = function() {
  return this.setVotesList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.Version.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.Version.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.Version} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.Version.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        block: jspb.Message.getFieldWithDefault(msg, 1, 0),
        app: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.Version}
 */
proto.abci_vendor.Version.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.Version();
  return proto.abci_vendor.Version.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.Version}
 */
proto.abci_vendor.Version.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setBlock(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setApp(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.Version.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.Version.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.Version} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.Version.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getApp();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
};

/**
 * optional uint64 Block = 1;
 * @return {number}
 */
proto.abci_vendor.Version.prototype.getBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.Version} returns this
 */
proto.abci_vendor.Version.prototype.setBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 App = 2;
 * @return {number}
 */
proto.abci_vendor.Version.prototype.getApp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.Version} returns this
 */
proto.abci_vendor.Version.prototype.setApp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.BlockID.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.BlockID.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.BlockID} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.BlockID.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        hash: msg.getHash(),
        partsHeader: (f = msg.getPartsHeader()) && proto.abci_vendor.PartSetHeader.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.BlockID}
 */
proto.abci_vendor.BlockID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.BlockID();
  return proto.abci_vendor.BlockID.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.BlockID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.BlockID}
 */
proto.abci_vendor.BlockID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setHash(value);
        break;
      case 2:
        var value = new proto.abci_vendor.PartSetHeader();
        reader.readMessage(value, proto.abci_vendor.PartSetHeader.deserializeBinaryFromReader);
        msg.setPartsHeader(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.BlockID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.BlockID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.BlockID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.BlockID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getPartsHeader();
  if (f != null) {
    writer.writeMessage(2, f, proto.abci_vendor.PartSetHeader.serializeBinaryToWriter);
  }
};

/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.BlockID.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.abci_vendor.BlockID.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.BlockID.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.BlockID} returns this
 */
proto.abci_vendor.BlockID.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional PartSetHeader parts_header = 2;
 * @return {?proto.abci_vendor.PartSetHeader}
 */
proto.abci_vendor.BlockID.prototype.getPartsHeader = function() {
  return /** @type{?proto.abci_vendor.PartSetHeader} */ (jspb.Message.getWrapperField(
    this,
    proto.abci_vendor.PartSetHeader,
    2
  ));
};

/**
 * @param {?proto.abci_vendor.PartSetHeader|undefined} value
 * @return {!proto.abci_vendor.BlockID} returns this
 */
proto.abci_vendor.BlockID.prototype.setPartsHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.abci_vendor.BlockID} returns this
 */
proto.abci_vendor.BlockID.prototype.clearPartsHeader = function() {
  return this.setPartsHeader(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.abci_vendor.BlockID.prototype.hasPartsHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.PartSetHeader.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.PartSetHeader.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.PartSetHeader} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.PartSetHeader.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        total: jspb.Message.getFieldWithDefault(msg, 1, 0),
        hash: msg.getHash(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.PartSetHeader}
 */
proto.abci_vendor.PartSetHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.PartSetHeader();
  return proto.abci_vendor.PartSetHeader.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.PartSetHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.PartSetHeader}
 */
proto.abci_vendor.PartSetHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setTotal(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.PartSetHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.PartSetHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.PartSetHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.PartSetHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional int32 total = 1;
 * @return {number}
 */
proto.abci_vendor.PartSetHeader.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.PartSetHeader} returns this
 */
proto.abci_vendor.PartSetHeader.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.PartSetHeader.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.abci_vendor.PartSetHeader.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.PartSetHeader.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.PartSetHeader} returns this
 */
proto.abci_vendor.PartSetHeader.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.Validator.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.Validator.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.Validator} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.Validator.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        address: msg.getAddress(),
        power: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.Validator}
 */
proto.abci_vendor.Validator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.Validator();
  return proto.abci_vendor.Validator.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.Validator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.Validator}
 */
proto.abci_vendor.Validator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAddress(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPower(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.Validator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.Validator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.Validator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.Validator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
};

/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.Validator.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.abci_vendor.Validator.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAddress()));
};

/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.Validator.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAddress()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.Validator} returns this
 */
proto.abci_vendor.Validator.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional int64 power = 3;
 * @return {number}
 */
proto.abci_vendor.Validator.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.Validator} returns this
 */
proto.abci_vendor.Validator.prototype.setPower = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.ValidatorUpdate.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.ValidatorUpdate.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.ValidatorUpdate} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.ValidatorUpdate.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        pubKey: (f = msg.getPubKey()) && proto.abci_vendor.PubKey.toObject(includeInstance, f),
        power: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.ValidatorUpdate}
 */
proto.abci_vendor.ValidatorUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.ValidatorUpdate();
  return proto.abci_vendor.ValidatorUpdate.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.ValidatorUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.ValidatorUpdate}
 */
proto.abci_vendor.ValidatorUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.abci_vendor.PubKey();
        reader.readMessage(value, proto.abci_vendor.PubKey.deserializeBinaryFromReader);
        msg.setPubKey(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPower(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.ValidatorUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.ValidatorUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.ValidatorUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.ValidatorUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubKey();
  if (f != null) {
    writer.writeMessage(1, f, proto.abci_vendor.PubKey.serializeBinaryToWriter);
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
};

/**
 * optional PubKey pub_key = 1;
 * @return {?proto.abci_vendor.PubKey}
 */
proto.abci_vendor.ValidatorUpdate.prototype.getPubKey = function() {
  return /** @type{?proto.abci_vendor.PubKey} */ (jspb.Message.getWrapperField(this, proto.abci_vendor.PubKey, 1));
};

/**
 * @param {?proto.abci_vendor.PubKey|undefined} value
 * @return {!proto.abci_vendor.ValidatorUpdate} returns this
 */
proto.abci_vendor.ValidatorUpdate.prototype.setPubKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.abci_vendor.ValidatorUpdate} returns this
 */
proto.abci_vendor.ValidatorUpdate.prototype.clearPubKey = function() {
  return this.setPubKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.abci_vendor.ValidatorUpdate.prototype.hasPubKey = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional int64 power = 2;
 * @return {number}
 */
proto.abci_vendor.ValidatorUpdate.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.ValidatorUpdate} returns this
 */
proto.abci_vendor.ValidatorUpdate.prototype.setPower = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.VoteInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.VoteInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.VoteInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.VoteInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        validator: (f = msg.getValidator()) && proto.abci_vendor.Validator.toObject(includeInstance, f),
        signedLastBlock: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.VoteInfo}
 */
proto.abci_vendor.VoteInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.VoteInfo();
  return proto.abci_vendor.VoteInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.VoteInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.VoteInfo}
 */
proto.abci_vendor.VoteInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.abci_vendor.Validator();
        reader.readMessage(value, proto.abci_vendor.Validator.deserializeBinaryFromReader);
        msg.setValidator(value);
        break;
      case 2:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSignedLastBlock(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.VoteInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.VoteInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.VoteInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.VoteInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator();
  if (f != null) {
    writer.writeMessage(1, f, proto.abci_vendor.Validator.serializeBinaryToWriter);
  }
  f = message.getSignedLastBlock();
  if (f) {
    writer.writeBool(2, f);
  }
};

/**
 * optional Validator validator = 1;
 * @return {?proto.abci_vendor.Validator}
 */
proto.abci_vendor.VoteInfo.prototype.getValidator = function() {
  return /** @type{?proto.abci_vendor.Validator} */ (jspb.Message.getWrapperField(
    this,
    proto.abci_vendor.Validator,
    1
  ));
};

/**
 * @param {?proto.abci_vendor.Validator|undefined} value
 * @return {!proto.abci_vendor.VoteInfo} returns this
 */
proto.abci_vendor.VoteInfo.prototype.setValidator = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.abci_vendor.VoteInfo} returns this
 */
proto.abci_vendor.VoteInfo.prototype.clearValidator = function() {
  return this.setValidator(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.abci_vendor.VoteInfo.prototype.hasValidator = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bool signed_last_block = 2;
 * @return {boolean}
 */
proto.abci_vendor.VoteInfo.prototype.getSignedLastBlock = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};

/**
 * @param {boolean} value
 * @return {!proto.abci_vendor.VoteInfo} returns this
 */
proto.abci_vendor.VoteInfo.prototype.setSignedLastBlock = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.PubKey.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.PubKey.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.PubKey} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.PubKey.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, ''),
        data: msg.getData(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.PubKey}
 */
proto.abci_vendor.PubKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.PubKey();
  return proto.abci_vendor.PubKey.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.PubKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.PubKey}
 */
proto.abci_vendor.PubKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setType(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.PubKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.PubKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.PubKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.PubKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional string type = 1;
 * @return {string}
 */
proto.abci_vendor.PubKey.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.abci_vendor.PubKey} returns this
 */
proto.abci_vendor.PubKey.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.PubKey.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.abci_vendor.PubKey.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.PubKey.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.PubKey} returns this
 */
proto.abci_vendor.PubKey.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.Evidence.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.Evidence.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.Evidence} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.Evidence.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, ''),
        validator: (f = msg.getValidator()) && proto.abci_vendor.Validator.toObject(includeInstance, f),
        height: jspb.Message.getFieldWithDefault(msg, 3, 0),
        time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        totalVotingPower: jspb.Message.getFieldWithDefault(msg, 5, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.Evidence}
 */
proto.abci_vendor.Evidence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.Evidence();
  return proto.abci_vendor.Evidence.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.Evidence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.Evidence}
 */
proto.abci_vendor.Evidence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setType(value);
        break;
      case 2:
        var value = new proto.abci_vendor.Validator();
        reader.readMessage(value, proto.abci_vendor.Validator.deserializeBinaryFromReader);
        msg.setValidator(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setHeight(value);
        break;
      case 4:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setTime(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTotalVotingPower(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.Evidence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.Evidence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.Evidence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.Evidence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getValidator();
  if (f != null) {
    writer.writeMessage(2, f, proto.abci_vendor.Validator.serializeBinaryToWriter);
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(4, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
  f = message.getTotalVotingPower();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
};

/**
 * optional string type = 1;
 * @return {string}
 */
proto.abci_vendor.Evidence.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.abci_vendor.Evidence} returns this
 */
proto.abci_vendor.Evidence.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional Validator validator = 2;
 * @return {?proto.abci_vendor.Validator}
 */
proto.abci_vendor.Evidence.prototype.getValidator = function() {
  return /** @type{?proto.abci_vendor.Validator} */ (jspb.Message.getWrapperField(
    this,
    proto.abci_vendor.Validator,
    2
  ));
};

/**
 * @param {?proto.abci_vendor.Validator|undefined} value
 * @return {!proto.abci_vendor.Evidence} returns this
 */
proto.abci_vendor.Evidence.prototype.setValidator = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.abci_vendor.Evidence} returns this
 */
proto.abci_vendor.Evidence.prototype.clearValidator = function() {
  return this.setValidator(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.abci_vendor.Evidence.prototype.hasValidator = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional int64 height = 3;
 * @return {number}
 */
proto.abci_vendor.Evidence.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.Evidence} returns this
 */
proto.abci_vendor.Evidence.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional google.protobuf.Timestamp time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.abci_vendor.Evidence.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    4
  ));
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.abci_vendor.Evidence} returns this
 */
proto.abci_vendor.Evidence.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.abci_vendor.Evidence} returns this
 */
proto.abci_vendor.Evidence.prototype.clearTime = function() {
  return this.setTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.abci_vendor.Evidence.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional int64 total_voting_power = 5;
 * @return {number}
 */
proto.abci_vendor.Evidence.prototype.getTotalVotingPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.Evidence} returns this
 */
proto.abci_vendor.Evidence.prototype.setTotalVotingPower = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.Header.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.Header.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.Header} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.Header.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        version: (f = msg.getVersion()) && proto.abci_vendor.Version.toObject(includeInstance, f),
        chainId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        height: jspb.Message.getFieldWithDefault(msg, 3, 0),
        time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        numTxs: jspb.Message.getFieldWithDefault(msg, 5, 0),
        totalTxs: jspb.Message.getFieldWithDefault(msg, 6, 0),
        lastBlockId: (f = msg.getLastBlockId()) && proto.abci_vendor.BlockID.toObject(includeInstance, f),
        lastCommitHash: msg.getLastCommitHash(),
        dataHash: msg.getDataHash(),
        validatorsHash: msg.getValidatorsHash(),
        nextValidatorsHash: msg.getNextValidatorsHash(),
        consensusHash: msg.getConsensusHash(),
        appHash: msg.getAppHash(),
        lastResultsHash: msg.getLastResultsHash(),
        evidenceHash: msg.getEvidenceHash(),
        proposerAddress: msg.getProposerAddress(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.Header}
 */
proto.abci_vendor.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.Header();
  return proto.abci_vendor.Header.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.Header}
 */
proto.abci_vendor.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.abci_vendor.Version();
        reader.readMessage(value, proto.abci_vendor.Version.deserializeBinaryFromReader);
        msg.setVersion(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setChainId(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setHeight(value);
        break;
      case 4:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
        msg.setTime(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setNumTxs(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTotalTxs(value);
        break;
      case 7:
        var value = new proto.abci_vendor.BlockID();
        reader.readMessage(value, proto.abci_vendor.BlockID.deserializeBinaryFromReader);
        msg.setLastBlockId(value);
        break;
      case 8:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setLastCommitHash(value);
        break;
      case 9:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setDataHash(value);
        break;
      case 10:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setValidatorsHash(value);
        break;
      case 11:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setNextValidatorsHash(value);
        break;
      case 12:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setConsensusHash(value);
        break;
      case 13:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAppHash(value);
        break;
      case 14:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setLastResultsHash(value);
        break;
      case 15:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setEvidenceHash(value);
        break;
      case 16:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setProposerAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(1, f, proto.abci_vendor.Version.serializeBinaryToWriter);
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(4, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
  f = message.getNumTxs();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getTotalTxs();
  if (f !== 0) {
    writer.writeInt64(6, f);
  }
  f = message.getLastBlockId();
  if (f != null) {
    writer.writeMessage(7, f, proto.abci_vendor.BlockID.serializeBinaryToWriter);
  }
  f = message.getLastCommitHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(8, f);
  }
  f = message.getDataHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(9, f);
  }
  f = message.getValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(10, f);
  }
  f = message.getNextValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(11, f);
  }
  f = message.getConsensusHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(12, f);
  }
  f = message.getAppHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(13, f);
  }
  f = message.getLastResultsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(14, f);
  }
  f = message.getEvidenceHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(15, f);
  }
  f = message.getProposerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(16, f);
  }
};

/**
 * optional Version version = 1;
 * @return {?proto.abci_vendor.Version}
 */
proto.abci_vendor.Header.prototype.getVersion = function() {
  return /** @type{?proto.abci_vendor.Version} */ (jspb.Message.getWrapperField(this, proto.abci_vendor.Version, 1));
};

/**
 * @param {?proto.abci_vendor.Version|undefined} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setVersion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.clearVersion = function() {
  return this.setVersion(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.abci_vendor.Header.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.abci_vendor.Header.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int64 height = 3;
 * @return {number}
 */
proto.abci_vendor.Header.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional google.protobuf.Timestamp time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.abci_vendor.Header.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    4
  ));
};

/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.clearTime = function() {
  return this.setTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.abci_vendor.Header.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional int64 num_txs = 5;
 * @return {number}
 */
proto.abci_vendor.Header.prototype.getNumTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setNumTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int64 total_txs = 6;
 * @return {number}
 */
proto.abci_vendor.Header.prototype.getTotalTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setTotalTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional BlockID last_block_id = 7;
 * @return {?proto.abci_vendor.BlockID}
 */
proto.abci_vendor.Header.prototype.getLastBlockId = function() {
  return /** @type{?proto.abci_vendor.BlockID} */ (jspb.Message.getWrapperField(this, proto.abci_vendor.BlockID, 7));
};

/**
 * @param {?proto.abci_vendor.BlockID|undefined} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setLastBlockId = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.clearLastBlockId = function() {
  return this.setLastBlockId(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.abci_vendor.Header.prototype.hasLastBlockId = function() {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * optional bytes last_commit_hash = 8;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.Header.prototype.getLastCommitHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ''));
};

/**
 * optional bytes last_commit_hash = 8;
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {string}
 */
proto.abci_vendor.Header.prototype.getLastCommitHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getLastCommitHash()));
};

/**
 * optional bytes last_commit_hash = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.Header.prototype.getLastCommitHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getLastCommitHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setLastCommitHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};

/**
 * optional bytes data_hash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.Header.prototype.getDataHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ''));
};

/**
 * optional bytes data_hash = 9;
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {string}
 */
proto.abci_vendor.Header.prototype.getDataHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getDataHash()));
};

/**
 * optional bytes data_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.Header.prototype.getDataHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getDataHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setDataHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};

/**
 * optional bytes validators_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.Header.prototype.getValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ''));
};

/**
 * optional bytes validators_hash = 10;
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {string}
 */
proto.abci_vendor.Header.prototype.getValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getValidatorsHash()));
};

/**
 * optional bytes validators_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.Header.prototype.getValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getValidatorsHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};

/**
 * optional bytes next_validators_hash = 11;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.Header.prototype.getNextValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ''));
};

/**
 * optional bytes next_validators_hash = 11;
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {string}
 */
proto.abci_vendor.Header.prototype.getNextValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNextValidatorsHash()));
};

/**
 * optional bytes next_validators_hash = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.Header.prototype.getNextValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNextValidatorsHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setNextValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};

/**
 * optional bytes consensus_hash = 12;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.Header.prototype.getConsensusHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ''));
};

/**
 * optional bytes consensus_hash = 12;
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {string}
 */
proto.abci_vendor.Header.prototype.getConsensusHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getConsensusHash()));
};

/**
 * optional bytes consensus_hash = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.Header.prototype.getConsensusHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getConsensusHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setConsensusHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};

/**
 * optional bytes app_hash = 13;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.Header.prototype.getAppHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ''));
};

/**
 * optional bytes app_hash = 13;
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {string}
 */
proto.abci_vendor.Header.prototype.getAppHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAppHash()));
};

/**
 * optional bytes app_hash = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.Header.prototype.getAppHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAppHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setAppHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};

/**
 * optional bytes last_results_hash = 14;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.Header.prototype.getLastResultsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ''));
};

/**
 * optional bytes last_results_hash = 14;
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {string}
 */
proto.abci_vendor.Header.prototype.getLastResultsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getLastResultsHash()));
};

/**
 * optional bytes last_results_hash = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.Header.prototype.getLastResultsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getLastResultsHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setLastResultsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};

/**
 * optional bytes evidence_hash = 15;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.Header.prototype.getEvidenceHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ''));
};

/**
 * optional bytes evidence_hash = 15;
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {string}
 */
proto.abci_vendor.Header.prototype.getEvidenceHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEvidenceHash()));
};

/**
 * optional bytes evidence_hash = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.Header.prototype.getEvidenceHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEvidenceHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setEvidenceHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};

/**
 * optional bytes proposer_address = 16;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.Header.prototype.getProposerAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 16, ''));
};

/**
 * optional bytes proposer_address = 16;
 * This is a type-conversion wrapper around `getProposerAddress()`
 * @return {string}
 */
proto.abci_vendor.Header.prototype.getProposerAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getProposerAddress()));
};

/**
 * optional bytes proposer_address = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposerAddress()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.Header.prototype.getProposerAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getProposerAddress()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.Header} returns this
 */
proto.abci_vendor.Header.prototype.setProposerAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 16, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.abci_vendor.RequestBeginBlock.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.RequestBeginBlock.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.RequestBeginBlock.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.RequestBeginBlock} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.RequestBeginBlock.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        hash: msg.getHash(),
        header: (f = msg.getHeader()) && proto.abci_vendor.Header.toObject(includeInstance, f),
        lastCommitInfo: (f = msg.getLastCommitInfo()) && proto.abci_vendor.LastCommitInfo.toObject(includeInstance, f),
        byzantineValidatorsList: jspb.Message.toObjectList(
          msg.getByzantineValidatorsList(),
          proto.abci_vendor.Evidence.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.RequestBeginBlock}
 */
proto.abci_vendor.RequestBeginBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.RequestBeginBlock();
  return proto.abci_vendor.RequestBeginBlock.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.RequestBeginBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.RequestBeginBlock}
 */
proto.abci_vendor.RequestBeginBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setHash(value);
        break;
      case 2:
        var value = new proto.abci_vendor.Header();
        reader.readMessage(value, proto.abci_vendor.Header.deserializeBinaryFromReader);
        msg.setHeader(value);
        break;
      case 3:
        var value = new proto.abci_vendor.LastCommitInfo();
        reader.readMessage(value, proto.abci_vendor.LastCommitInfo.deserializeBinaryFromReader);
        msg.setLastCommitInfo(value);
        break;
      case 4:
        var value = new proto.abci_vendor.Evidence();
        reader.readMessage(value, proto.abci_vendor.Evidence.deserializeBinaryFromReader);
        msg.addByzantineValidators(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.RequestBeginBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.RequestBeginBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.RequestBeginBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.RequestBeginBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(2, f, proto.abci_vendor.Header.serializeBinaryToWriter);
  }
  f = message.getLastCommitInfo();
  if (f != null) {
    writer.writeMessage(3, f, proto.abci_vendor.LastCommitInfo.serializeBinaryToWriter);
  }
  f = message.getByzantineValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(4, f, proto.abci_vendor.Evidence.serializeBinaryToWriter);
  }
};

/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.RequestBeginBlock.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.abci_vendor.RequestBeginBlock.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.RequestBeginBlock.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.RequestBeginBlock} returns this
 */
proto.abci_vendor.RequestBeginBlock.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional Header header = 2;
 * @return {?proto.abci_vendor.Header}
 */
proto.abci_vendor.RequestBeginBlock.prototype.getHeader = function() {
  return /** @type{?proto.abci_vendor.Header} */ (jspb.Message.getWrapperField(this, proto.abci_vendor.Header, 2));
};

/**
 * @param {?proto.abci_vendor.Header|undefined} value
 * @return {!proto.abci_vendor.RequestBeginBlock} returns this
 */
proto.abci_vendor.RequestBeginBlock.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.abci_vendor.RequestBeginBlock} returns this
 */
proto.abci_vendor.RequestBeginBlock.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.abci_vendor.RequestBeginBlock.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional LastCommitInfo last_commit_info = 3;
 * @return {?proto.abci_vendor.LastCommitInfo}
 */
proto.abci_vendor.RequestBeginBlock.prototype.getLastCommitInfo = function() {
  return /** @type{?proto.abci_vendor.LastCommitInfo} */ (jspb.Message.getWrapperField(
    this,
    proto.abci_vendor.LastCommitInfo,
    3
  ));
};

/**
 * @param {?proto.abci_vendor.LastCommitInfo|undefined} value
 * @return {!proto.abci_vendor.RequestBeginBlock} returns this
 */
proto.abci_vendor.RequestBeginBlock.prototype.setLastCommitInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.abci_vendor.RequestBeginBlock} returns this
 */
proto.abci_vendor.RequestBeginBlock.prototype.clearLastCommitInfo = function() {
  return this.setLastCommitInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.abci_vendor.RequestBeginBlock.prototype.hasLastCommitInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * repeated Evidence byzantine_validators = 4;
 * @return {!Array<!proto.abci_vendor.Evidence>}
 */
proto.abci_vendor.RequestBeginBlock.prototype.getByzantineValidatorsList = function() {
  return /** @type{!Array<!proto.abci_vendor.Evidence>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.abci_vendor.Evidence,
    4
  ));
};

/**
 * @param {!Array<!proto.abci_vendor.Evidence>} value
 * @return {!proto.abci_vendor.RequestBeginBlock} returns this
 */
proto.abci_vendor.RequestBeginBlock.prototype.setByzantineValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!proto.abci_vendor.Evidence=} opt_value
 * @param {number=} opt_index
 * @return {!proto.abci_vendor.Evidence}
 */
proto.abci_vendor.RequestBeginBlock.prototype.addByzantineValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.abci_vendor.Evidence, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.abci_vendor.RequestBeginBlock} returns this
 */
proto.abci_vendor.RequestBeginBlock.prototype.clearByzantineValidatorsList = function() {
  return this.setByzantineValidatorsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.RequestEndBlock.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.RequestEndBlock.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.RequestEndBlock} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.RequestEndBlock.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        height: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.RequestEndBlock}
 */
proto.abci_vendor.RequestEndBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.RequestEndBlock();
  return proto.abci_vendor.RequestEndBlock.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.RequestEndBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.RequestEndBlock}
 */
proto.abci_vendor.RequestEndBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setHeight(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.RequestEndBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.RequestEndBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.RequestEndBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.RequestEndBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
};

/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.abci_vendor.RequestEndBlock.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.RequestEndBlock} returns this
 */
proto.abci_vendor.RequestEndBlock.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.abci_vendor.ResponseBeginBlock.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.ResponseBeginBlock.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.ResponseBeginBlock.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.ResponseBeginBlock} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.ResponseBeginBlock.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        tagsList: jspb.Message.toObjectList(msg.getTagsList(), proto.abci_vendor.KVPair.toObject, includeInstance),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.ResponseBeginBlock}
 */
proto.abci_vendor.ResponseBeginBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.ResponseBeginBlock();
  return proto.abci_vendor.ResponseBeginBlock.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.ResponseBeginBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.ResponseBeginBlock}
 */
proto.abci_vendor.ResponseBeginBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.abci_vendor.KVPair();
        reader.readMessage(value, proto.abci_vendor.KVPair.deserializeBinaryFromReader);
        msg.addTags(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.ResponseBeginBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.ResponseBeginBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.ResponseBeginBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.ResponseBeginBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.abci_vendor.KVPair.serializeBinaryToWriter);
  }
};

/**
 * repeated KVPair tags = 1;
 * @return {!Array<!proto.abci_vendor.KVPair>}
 */
proto.abci_vendor.ResponseBeginBlock.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.abci_vendor.KVPair>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.abci_vendor.KVPair,
    1
  ));
};

/**
 * @param {!Array<!proto.abci_vendor.KVPair>} value
 * @return {!proto.abci_vendor.ResponseBeginBlock} returns this
 */
proto.abci_vendor.ResponseBeginBlock.prototype.setTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.abci_vendor.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.abci_vendor.KVPair}
 */
proto.abci_vendor.ResponseBeginBlock.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.abci_vendor.KVPair, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.abci_vendor.ResponseBeginBlock} returns this
 */
proto.abci_vendor.ResponseBeginBlock.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.abci_vendor.ResponseEndBlock.repeatedFields_ = [1, 3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.ResponseEndBlock.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.ResponseEndBlock.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.ResponseEndBlock} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.ResponseEndBlock.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        validatorUpdatesList: jspb.Message.toObjectList(
          msg.getValidatorUpdatesList(),
          proto.abci_vendor.ValidatorUpdate.toObject,
          includeInstance
        ),
        consensusParamUpdates:
          (f = msg.getConsensusParamUpdates()) && proto.abci_vendor.ConsensusParams.toObject(includeInstance, f),
        tagsList: jspb.Message.toObjectList(msg.getTagsList(), proto.abci_vendor.KVPair.toObject, includeInstance),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.ResponseEndBlock}
 */
proto.abci_vendor.ResponseEndBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.ResponseEndBlock();
  return proto.abci_vendor.ResponseEndBlock.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.ResponseEndBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.ResponseEndBlock}
 */
proto.abci_vendor.ResponseEndBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.abci_vendor.ValidatorUpdate();
        reader.readMessage(value, proto.abci_vendor.ValidatorUpdate.deserializeBinaryFromReader);
        msg.addValidatorUpdates(value);
        break;
      case 2:
        var value = new proto.abci_vendor.ConsensusParams();
        reader.readMessage(value, proto.abci_vendor.ConsensusParams.deserializeBinaryFromReader);
        msg.setConsensusParamUpdates(value);
        break;
      case 3:
        var value = new proto.abci_vendor.KVPair();
        reader.readMessage(value, proto.abci_vendor.KVPair.deserializeBinaryFromReader);
        msg.addTags(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.ResponseEndBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.ResponseEndBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.ResponseEndBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.ResponseEndBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidatorUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.abci_vendor.ValidatorUpdate.serializeBinaryToWriter);
  }
  f = message.getConsensusParamUpdates();
  if (f != null) {
    writer.writeMessage(2, f, proto.abci_vendor.ConsensusParams.serializeBinaryToWriter);
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, proto.abci_vendor.KVPair.serializeBinaryToWriter);
  }
};

/**
 * repeated ValidatorUpdate validator_updates = 1;
 * @return {!Array<!proto.abci_vendor.ValidatorUpdate>}
 */
proto.abci_vendor.ResponseEndBlock.prototype.getValidatorUpdatesList = function() {
  return /** @type{!Array<!proto.abci_vendor.ValidatorUpdate>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.abci_vendor.ValidatorUpdate,
    1
  ));
};

/**
 * @param {!Array<!proto.abci_vendor.ValidatorUpdate>} value
 * @return {!proto.abci_vendor.ResponseEndBlock} returns this
 */
proto.abci_vendor.ResponseEndBlock.prototype.setValidatorUpdatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.abci_vendor.ValidatorUpdate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.abci_vendor.ValidatorUpdate}
 */
proto.abci_vendor.ResponseEndBlock.prototype.addValidatorUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.abci_vendor.ValidatorUpdate, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.abci_vendor.ResponseEndBlock} returns this
 */
proto.abci_vendor.ResponseEndBlock.prototype.clearValidatorUpdatesList = function() {
  return this.setValidatorUpdatesList([]);
};

/**
 * optional ConsensusParams consensus_param_updates = 2;
 * @return {?proto.abci_vendor.ConsensusParams}
 */
proto.abci_vendor.ResponseEndBlock.prototype.getConsensusParamUpdates = function() {
  return /** @type{?proto.abci_vendor.ConsensusParams} */ (jspb.Message.getWrapperField(
    this,
    proto.abci_vendor.ConsensusParams,
    2
  ));
};

/**
 * @param {?proto.abci_vendor.ConsensusParams|undefined} value
 * @return {!proto.abci_vendor.ResponseEndBlock} returns this
 */
proto.abci_vendor.ResponseEndBlock.prototype.setConsensusParamUpdates = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.abci_vendor.ResponseEndBlock} returns this
 */
proto.abci_vendor.ResponseEndBlock.prototype.clearConsensusParamUpdates = function() {
  return this.setConsensusParamUpdates(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.abci_vendor.ResponseEndBlock.prototype.hasConsensusParamUpdates = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * repeated KVPair tags = 3;
 * @return {!Array<!proto.abci_vendor.KVPair>}
 */
proto.abci_vendor.ResponseEndBlock.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.abci_vendor.KVPair>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.abci_vendor.KVPair,
    3
  ));
};

/**
 * @param {!Array<!proto.abci_vendor.KVPair>} value
 * @return {!proto.abci_vendor.ResponseEndBlock} returns this
 */
proto.abci_vendor.ResponseEndBlock.prototype.setTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.abci_vendor.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.abci_vendor.KVPair}
 */
proto.abci_vendor.ResponseEndBlock.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.abci_vendor.KVPair, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.abci_vendor.ResponseEndBlock} returns this
 */
proto.abci_vendor.ResponseEndBlock.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.abci_vendor.ResponseCheckTx.repeatedFields_ = [7];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.ResponseCheckTx.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.ResponseCheckTx.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.ResponseCheckTx} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.ResponseCheckTx.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        data: msg.getData(),
        log: jspb.Message.getFieldWithDefault(msg, 3, ''),
        info: jspb.Message.getFieldWithDefault(msg, 4, ''),
        gasWanted: jspb.Message.getFieldWithDefault(msg, 5, 0),
        gasUsed: jspb.Message.getFieldWithDefault(msg, 6, 0),
        tagsList: jspb.Message.toObjectList(msg.getTagsList(), proto.abci_vendor.KVPair.toObject, includeInstance),
        codespace: jspb.Message.getFieldWithDefault(msg, 8, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.ResponseCheckTx}
 */
proto.abci_vendor.ResponseCheckTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.ResponseCheckTx();
  return proto.abci_vendor.ResponseCheckTx.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.ResponseCheckTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.ResponseCheckTx}
 */
proto.abci_vendor.ResponseCheckTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setLog(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setInfo(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setGasWanted(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setGasUsed(value);
        break;
      case 7:
        var value = new proto.abci_vendor.KVPair();
        reader.readMessage(value, proto.abci_vendor.KVPair.deserializeBinaryFromReader);
        msg.addTags(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.setCodespace(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.ResponseCheckTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.ResponseCheckTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.ResponseCheckTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.ResponseCheckTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getLog();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getGasWanted();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeInt64(6, f);
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(7, f, proto.abci_vendor.KVPair.serializeBinaryToWriter);
  }
  f = message.getCodespace();
  if (f.length > 0) {
    writer.writeString(8, f);
  }
};

/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.abci_vendor.ResponseCheckTx.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.ResponseCheckTx} returns this
 */
proto.abci_vendor.ResponseCheckTx.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.ResponseCheckTx.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.abci_vendor.ResponseCheckTx.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.ResponseCheckTx.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.ResponseCheckTx} returns this
 */
proto.abci_vendor.ResponseCheckTx.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional string log = 3;
 * @return {string}
 */
proto.abci_vendor.ResponseCheckTx.prototype.getLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.abci_vendor.ResponseCheckTx} returns this
 */
proto.abci_vendor.ResponseCheckTx.prototype.setLog = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string info = 4;
 * @return {string}
 */
proto.abci_vendor.ResponseCheckTx.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.abci_vendor.ResponseCheckTx} returns this
 */
proto.abci_vendor.ResponseCheckTx.prototype.setInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional int64 gas_wanted = 5;
 * @return {number}
 */
proto.abci_vendor.ResponseCheckTx.prototype.getGasWanted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.ResponseCheckTx} returns this
 */
proto.abci_vendor.ResponseCheckTx.prototype.setGasWanted = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int64 gas_used = 6;
 * @return {number}
 */
proto.abci_vendor.ResponseCheckTx.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.ResponseCheckTx} returns this
 */
proto.abci_vendor.ResponseCheckTx.prototype.setGasUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * repeated KVPair tags = 7;
 * @return {!Array<!proto.abci_vendor.KVPair>}
 */
proto.abci_vendor.ResponseCheckTx.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.abci_vendor.KVPair>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.abci_vendor.KVPair,
    7
  ));
};

/**
 * @param {!Array<!proto.abci_vendor.KVPair>} value
 * @return {!proto.abci_vendor.ResponseCheckTx} returns this
 */
proto.abci_vendor.ResponseCheckTx.prototype.setTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};

/**
 * @param {!proto.abci_vendor.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.abci_vendor.KVPair}
 */
proto.abci_vendor.ResponseCheckTx.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.abci_vendor.KVPair, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.abci_vendor.ResponseCheckTx} returns this
 */
proto.abci_vendor.ResponseCheckTx.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};

/**
 * optional string codespace = 8;
 * @return {string}
 */
proto.abci_vendor.ResponseCheckTx.prototype.getCodespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''));
};

/**
 * @param {string} value
 * @return {!proto.abci_vendor.ResponseCheckTx} returns this
 */
proto.abci_vendor.ResponseCheckTx.prototype.setCodespace = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.abci_vendor.ResponseDeliverTx.repeatedFields_ = [7];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.abci_vendor.ResponseDeliverTx.prototype.toObject = function(opt_includeInstance) {
    return proto.abci_vendor.ResponseDeliverTx.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.abci_vendor.ResponseDeliverTx} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.abci_vendor.ResponseDeliverTx.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        data: msg.getData(),
        log: jspb.Message.getFieldWithDefault(msg, 3, ''),
        info: jspb.Message.getFieldWithDefault(msg, 4, ''),
        gasWanted: jspb.Message.getFieldWithDefault(msg, 5, 0),
        gasUsed: jspb.Message.getFieldWithDefault(msg, 6, 0),
        tagsList: jspb.Message.toObjectList(msg.getTagsList(), proto.abci_vendor.KVPair.toObject, includeInstance),
        codespace: jspb.Message.getFieldWithDefault(msg, 8, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.abci_vendor.ResponseDeliverTx}
 */
proto.abci_vendor.ResponseDeliverTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.abci_vendor.ResponseDeliverTx();
  return proto.abci_vendor.ResponseDeliverTx.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.abci_vendor.ResponseDeliverTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.abci_vendor.ResponseDeliverTx}
 */
proto.abci_vendor.ResponseDeliverTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setLog(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setInfo(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setGasWanted(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setGasUsed(value);
        break;
      case 7:
        var value = new proto.abci_vendor.KVPair();
        reader.readMessage(value, proto.abci_vendor.KVPair.deserializeBinaryFromReader);
        msg.addTags(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.setCodespace(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.abci_vendor.ResponseDeliverTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.abci_vendor.ResponseDeliverTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.abci_vendor.ResponseDeliverTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.abci_vendor.ResponseDeliverTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getLog();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getGasWanted();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeInt64(6, f);
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(7, f, proto.abci_vendor.KVPair.serializeBinaryToWriter);
  }
  f = message.getCodespace();
  if (f.length > 0) {
    writer.writeString(8, f);
  }
};

/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.abci_vendor.ResponseDeliverTx.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.ResponseDeliverTx} returns this
 */
proto.abci_vendor.ResponseDeliverTx.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.abci_vendor.ResponseDeliverTx.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.abci_vendor.ResponseDeliverTx.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.abci_vendor.ResponseDeliverTx.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.abci_vendor.ResponseDeliverTx} returns this
 */
proto.abci_vendor.ResponseDeliverTx.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional string log = 3;
 * @return {string}
 */
proto.abci_vendor.ResponseDeliverTx.prototype.getLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.abci_vendor.ResponseDeliverTx} returns this
 */
proto.abci_vendor.ResponseDeliverTx.prototype.setLog = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string info = 4;
 * @return {string}
 */
proto.abci_vendor.ResponseDeliverTx.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.abci_vendor.ResponseDeliverTx} returns this
 */
proto.abci_vendor.ResponseDeliverTx.prototype.setInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional int64 gas_wanted = 5;
 * @return {number}
 */
proto.abci_vendor.ResponseDeliverTx.prototype.getGasWanted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.ResponseDeliverTx} returns this
 */
proto.abci_vendor.ResponseDeliverTx.prototype.setGasWanted = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int64 gas_used = 6;
 * @return {number}
 */
proto.abci_vendor.ResponseDeliverTx.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.abci_vendor.ResponseDeliverTx} returns this
 */
proto.abci_vendor.ResponseDeliverTx.prototype.setGasUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * repeated KVPair tags = 7;
 * @return {!Array<!proto.abci_vendor.KVPair>}
 */
proto.abci_vendor.ResponseDeliverTx.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.abci_vendor.KVPair>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.abci_vendor.KVPair,
    7
  ));
};

/**
 * @param {!Array<!proto.abci_vendor.KVPair>} value
 * @return {!proto.abci_vendor.ResponseDeliverTx} returns this
 */
proto.abci_vendor.ResponseDeliverTx.prototype.setTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};

/**
 * @param {!proto.abci_vendor.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.abci_vendor.KVPair}
 */
proto.abci_vendor.ResponseDeliverTx.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.abci_vendor.KVPair, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.abci_vendor.ResponseDeliverTx} returns this
 */
proto.abci_vendor.ResponseDeliverTx.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};

/**
 * optional string codespace = 8;
 * @return {string}
 */
proto.abci_vendor.ResponseDeliverTx.prototype.getCodespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''));
};

/**
 * @param {string} value
 * @return {!proto.abci_vendor.ResponseDeliverTx} returns this
 */
proto.abci_vendor.ResponseDeliverTx.prototype.setCodespace = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};

goog.object.extend(exports, proto.abci_vendor);
