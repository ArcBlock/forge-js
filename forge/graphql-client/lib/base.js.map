{"version":3,"sources":["../src/base.js"],"names":["BaseClient","require","jsonpack","md5","GraphQLClientBase","constructor","config","httpEndpoint","chainId","endpoint","dataSource","socketEndpoint","_getSocketEndpoint","enableQuery","enableSubscription","enableMutation","maxQueryDepth","_endpoint","_chainId","replace","indexOf","_getSchema","unpack","packedSchema","_getIgnoreFields","name","ignoreList","push","_getQueryId","query","module","exports"],"mappings":";;wDAAA;;;;AAGA,MAAMA,aAAaC,QAAQ,oBAAR,CAAnB;AACA,MAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,MAAME,MAAMF,QAAQ,aAAR,CAAZ;;AAEA;;;;;;;AAOA,MAAMG,iBAAN,SAAgCJ,UAAhC,CAA2C;AACzCK,cAAYC,SAAS,2BAArB,EAAkD;AAChD,QAAIC,eAAe,EAAnB;AACA,QAAIC,UAAU,EAAd;AACA,QAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;AAC9BC,qBAAeD,MAAf;AACD,KAFD,MAEO;AACLC,qBAAeD,OAAOG,QAAtB;AACA;AACAD,gBAAUF,OAAOE,OAAjB;AACD;;AAED,UAAM;AACJE,kBAAY,OADR;AAEJH,kBAFI;AAGJI,sBAAgB,MAAM,KAAKC,kBAAL,CAAwBL,YAAxB,CAHlB;AAIJM,mBAAa,IAJT;AAKJC,0BAAoB,IALhB;AAMJC,sBAAgB,IANZ;AAOJC,qBAAe;AAPX,KAAN;;AAUA,SAAKC,SAAL,GAAiBV,YAAjB;AACA,SAAKW,QAAL,GAAgBV,OAAhB;AACD;;AAEDI,qBAAmBH,QAAnB,EAA6B;AAC3B,QAAIE,iBAAiBF,SAASU,OAAT,CAAiB,aAAjB,EAAgC,OAAhC,CAArB;AACA,QAAIV,SAASW,OAAT,CAAiB,UAAjB,MAAiC,CAArC,EAAwC;AACtCT,uBAAiBA,eAAeQ,OAAf,CAAuB,OAAvB,EAAgC,QAAhC,CAAjB;AACD;;AAED,WAAQ,GAAER,cAAe,SAAzB;AACD;;AAEDU,eAAa;AACX,WAAOnB,SAASoB,MAAT,CAAgBC,YAAhB,CAAP;AACD;;AAEDC,mBAAiB,EAAEC,IAAF,EAAjB,EAA2B;AACzB,UAAMC,aAAa,CAAC,cAAD,EAAiB,kBAAjB,CAAnB;AACA,QAAID,SAAS,kBAAb,EAAiC;AAC/BC,iBAAWC,IAAX,CAAgB,QAAhB;AACD;;AAED,WAAOD,UAAP;AACD;;AAEDE,cAAYC,KAAZ,EAAmB;AACjB,WAAO1B,IAAI0B,KAAJ,CAAP;AACD;AAlDwC;;AAqD3CC,OAAOC,OAAP,GAAiB3B,iBAAjB","file":"base.js","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport packedSchema from './schema/graphql.txt';\n\nconst BaseClient = require('@arcblock/sdk-util');\nconst jsonpack = require('jsonpack');\nconst md5 = require('blueimp-md5');\n\n/**\n * Provides a readonly client to forge\n * Its recommended to use this version in browser to get smaller bundle size\n *\n * @class GraphQLClientBase\n * @extends {BaseClient}\n */\nclass GraphQLClientBase extends BaseClient {\n  constructor(config = 'http://localhost:8210/api') {\n    let httpEndpoint = '';\n    let chainId = '';\n    if (typeof config === 'string') {\n      httpEndpoint = config;\n    } else {\n      httpEndpoint = config.endpoint;\n      // eslint-disable-next-line prefer-destructuring\n      chainId = config.chainId;\n    }\n\n    super({\n      dataSource: 'forge',\n      httpEndpoint,\n      socketEndpoint: () => this._getSocketEndpoint(httpEndpoint),\n      enableQuery: true,\n      enableSubscription: true,\n      enableMutation: true,\n      maxQueryDepth: 6,\n    });\n\n    this._endpoint = httpEndpoint;\n    this._chainId = chainId;\n  }\n\n  _getSocketEndpoint(endpoint) {\n    let socketEndpoint = endpoint.replace(/https?:\\/\\//, 'ws://');\n    if (endpoint.indexOf('https://') === 0) {\n      socketEndpoint = socketEndpoint.replace('ws://', 'wss://');\n    }\n\n    return `${socketEndpoint}/socket`;\n  }\n\n  _getSchema() {\n    return jsonpack.unpack(packedSchema);\n  }\n\n  _getIgnoreFields({ name }) {\n    const ignoreList = [/\\.genesisTx$/, /\\.renaissanceTx$/];\n    if (name !== 'getProtocolState') {\n      ignoreList.push(/\\.itx$/);\n    }\n\n    return ignoreList;\n  }\n\n  _getQueryId(query) {\n    return md5(query);\n  }\n}\n\nmodule.exports = GraphQLClientBase;\n"]}