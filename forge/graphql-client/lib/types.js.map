{"version":3,"sources":["../src/types.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;;AAWA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;AAYA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;AASA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;AASA;;;;;;;;;;;;AAYA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;AASA;;;;;;;;;;;;AAYA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;AASA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;AAeA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;;;;AAYA;;;;;;;;;;;AAWA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;;;;;AAaA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;AAetCA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;AASA;;;;;;;;;;;;AAYA;;;;;;;;AAQA;;;;;;;;;;;;;;AAcA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;AAWA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;AAUA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;;;;;;;AAaA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;AAgfile":"types.js","sourcesContent":["/**\n * List all query method names\n *\n * @name GraphQLClient#getQueries\n * @function\n * @memberof GraphQLClient\n * @returns {Array<string>} method name list\n * @example\n * const methods = client.getQueries();\n * // list of query methods\n * // [\n * //   getAccountState,\n * //   getAssetState,\n * //   getBlock,\n * //   getBlocks,\n * //   getChainInfo,\n * //   getConfig,\n * //   getDelegateState,\n * //   getForgeState,\n * //   getForgeStats,\n * //   getForgeStatsByDay,\n * //   getForgeStatsByHour,\n * //   getHealthStatus,\n * //   getNetInfo,\n * //   getNodeInfo,\n * //   getProtocolState,\n * //   getProtocols,\n * //   getSimulatorStatus,\n * //   getStakeState,\n * //   getSwapState,\n * //   getTetherState,\n * //   getTx,\n * //   getUnconfirmedTxs,\n * //   getValidatorsInfo,\n * //   listAssetTransactions,\n * //   listAssets,\n * //   listBlocks,\n * //   listStakes,\n * //   listSwap,\n * //   listTethers,\n * //   listTopAccounts,\n * //   listTransactions,\n * // ]\n */\n\n/**\n * List all mutation method names\n *\n * @name GraphQLClient#getMutations\n * @function\n * @memberof GraphQLClient\n * @returns {Array<string>} method name list\n * @example\n * const methods = client.getMutations();\n * // list of mutation methods\n * // [\n * //   sendTx,\n * //   startSimulator,\n * //   stopSimulator,\n * //   unsubscribe,\n * // ]\n */\n\n/**\n * List all subscription method names\n *\n * @name GraphQLClient#getSubscription\n * @function\n * @memberof GraphQLClient\n * @returns {Array<string>} method name list\n * @example\n * const methods = client.getSubscriptions();\n * // list of subscription methods\n * // [\n * //   subscribe,\n * // ]\n */\n\n/**\n * Send raw graphql query to forge graphql endpoint\n *\n * @name GraphQLClient#doRawQuery\n * @function\n * @memberof GraphQLClient\n * @param {string} query - graphql query string\n * @returns {Promise} usually axios response data\n * @example\n * const res = await client.doRawQuery('\n *   getChainInfo {\n *     code\n *     info {\n *       address\n *       blockHeight\n *     }\n *   }\n * ');\n *\n * // Then\n * // res.getChainInfo.code\n * // res.getChainInfo.info\n */\n\n/**\n * Send raw graphql subscription to forge graphql endpoint\n *\n * @name GraphQLClient#doRawSubscription\n * @function\n * @memberof GraphQLClient\n * @param {string} query - graphql query string\n * @returns {Promise} usually axios response data\n */\n\n/**\n * Structure of GraphQLClient.WalletObject\n *\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.WalletObject\n * @property {string} publicKey\n * @property {string} secretKey\n * @property {GraphQLClient~WalletTypeObject} type\n */\n\n/**\n * Structure of GraphQLClient.WalletTypeObject\n *\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.WalletTypeObject\n * @property {number} pk\n * @property {number} role\n * @property {number} hash\n * @property {number} address - defaults to base58btc\n */\n\n/**\n * Structure of GraphQLClient.TxEncodeOutput\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TxEncodeOutput\n * @property {object} object - the transaction object, human readable\n * @property {buffer} buffer - the transaction binary presentation, can be used to signing, encoding to other formats\n */\n\n/**\n * Structure of GraphQLClient.AddressFilter\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AddressFilter\n * @property {...GraphQLClient.Direction} direction\n * @property {string} receiver\n * @property {string} sender\n */\n\n/**\n * Structure of GraphQLClient.PageInput\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PageInput\n * @property {string} cursor\n * @property {Array<...GraphQLClient.PageOrder>} order\n * @property {number} size\n */\n\n/**\n * Structure of GraphQLClient.PageOrder\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PageOrder\n * @property {string} field\n * @property {string} type\n */\n\n/**\n * Structure of GraphQLClient.RangeFilter\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RangeFilter\n * @property {string} from\n * @property {string} to\n */\n\n/**\n * Structure of GraphQLClient.TimeFilter\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TimeFilter\n * @property {string} endDateTime\n * @property {string} startDateTime\n */\n\n/**\n * Structure of GraphQLClient.TypeFilter\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TypeFilter\n * @property {Array<...GraphQLClient.string>} types\n */\n\n/**\n * Structure of GraphQLClient.ValidityFilter\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ValidityFilter\n * @property {...GraphQLClient.Validity} validity\n */\n\n/**\n * Structure of GraphQLClient.AbciServerStatus\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AbciServerStatus\n * @property {string} abciConsensus\n * @property {string} abciInfo\n */\n\n/**\n * Structure of GraphQLClient.AccountConfig\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AccountConfig\n * @property {string} address\n * @property {string} balance\n * @property {string} pk\n */\n\n/**\n * Structure of GraphQLClient.AccountConfigEntry\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AccountConfigEntry\n * @property {string} key\n * @property {...GraphQLClient.AccountConfig} value\n */\n\n/**\n * Structure of GraphQLClient.AccountMigrateTx\n *\n * Checkout the following snippet for the format of AccountMigrateTx:\n * ```json\n{\n  \"address\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"pk\": \"abc\",\n  \"type\": {\n    \"address\": \"BASE16\",\n    \"hash\": \"KECCAK\",\n    \"pk\": \"ED25519\",\n    \"role\": \"ROLE_ACCOUNT\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AccountMigrateTx\n * @property {string} address\n * @property {...GraphQLClient.Any} data\n * @property {string} pk\n * @property {...GraphQLClient.WalletType} type\n */\n\n/**\n * Structure of GraphQLClient.AccountState\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AccountState\n * @property {string} address\n * @property {string} balance\n * @property {...GraphQLClient.StateContext} context\n * @property {...GraphQLClient.Any} data\n * @property {string} issuer\n * @property {Array<...GraphQLClient.string>} migratedFrom\n * @property {Array<...GraphQLClient.string>} migratedTo\n * @property {string} moniker\n * @property {string} nonce\n * @property {string} numAssets\n * @property {string} numTxs\n * @property {string} pk\n * @property {...GraphQLClient.PokeInfo} poke\n * @property {...GraphQLClient.StakeContext} stake\n * @property {...GraphQLClient.WalletType} type\n */\n\n/**\n * Structure of GraphQLClient.AcquireAssetTx\n *\n * Checkout the following snippet for the format of AcquireAssetTx:\n * ```json\n{\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"specs\": [\n    {\n      \"address\": \"abc\",\n      \"data\": \"abc\"\n    }\n  ],\n  \"to\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AcquireAssetTx\n * @property {...GraphQLClient.Any} data\n * @property {Array<...GraphQLClient.AssetSpec>} specs\n * @property {string} to\n */\n\n/**\n * Structure of GraphQLClient.Any\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.Any\n * @property {string} typeUrl\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.ApproveTetherTx\n *\n * Checkout the following snippet for the format of ApproveTetherTx:\n * ```json\n{\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"withdraw\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ApproveTetherTx\n * @property {...GraphQLClient.Any} data\n * @property {string} withdraw\n */\n\n/**\n * Structure of GraphQLClient.AssetSpec\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AssetSpec\n * @property {string} address\n * @property {string} data\n */\n\n/**\n * Structure of GraphQLClient.AssetState\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AssetState\n * @property {string} address\n * @property {string} consumedTime\n * @property {...GraphQLClient.StateContext} context\n * @property {...GraphQLClient.Any} data\n * @property {string} issuer\n * @property {string} moniker\n * @property {string} owner\n * @property {string} parent\n * @property {boolean} readonly\n * @property {...GraphQLClient.StakeContext} stake\n * @property {boolean} transferrable\n * @property {number} ttl\n */\n\n/**\n * Structure of GraphQLClient.BlockId\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.BlockId\n * @property {string} hash\n * @property {...GraphQLClient.PartSetHeader} partsHeader\n */\n\n/**\n * Structure of GraphQLClient.BlockInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.BlockInfo\n * @property {string} appHash\n * @property {string} consensusHash\n * @property {string} dataHash\n * @property {string} evidenceHash\n * @property {string} height\n * @property {Array<...GraphQLClient.TransactionInfo>} invalidTxs\n * @property {Array<...GraphQLClient.string>} invalidTxsHashes\n * @property {...GraphQLClient.BlockId} lastBlockId\n * @property {string} lastCommitHash\n * @property {string} lastResultsHash\n * @property {string} nextValidatorsHash\n * @property {number} numTxs\n * @property {string} proposer\n * @property {string} time\n * @property {string} totalTxs\n * @property {Array<...GraphQLClient.TransactionInfo>} txs\n * @property {Array<...GraphQLClient.string>} txsHashes\n * @property {string} validatorsHash\n * @property {...GraphQLClient.Version} version\n */\n\n/**\n * Structure of GraphQLClient.BlockInfoSimple\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.BlockInfoSimple\n * @property {string} appHash\n * @property {string} consensusHash\n * @property {string} dataHash\n * @property {string} evidenceHash\n * @property {string} height\n * @property {Array<...GraphQLClient.string>} invalidTxsHashes\n * @property {...GraphQLClient.BlockId} lastBlockId\n * @property {string} lastCommitHash\n * @property {string} lastResultsHash\n * @property {string} nextValidatorsHash\n * @property {number} numTxs\n * @property {string} proposer\n * @property {string} time\n * @property {string} totalTxs\n * @property {Array<...GraphQLClient.string>} txsHashes\n * @property {string} validatorsHash\n * @property {...GraphQLClient.Version} version\n */\n\n/**\n * Structure of GraphQLClient.ChainInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ChainInfo\n * @property {string} address\n * @property {string} appHash\n * @property {string} blockHash\n * @property {string} blockHeight\n * @property {string} blockTime\n * @property {string} consensusVersion\n * @property {Array<...GraphQLClient.ForgeAppsVersionEntry>} forgeAppsVersion\n * @property {string} id\n * @property {string} moniker\n * @property {string} network\n * @property {Array<...GraphQLClient.string>} supportedTxs\n * @property {boolean} synced\n * @property {string} totalTxs\n * @property {string} version\n * @property {string} votingPower\n */\n\n/**\n * Structure of GraphQLClient.CircularQueue\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.CircularQueue\n * @property {boolean} circular\n * @property {boolean} fifo\n * @property {Array<...GraphQLClient.string>} items\n * @property {number} maxItems\n * @property {string} typeUrl\n */\n\n/**\n * Structure of GraphQLClient.CodeInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.CodeInfo\n * @property {string} binary\n * @property {string} checksum\n */\n\n/**\n * Structure of GraphQLClient.ConsensusParams\n *\n * Checkout the following snippet for the format of ConsensusParams:\n * ```json\n{\n  \"maxBytes\": \"abc\",\n  \"maxCandidates\": 123,\n  \"maxGas\": \"abc\",\n  \"maxValidators\": 123,\n  \"paramChanged\": true,\n  \"pubKeyTypes\": [\n    \"abc\"\n  ],\n  \"validatorChanged\": true,\n  \"validators\": [\n    {\n      \"address\": \"abc\",\n      \"power\": \"abc\"\n    }\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ConsensusParams\n * @property {string} maxBytes\n * @property {number} maxCandidates\n * @property {string} maxGas\n * @property {number} maxValidators\n * @property {boolean} paramChanged\n * @property {Array<...GraphQLClient.string>} pubKeyTypes\n * @property {boolean} validatorChanged\n * @property {Array<...GraphQLClient.Validator>} validators\n */\n\n/**\n * Structure of GraphQLClient.ConsensusStatus\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ConsensusStatus\n * @property {string} blockHeight\n * @property {boolean} health\n * @property {boolean} synced\n */\n\n/**\n * Structure of GraphQLClient.ConsensusUpgradeTx\n *\n * Checkout the following snippet for the format of ConsensusUpgradeTx:\n * ```json\n{\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"maxBytes\": \"abc\",\n  \"maxCandidates\": 123,\n  \"maxGas\": \"abc\",\n  \"maxValidators\": 123,\n  \"validators\": [\n    {\n      \"address\": \"abc\",\n      \"power\": \"abc\"\n    }\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ConsensusUpgradeTx\n * @property {...GraphQLClient.Any} data\n * @property {string} maxBytes\n * @property {number} maxCandidates\n * @property {string} maxGas\n * @property {number} maxValidators\n * @property {Array<...GraphQLClient.Validator>} validators\n */\n\n/**\n * Structure of GraphQLClient.ConsumeAssetTx\n *\n * Checkout the following snippet for the format of ConsumeAssetTx:\n * ```json\n{\n  \"address\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"issuer\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ConsumeAssetTx\n * @property {string} address\n * @property {...GraphQLClient.Any} data\n * @property {string} issuer\n */\n\n/**\n * Structure of GraphQLClient.CoreProtocol\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.CoreProtocol\n * @property {string} address\n * @property {string} name\n */\n\n/**\n * Structure of GraphQLClient.CreateAssetTx\n *\n * Checkout the following snippet for the format of CreateAssetTx:\n * ```json\n{\n  \"address\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"moniker\": \"abc\",\n  \"parent\": \"abc\",\n  \"readonly\": true,\n  \"transferrable\": true,\n  \"ttl\": 123\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.CreateAssetTx\n * @property {string} address\n * @property {...GraphQLClient.Any} data\n * @property {string} moniker\n * @property {string} parent\n * @property {boolean} readonly\n * @property {boolean} transferrable\n * @property {number} ttl\n */\n\n/**\n * Structure of GraphQLClient.DeclareConfig\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DeclareConfig\n * @property {number} hierarchy\n * @property {boolean} restricted\n */\n\n/**\n * Structure of GraphQLClient.DeclareFileTx\n *\n * Checkout the following snippet for the format of DeclareFileTx:\n * ```json\n{\n  \"hash\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DeclareFileTx\n * @property {string} hash\n */\n\n/**\n * Structure of GraphQLClient.DeclareTx\n *\n * Checkout the following snippet for the format of DeclareTx:\n * ```json\n{\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"issuer\": \"abc\",\n  \"moniker\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DeclareTx\n * @property {...GraphQLClient.Any} data\n * @property {string} issuer\n * @property {string} moniker\n */\n\n/**\n * Structure of GraphQLClient.DelegateConfig\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DelegateConfig\n * @property {number} deltaInterval\n * @property {Array<...GraphQLClient.string>} typeUrls\n */\n\n/**\n * Structure of GraphQLClient.DelegateOpState\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DelegateOpState\n * @property {string} balance\n * @property {string} balanceDelta\n * @property {string} numTxs\n * @property {string} numTxsDelta\n * @property {string} rule\n */\n\n/**\n * Structure of GraphQLClient.DelegateState\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DelegateState\n * @property {string} address\n * @property {...GraphQLClient.StateContext} context\n * @property {...GraphQLClient.Any} data\n * @property {Array<...GraphQLClient.OpsEntry>} ops\n */\n\n/**\n * Structure of GraphQLClient.DeployProtocolTx\n *\n * Checkout the following snippet for the format of DeployProtocolTx:\n * ```json\n{\n  \"address\": \"abc\",\n  \"code\": [\n    {\n      \"binary\": \"abc\",\n      \"checksum\": \"abc\"\n    }\n  ],\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"description\": \"abc\",\n  \"name\": \"abc\",\n  \"namespace\": \"abc\",\n  \"pipeline\": \"abc\",\n  \"proto\": \"abc\",\n  \"sources\": [\n    \"abc\"\n  ],\n  \"tags\": [\n    \"abc\"\n  ],\n  \"typeUrls\": [\n    {\n      \"module\": \"abc\",\n      \"url\": \"abc\"\n    }\n  ],\n  \"version\": 123\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DeployProtocolTx\n * @property {string} address\n * @property {Array<...GraphQLClient.CodeInfo>} code\n * @property {...GraphQLClient.Any} data\n * @property {string} description\n * @property {string} name\n * @property {string} namespace\n * @property {string} pipeline\n * @property {string} proto\n * @property {Array<...GraphQLClient.string>} sources\n * @property {Array<...GraphQLClient.string>} tags\n * @property {Array<...GraphQLClient.TypeUrls>} typeUrls\n * @property {number} version\n */\n\n/**\n * Structure of GraphQLClient.DepositTetherTx\n *\n * Checkout the following snippet for the format of DepositTetherTx:\n * ```json\n{\n  \"charge\": \"abc\",\n  \"commission\": \"abc\",\n  \"locktime\": \"2019-04-29T00:00:00.000Z\",\n  \"target\": \"abc\",\n  \"value\": \"abc\",\n  \"withdrawer\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DepositTetherTx\n * @property {string} charge\n * @property {string} commission\n * @property {string} locktime\n * @property {string} target\n * @property {string} value\n * @property {string} withdrawer\n */\n\n/**\n * Structure of GraphQLClient.DiskSpaceStatus\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DiskSpaceStatus\n * @property {string} forgeUsage\n * @property {string} total\n */\n\n/**\n * Structure of GraphQLClient.Evidence\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.Evidence\n * @property {string} chainId\n * @property {string} chainType\n * @property {string} hash\n * @property {string} originalTx\n * @property {string} receiverAddress\n */\n\n/**\n * Structure of GraphQLClient.ExchangeInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ExchangeInfo\n * @property {Array<...GraphQLClient.string>} assets\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.ExchangeTetherTx\n *\n * Checkout the following snippet for the format of ExchangeTetherTx:\n * ```json\n{\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"expiredAt\": \"2019-04-29T00:00:00.000Z\",\n  \"receiver\": {\n    \"assets\": [\n      \"abc\"\n    ],\n    \"deposit\": {\n      \"chainId\": \"abc\",\n      \"from\": \"abc\",\n      \"nonce\": \"abc\",\n      \"pk\": \"abc\",\n      \"signature\": \"abc\",\n      \"signatures\": [\n        {\n          \"data\": {\n            \"typeUrl\": \"abc\",\n            \"value\": \"abc\"\n          },\n          \"delegator\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signer\": \"abc\"\n        }\n      ]\n    },\n    \"value\": \"abc\"\n  },\n  \"sender\": {\n    \"assets\": [\n      \"abc\"\n    ],\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ExchangeTetherTx\n * @property {...GraphQLClient.Any} data\n * @property {string} expiredAt\n * @property {...GraphQLClient.TetherExchangeInfo} receiver\n * @property {...GraphQLClient.ExchangeInfo} sender\n */\n\n/**\n * Structure of GraphQLClient.ExchangeTx\n *\n * Checkout the following snippet for the format of ExchangeTx:\n * ```json\n{\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"expiredAt\": \"2019-04-29T00:00:00.000Z\",\n  \"receiver\": {\n    \"assets\": [\n      \"abc\"\n    ],\n    \"value\": \"abc\"\n  },\n  \"sender\": {\n    \"assets\": [\n      \"abc\"\n    ],\n    \"value\": \"abc\"\n  },\n  \"to\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ExchangeTx\n * @property {...GraphQLClient.Any} data\n * @property {string} expiredAt\n * @property {...GraphQLClient.ExchangeInfo} receiver\n * @property {...GraphQLClient.ExchangeInfo} sender\n * @property {string} to\n */\n\n/**\n * Structure of GraphQLClient.ExtraAccountMigrate\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ExtraAccountMigrate\n * @property {string} address\n */\n\n/**\n * Structure of GraphQLClient.ExtraCreateAsset\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ExtraCreateAsset\n * @property {string} asset\n */\n\n/**\n * Structure of GraphQLClient.ForgeAppsVersionEntry\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ForgeAppsVersionEntry\n * @property {string} key\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.ForgeState\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ForgeState\n * @property {Array<...GraphQLClient.AccountConfigEntry>} accountConfig\n * @property {string} address\n * @property {...GraphQLClient.ConsensusParams} consensus\n * @property {...GraphQLClient.Any} data\n * @property {Array<...GraphQLClient.GasEntry>} gas\n * @property {Array<...GraphQLClient.CoreProtocol>} protocols\n * @property {Array<...GraphQLClient.StakeSummaryEntry>} stakeSummary\n * @property {Array<...GraphQLClient.TasksEntry>} tasks\n * @property {...GraphQLClient.ForgeToken} token\n * @property {...GraphQLClient.TokenSwapConfig} tokenSwapConfig\n * @property {...GraphQLClient.TransactionConfig} txConfig\n * @property {...GraphQLClient.UpgradeInfo} upgradeInfo\n * @property {string} version\n */\n\n/**\n * Structure of GraphQLClient.ForgeStats\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ForgeStats\n * @property {number} avgBlockTime\n * @property {number} avgTps\n * @property {number} maxTps\n * @property {Array<...GraphQLClient.string>} numAccountMigrateTxs\n * @property {Array<...GraphQLClient.string>} numBlocks\n * @property {Array<...GraphQLClient.number>} numConsensusUpgradeTxs\n * @property {Array<...GraphQLClient.string>} numConsumeAssetTxs\n * @property {Array<...GraphQLClient.string>} numCreateAssetTxs\n * @property {Array<...GraphQLClient.string>} numDeclareFileTxs\n * @property {Array<...GraphQLClient.string>} numDeclareTxs\n * @property {Array<...GraphQLClient.string>} numExchangeTxs\n * @property {Array<...GraphQLClient.string>} numPokeTxs\n * @property {Array<...GraphQLClient.string>} numStakeTxs\n * @property {Array<...GraphQLClient.string>} numStakes\n * @property {Array<...GraphQLClient.number>} numSysUpgradeTxs\n * @property {Array<...GraphQLClient.string>} numTransferTxs\n * @property {Array<...GraphQLClient.string>} numTxs\n * @property {Array<...GraphQLClient.string>} numUpdateAssetTxs\n * @property {Array<...GraphQLClient.number>} numValidators\n * @property {Array<...GraphQLClient.number>} tps\n */\n\n/**\n * Structure of GraphQLClient.ForgeStatus\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ForgeStatus\n * @property {...GraphQLClient.AbciServerStatus} abciServer\n * @property {string} abiServer\n * @property {string} forgeWeb\n * @property {boolean} health\n */\n\n/**\n * Structure of GraphQLClient.ForgeToken\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ForgeToken\n * @property {number} decimal\n * @property {string} description\n * @property {string} icon\n * @property {number} inflationRate\n * @property {string} initialSupply\n * @property {string} name\n * @property {string} symbol\n * @property {string} totalSupply\n * @property {string} unit\n */\n\n/**\n * Structure of GraphQLClient.GasEntry\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GasEntry\n * @property {string} key\n * @property {number} value\n */\n\n/**\n * Structure of GraphQLClient.GeoInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GeoInfo\n * @property {string} city\n * @property {string} country\n * @property {number} latitude\n * @property {number} longitude\n */\n\n/**\n * Structure of GraphQLClient.Header\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.Header\n * @property {string} appHash\n * @property {string} chainId\n * @property {string} consensusHash\n * @property {string} dataHash\n * @property {string} evidenceHash\n * @property {string} height\n * @property {...GraphQLClient.BlockId} lastBlockId\n * @property {string} lastCommitHash\n * @property {string} lastResultsHash\n * @property {string} nextValidatorsHash\n * @property {string} numTxs\n * @property {string} proposerAddress\n * @property {string} time\n * @property {string} totalTxs\n * @property {string} validatorsHash\n * @property {...GraphQLClient.Version} version\n */\n\n/**\n * Structure of GraphQLClient.HealthStatus\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.HealthStatus\n * @property {...GraphQLClient.ConsensusStatus} consensus\n * @property {...GraphQLClient.ForgeStatus} forge\n * @property {...GraphQLClient.NetworkStatus} network\n * @property {...GraphQLClient.StorageStatus} storage\n */\n\n/**\n * Structure of GraphQLClient.IndexedAccountState\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedAccountState\n * @property {string} address\n * @property {string} balance\n * @property {string} genesisTime\n * @property {string} migratedFrom\n * @property {string} migratedTo\n * @property {string} moniker\n * @property {string} nonce\n * @property {string} numAssets\n * @property {string} numTxs\n * @property {Array<...GraphQLClient.string>} recentNumTxs\n * @property {string} renaissanceTime\n * @property {string} totalReceivedStakes\n * @property {string} totalStakes\n * @property {string} totalUnstakes\n */\n\n/**\n * Structure of GraphQLClient.IndexedAssetState\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedAssetState\n * @property {string} address\n * @property {string} consumedTime\n * @property {...GraphQLClient.Any} data\n * @property {string} genesisTime\n * @property {string} issuer\n * @property {string} moniker\n * @property {string} owner\n * @property {string} parent\n * @property {boolean} readonly\n * @property {string} renaissanceTime\n * @property {boolean} transferrable\n * @property {string} ttl\n */\n\n/**\n * Structure of GraphQLClient.IndexedBlock\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedBlock\n * @property {string} height\n * @property {string} numInvalidTxs\n * @property {string} numTxs\n * @property {string} proposer\n * @property {string} time\n */\n\n/**\n * Structure of GraphQLClient.IndexedStakeState\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedStakeState\n * @property {string} address\n * @property {string} balance\n * @property {string} genesisTime\n * @property {string} message\n * @property {string} receiver\n * @property {string} renaissanceTime\n * @property {string} sender\n * @property {number} type\n */\n\n/**\n * Structure of GraphQLClient.IndexedTransaction\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedTransaction\n * @property {...GraphQLClient.StatusCode} code\n * @property {string} hash\n * @property {string} receiver\n * @property {string} sender\n * @property {string} time\n * @property {...GraphQLClient.Transaction} tx\n * @property {string} type\n * @property {boolean} valid\n */\n\n/**\n * Structure of GraphQLClient.KvPair\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.KvPair\n * @property {string} key\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.LastCommitInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.LastCommitInfo\n * @property {number} round\n * @property {Array<...GraphQLClient.VoteInfo>} votes\n */\n\n/**\n * Structure of GraphQLClient.Multisig\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.Multisig\n * @property {...GraphQLClient.Any} data\n * @property {string} delegator\n * @property {string} pk\n * @property {string} signature\n * @property {string} signer\n */\n\n/**\n * Structure of GraphQLClient.NetInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.NetInfo\n * @property {Array<...GraphQLClient.string>} listeners\n * @property {boolean} listening\n * @property {number} nPeers\n * @property {Array<...GraphQLClient.PeerInfo>} peers\n */\n\n/**\n * Structure of GraphQLClient.NetworkStatus\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.NetworkStatus\n * @property {boolean} health\n * @property {number} numPeers\n */\n\n/**\n * Structure of GraphQLClient.NodeInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.NodeInfo\n * @property {string} address\n * @property {string} appHash\n * @property {string} blockHash\n * @property {string} blockHeight\n * @property {string} blockTime\n * @property {string} consensusVersion\n * @property {Array<...GraphQLClient.ForgeAppsVersionEntry>} forgeAppsVersion\n * @property {...GraphQLClient.GeoInfo} geoInfo\n * @property {string} id\n * @property {string} ip\n * @property {string} moniker\n * @property {string} network\n * @property {string} p2pAddress\n * @property {Array<...GraphQLClient.string>} supportedTxs\n * @property {boolean} synced\n * @property {string} totalTxs\n * @property {string} version\n * @property {string} votingPower\n */\n\n/**\n * Structure of GraphQLClient.OpsEntry\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.OpsEntry\n * @property {string} key\n * @property {...GraphQLClient.DelegateOpState} value\n */\n\n/**\n * Structure of GraphQLClient.PageInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PageInfo\n * @property {string} cursor\n * @property {boolean} next\n * @property {number} total\n */\n\n/**\n * Structure of GraphQLClient.PartSetHeader\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PartSetHeader\n * @property {string} hash\n * @property {number} total\n */\n\n/**\n * Structure of GraphQLClient.PeerInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PeerInfo\n * @property {string} consensusVersion\n * @property {...GraphQLClient.GeoInfo} geoInfo\n * @property {string} id\n * @property {string} ip\n * @property {string} moniker\n * @property {string} network\n */\n\n/**\n * Structure of GraphQLClient.PokeConfig\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PokeConfig\n * @property {string} amount\n * @property {string} dailyLimit\n * @property {boolean} enabled\n */\n\n/**\n * Structure of GraphQLClient.PokeInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PokeInfo\n * @property {string} amount\n * @property {string} dailyLimit\n * @property {string} leftover\n */\n\n/**\n * Structure of GraphQLClient.PokeTx\n *\n * Checkout the following snippet for the format of PokeTx:\n * ```json\n{\n  \"address\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"date\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PokeTx\n * @property {string} address\n * @property {...GraphQLClient.Any} data\n * @property {string} date\n */\n\n/**\n * Structure of GraphQLClient.Protocol\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.Protocol\n * @property {string} address\n * @property {Array<...GraphQLClient.CodeInfo>} code\n * @property {...GraphQLClient.Any} data\n * @property {string} description\n * @property {string} group\n * @property {string} installedAt\n * @property {string} name\n * @property {string} namespace\n * @property {string} pipeline\n * @property {string} proto\n * @property {Array<...GraphQLClient.string>} sources\n * @property {Array<...GraphQLClient.TypeUrls>} typeUrls\n * @property {number} version\n */\n\n/**\n * Structure of GraphQLClient.ProtocolState\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ProtocolState\n * @property {string} address\n * @property {...GraphQLClient.StateContext} context\n * @property {...GraphQLClient.Any} data\n * @property {string} group\n * @property {...GraphQLClient.DeployProtocolTx} itx\n * @property {Array<...GraphQLClient.string>} migratedFrom\n * @property {Array<...GraphQLClient.string>} migratedTo\n * @property {string} rootHash\n * @property {string} status\n */\n\n/**\n * Structure of GraphQLClient.PubKey\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PubKey\n * @property {string} data\n * @property {string} type\n */\n\n/**\n * Structure of GraphQLClient.RequestBeginBlock\n *\n * Checkout the following snippet for the format of RequestBeginBlock:\n * ```json\n{\n  \"byzantineValidators\": [\n    {\n      \"chainId\": \"abc\",\n      \"chainType\": \"abc\",\n      \"hash\": \"abc\",\n      \"originalTx\": \"abc\",\n      \"receiverAddress\": \"abc\"\n    }\n  ],\n  \"hash\": \"abc\",\n  \"header\": {\n    \"appHash\": \"abc\",\n    \"chainId\": \"abc\",\n    \"consensusHash\": \"abc\",\n    \"dataHash\": \"abc\",\n    \"evidenceHash\": \"abc\",\n    \"height\": \"abc\",\n    \"lastBlockId\": {\n      \"hash\": \"abc\",\n      \"partsHeader\": {\n        \"hash\": \"abc\",\n        \"total\": 123\n      }\n    },\n    \"lastCommitHash\": \"abc\",\n    \"lastResultsHash\": \"abc\",\n    \"nextValidatorsHash\": \"abc\",\n    \"numTxs\": \"abc\",\n    \"proposerAddress\": \"abc\",\n    \"time\": \"2019-04-29T00:00:00.000Z\",\n    \"totalTxs\": \"abc\",\n    \"validatorsHash\": \"abc\",\n    \"version\": {\n      \"app\": \"abc\",\n      \"block\": \"abc\"\n    }\n  },\n  \"lastCommitInfo\": {\n    \"round\": 123,\n    \"votes\": [\n      {\n        \"signedLastBlock\": true,\n        \"validator\": {\n          \"address\": \"abc\",\n          \"power\": \"abc\"\n        }\n      }\n    ]\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestBeginBlock\n * @property {Array<...GraphQLClient.Evidence>} byzantineValidators\n * @property {string} hash\n * @property {...GraphQLClient.Header} header\n * @property {...GraphQLClient.LastCommitInfo} lastCommitInfo\n */\n\n/**\n * Structure of GraphQLClient.RequestEndBlock\n *\n * Checkout the following snippet for the format of RequestEndBlock:\n * ```json\n{\n  \"height\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestEndBlock\n * @property {string} height\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetAccountState\n *\n * Checkout the following snippet for the format of ResponseGetAccountState:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"state\": {\n    \"address\": \"abc\",\n    \"balance\": \"abc\",\n    \"context\": {\n      \"genesisTime\": \"2019-04-29T00:00:00.000Z\",\n      \"genesisTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      },\n      \"renaissanceTime\": \"2019-04-29T00:00:00.000Z\",\n      \"renaissanceTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      }\n    },\n    \"data\": {\n      \"typeUrl\": \"abc\",\n      \"value\": \"abc\"\n    },\n    \"issuer\": \"abc\",\n    \"migratedFrom\": [\n      \"abc\"\n    ],\n    \"migratedTo\": [\n      \"abc\"\n    ],\n    \"moniker\": \"abc\",\n    \"nonce\": \"abc\",\n    \"numAssets\": \"abc\",\n    \"numTxs\": \"abc\",\n    \"pk\": \"abc\",\n    \"poke\": {\n      \"amount\": \"abc\",\n      \"dailyLimit\": \"abc\",\n      \"leftover\": \"abc\"\n    },\n    \"stake\": {\n      \"recentReceivedStakes\": {\n        \"circular\": true,\n        \"fifo\": true,\n        \"items\": [\n          \"abc\"\n        ],\n        \"maxItems\": 123,\n        \"typeUrl\": \"abc\"\n      },\n      \"recentStakes\": {\n        \"circular\": true,\n        \"fifo\": true,\n        \"items\": [\n          \"abc\"\n        ],\n        \"maxItems\": 123,\n        \"typeUrl\": \"abc\"\n      },\n      \"totalReceivedStakes\": \"abc\",\n      \"totalStakes\": \"abc\",\n      \"totalUnstakes\": \"abc\"\n    },\n    \"type\": {\n      \"address\": \"BASE16\",\n      \"hash\": \"KECCAK\",\n      \"pk\": \"ED25519\",\n      \"role\": \"ROLE_ACCOUNT\"\n    }\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetAccountState\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.AccountState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetAssetState\n *\n * Checkout the following snippet for the format of ResponseGetAssetState:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"state\": {\n    \"address\": \"abc\",\n    \"consumedTime\": \"2019-04-29T00:00:00.000Z\",\n    \"context\": {\n      \"genesisTime\": \"2019-04-29T00:00:00.000Z\",\n      \"genesisTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      },\n      \"renaissanceTime\": \"2019-04-29T00:00:00.000Z\",\n      \"renaissanceTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      }\n    },\n    \"data\": {\n      \"typeUrl\": \"abc\",\n      \"value\": \"abc\"\n    },\n    \"issuer\": \"abc\",\n    \"moniker\": \"abc\",\n    \"owner\": \"abc\",\n    \"parent\": \"abc\",\n    \"readonly\": true,\n    \"stake\": {\n      \"recentReceivedStakes\": {\n        \"circular\": true,\n        \"fifo\": true,\n        \"items\": [\n          \"abc\"\n        ],\n        \"maxItems\": 123,\n        \"typeUrl\": \"abc\"\n      },\n      \"recentStakes\": {\n        \"circular\": true,\n        \"fifo\": true,\n        \"items\": [\n          \"abc\"\n        ],\n        \"maxItems\": 123,\n        \"typeUrl\": \"abc\"\n      },\n      \"totalReceivedStakes\": \"abc\",\n      \"totalStakes\": \"abc\",\n      \"totalUnstakes\": \"abc\"\n    },\n    \"transferrable\": true,\n    \"ttl\": 123\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetAssetState\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.AssetState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetBlock\n *\n * Checkout the following snippet for the format of ResponseGetBlock:\n * ```json\n{\n  \"block\": {\n    \"appHash\": \"abc\",\n    \"consensusHash\": \"abc\",\n    \"dataHash\": \"abc\",\n    \"evidenceHash\": \"abc\",\n    \"height\": \"abc\",\n    \"invalidTxs\": [\n      {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      }\n    ],\n    \"invalidTxsHashes\": [\n      \"abc\"\n    ],\n    \"lastBlockId\": {\n      \"hash\": \"abc\",\n      \"partsHeader\": {\n        \"hash\": \"abc\",\n        \"total\": 123\n      }\n    },\n    \"lastCommitHash\": \"abc\",\n    \"lastResultsHash\": \"abc\",\n    \"nextValidatorsHash\": \"abc\",\n    \"numTxs\": 123,\n    \"proposer\": \"abc\",\n    \"time\": \"2019-04-29T00:00:00.000Z\",\n    \"totalTxs\": \"abc\",\n    \"txs\": [\n      {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      }\n    ],\n    \"txsHashes\": [\n      \"abc\"\n    ],\n    \"validatorsHash\": \"abc\",\n    \"version\": {\n      \"app\": \"abc\",\n      \"block\": \"abc\"\n    }\n  },\n  \"code\": \"PROTOCOL_NOT_RUNNING\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetBlock\n * @property {...GraphQLClient.BlockInfo} block\n * @property {...GraphQLClient.StatusCode} code\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetBlocks\n *\n * Checkout the following snippet for the format of ResponseGetBlocks:\n * ```json\n{\n  \"blocks\": [\n    {\n      \"appHash\": \"abc\",\n      \"consensusHash\": \"abc\",\n      \"dataHash\": \"abc\",\n      \"evidenceHash\": \"abc\",\n      \"height\": \"abc\",\n      \"invalidTxsHashes\": [\n        \"abc\"\n      ],\n      \"lastBlockId\": {\n        \"hash\": \"abc\",\n        \"partsHeader\": {\n          \"hash\": \"abc\",\n          \"total\": 123\n        }\n      },\n      \"lastCommitHash\": \"abc\",\n      \"lastResultsHash\": \"abc\",\n      \"nextValidatorsHash\": \"abc\",\n      \"numTxs\": 123,\n      \"proposer\": \"abc\",\n      \"time\": \"2019-04-29T00:00:00.000Z\",\n      \"totalTxs\": \"abc\",\n      \"txsHashes\": [\n        \"abc\"\n      ],\n      \"validatorsHash\": \"abc\",\n      \"version\": {\n        \"app\": \"abc\",\n        \"block\": \"abc\"\n      }\n    }\n  ],\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"page\": {\n    \"cursor\": \"abc\",\n    \"next\": true,\n    \"total\": 123\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetBlocks\n * @property {Array<...GraphQLClient.BlockInfoSimple>} blocks\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.PageInfo} page\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetChainInfo\n *\n * Checkout the following snippet for the format of ResponseGetChainInfo:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"info\": {\n    \"address\": \"abc\",\n    \"appHash\": \"abc\",\n    \"blockHash\": \"abc\",\n    \"blockHeight\": \"abc\",\n    \"blockTime\": \"2019-04-29T00:00:00.000Z\",\n    \"consensusVersion\": \"abc\",\n    \"forgeAppsVersion\": [\n      {\n        \"key\": \"abc\",\n        \"value\": \"abc\"\n      }\n    ],\n    \"id\": \"abc\",\n    \"moniker\": \"abc\",\n    \"network\": \"abc\",\n    \"supportedTxs\": [\n      \"abc\"\n    ],\n    \"synced\": true,\n    \"totalTxs\": \"abc\",\n    \"version\": \"abc\",\n    \"votingPower\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetChainInfo\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.ChainInfo} info\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetConfig\n *\n * Checkout the following snippet for the format of ResponseGetConfig:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"config\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetConfig\n * @property {...GraphQLClient.StatusCode} code\n * @property {string} config\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetDelegateState\n *\n * Checkout the following snippet for the format of ResponseGetDelegateState:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"state\": {\n    \"address\": \"abc\",\n    \"context\": {\n      \"genesisTime\": \"2019-04-29T00:00:00.000Z\",\n      \"genesisTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      },\n      \"renaissanceTime\": \"2019-04-29T00:00:00.000Z\",\n      \"renaissanceTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      }\n    },\n    \"data\": {\n      \"typeUrl\": \"abc\",\n      \"value\": \"abc\"\n    },\n    \"ops\": [\n      {\n        \"key\": \"abc\",\n        \"value\": {\n          \"balance\": \"abc\",\n          \"balanceDelta\": \"abc\",\n          \"numTxs\": \"abc\",\n          \"numTxsDelta\": \"abc\",\n          \"rule\": \"abc\"\n        }\n      }\n    ]\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetDelegateState\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.DelegateState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetForgeState\n *\n * Checkout the following snippet for the format of ResponseGetForgeState:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"state\": {\n    \"accountConfig\": [\n      {\n        \"key\": \"abc\",\n        \"value\": {\n          \"address\": \"abc\",\n          \"balance\": \"abc\",\n          \"pk\": \"abc\"\n        }\n      }\n    ],\n    \"address\": \"abc\",\n    \"consensus\": {\n      \"maxBytes\": \"abc\",\n      \"maxCandidates\": 123,\n      \"maxGas\": \"abc\",\n      \"maxValidators\": 123,\n      \"paramChanged\": true,\n      \"pubKeyTypes\": [\n        \"abc\"\n      ],\n      \"validatorChanged\": true,\n      \"validators\": [\n        {\n          \"address\": \"abc\",\n          \"power\": \"abc\"\n        }\n      ]\n    },\n    \"data\": {\n      \"typeUrl\": \"abc\",\n      \"value\": \"abc\"\n    },\n    \"gas\": [\n      {\n        \"key\": \"abc\",\n        \"value\": 123\n      }\n    ],\n    \"protocols\": [\n      {\n        \"address\": \"abc\",\n        \"name\": \"abc\"\n      }\n    ],\n    \"stakeSummary\": [\n      {\n        \"key\": 123,\n        \"value\": {\n          \"context\": {\n            \"genesisTime\": \"2019-04-29T00:00:00.000Z\",\n            \"genesisTx\": {\n              \"accountMigrate\": {\n                \"address\": \"abc\"\n              },\n              \"code\": \"PROTOCOL_NOT_RUNNING\",\n              \"createAsset\": {\n                \"asset\": \"abc\"\n              },\n              \"hash\": \"abc\",\n              \"height\": \"abc\",\n              \"index\": 123,\n              \"tags\": [\n                {\n                  \"key\": \"abc\",\n                  \"value\": \"abc\"\n                }\n              ],\n              \"time\": \"2019-04-29T00:00:00.000Z\",\n              \"tx\": {\n                \"chainId\": \"abc\",\n                \"from\": \"abc\",\n                \"nonce\": \"abc\",\n                \"pk\": \"abc\",\n                \"signature\": \"abc\",\n                \"signatures\": [\n                  {\n                    \"data\": {\n                      \"typeUrl\": \"abc\",\n                      \"value\": \"abc\"\n                    },\n                    \"delegator\": \"abc\",\n                    \"pk\": \"abc\",\n                    \"signature\": \"abc\",\n                    \"signer\": \"abc\"\n                  }\n                ]\n              }\n            },\n            \"renaissanceTime\": \"2019-04-29T00:00:00.000Z\",\n            \"renaissanceTx\": {\n              \"accountMigrate\": {\n                \"address\": \"abc\"\n              },\n              \"code\": \"PROTOCOL_NOT_RUNNING\",\n              \"createAsset\": {\n                \"asset\": \"abc\"\n              },\n              \"hash\": \"abc\",\n              \"height\": \"abc\",\n              \"index\": 123,\n              \"tags\": [\n                {\n                  \"key\": \"abc\",\n                  \"value\": \"abc\"\n                }\n              ],\n              \"time\": \"2019-04-29T00:00:00.000Z\",\n              \"tx\": {\n                \"chainId\": \"abc\",\n                \"from\": \"abc\",\n                \"nonce\": \"abc\",\n                \"pk\": \"abc\",\n                \"signature\": \"abc\",\n                \"signatures\": [\n                  {\n                    \"data\": {\n                      \"typeUrl\": \"abc\",\n                      \"value\": \"abc\"\n                    },\n                    \"delegator\": \"abc\",\n                    \"pk\": \"abc\",\n                    \"signature\": \"abc\",\n                    \"signer\": \"abc\"\n                  }\n                ]\n              }\n            }\n          },\n          \"totalStakes\": \"abc\",\n          \"totalUnstakes\": \"abc\"\n        }\n      }\n    ],\n    \"tasks\": [\n      {\n        \"key\": \"abc\",\n        \"value\": [\n          {\n            \"actions\": [\n              \"BACKUP\"\n            ],\n            \"dataHash\": \"abc\",\n            \"type\": \"CONFIG_APP\"\n          }\n        ]\n      }\n    ],\n    \"token\": {\n      \"decimal\": 123,\n      \"description\": \"abc\",\n      \"icon\": \"abc\",\n      \"inflationRate\": 123,\n      \"initialSupply\": \"abc\",\n      \"name\": \"abc\",\n      \"symbol\": \"abc\",\n      \"totalSupply\": \"abc\",\n      \"unit\": \"abc\"\n    },\n    \"tokenSwapConfig\": {\n      \"commission\": \"abc\",\n      \"commissionHolderAddress\": \"abc\",\n      \"commissionRate\": 123,\n      \"revokeCommission\": 123,\n      \"withdrawInterval\": 123\n    },\n    \"txConfig\": {\n      \"declare\": {\n        \"hierarchy\": 123,\n        \"restricted\": true\n      },\n      \"delegate\": {\n        \"deltaInterval\": 123,\n        \"typeUrls\": [\n          \"abc\"\n        ]\n      },\n      \"maxAssetSize\": 123,\n      \"maxListSize\": 123,\n      \"maxMultisig\": 123,\n      \"minimumStake\": \"abc\",\n      \"poke\": {\n        \"amount\": \"abc\",\n        \"dailyLimit\": \"abc\",\n        \"enabled\": true\n      },\n      \"stake\": {\n        \"timeoutGeneral\": 123,\n        \"timeoutStakeForNode\": 123\n      }\n    },\n    \"upgradeInfo\": {\n      \"height\": \"abc\",\n      \"version\": \"abc\"\n    },\n    \"version\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetForgeState\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.ForgeState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetForgeStats\n *\n * Checkout the following snippet for the format of ResponseGetForgeStats:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"forgeStats\": {\n    \"avgBlockTime\": 123,\n    \"avgTps\": 123,\n    \"maxTps\": 123,\n    \"numAccountMigrateTxs\": [\n      \"abc\"\n    ],\n    \"numBlocks\": [\n      \"abc\"\n    ],\n    \"numConsensusUpgradeTxs\": [\n      123\n    ],\n    \"numConsumeAssetTxs\": [\n      \"abc\"\n    ],\n    \"numCreateAssetTxs\": [\n      \"abc\"\n    ],\n    \"numDeclareFileTxs\": [\n      \"abc\"\n    ],\n    \"numDeclareTxs\": [\n      \"abc\"\n    ],\n    \"numExchangeTxs\": [\n      \"abc\"\n    ],\n    \"numPokeTxs\": [\n      \"abc\"\n    ],\n    \"numStakeTxs\": [\n      \"abc\"\n    ],\n    \"numStakes\": [\n      \"abc\"\n    ],\n    \"numSysUpgradeTxs\": [\n      123\n    ],\n    \"numTransferTxs\": [\n      \"abc\"\n    ],\n    \"numTxs\": [\n      \"abc\"\n    ],\n    \"numUpdateAssetTxs\": [\n      \"abc\"\n    ],\n    \"numValidators\": [\n      123\n    ],\n    \"tps\": [\n      123\n    ]\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetForgeStats\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.ForgeStats} forgeStats\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetHealthStatus\n *\n * Checkout the following snippet for the format of ResponseGetHealthStatus:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"healthStatus\": {\n    \"consensus\": {\n      \"blockHeight\": \"abc\",\n      \"health\": true,\n      \"synced\": true\n    },\n    \"forge\": {\n      \"abciServer\": {\n        \"abciConsensus\": \"abc\",\n        \"abciInfo\": \"abc\"\n      },\n      \"abiServer\": \"abc\",\n      \"forgeWeb\": \"abc\",\n      \"health\": true\n    },\n    \"network\": {\n      \"health\": true,\n      \"numPeers\": 123\n    },\n    \"storage\": {\n      \"diskSpace\": {\n        \"forgeUsage\": \"abc\",\n        \"total\": \"abc\"\n      },\n      \"health\": true,\n      \"indexerServer\": \"abc\",\n      \"stateDb\": \"abc\"\n    }\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetHealthStatus\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.HealthStatus} healthStatus\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetNetInfo\n *\n * Checkout the following snippet for the format of ResponseGetNetInfo:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"netInfo\": {\n    \"listeners\": [\n      \"abc\"\n    ],\n    \"listening\": true,\n    \"nPeers\": 123,\n    \"peers\": [\n      {\n        \"consensusVersion\": \"abc\",\n        \"geoInfo\": {\n          \"city\": \"abc\",\n          \"country\": \"abc\",\n          \"latitude\": 123,\n          \"longitude\": 123\n        },\n        \"id\": \"abc\",\n        \"ip\": \"abc\",\n        \"moniker\": \"abc\",\n        \"network\": \"abc\"\n      }\n    ]\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetNetInfo\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.NetInfo} netInfo\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetNodeInfo\n *\n * Checkout the following snippet for the format of ResponseGetNodeInfo:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"info\": {\n    \"address\": \"abc\",\n    \"appHash\": \"abc\",\n    \"blockHash\": \"abc\",\n    \"blockHeight\": \"abc\",\n    \"blockTime\": \"2019-04-29T00:00:00.000Z\",\n    \"consensusVersion\": \"abc\",\n    \"forgeAppsVersion\": [\n      {\n        \"key\": \"abc\",\n        \"value\": \"abc\"\n      }\n    ],\n    \"geoInfo\": {\n      \"city\": \"abc\",\n      \"country\": \"abc\",\n      \"latitude\": 123,\n      \"longitude\": 123\n    },\n    \"id\": \"abc\",\n    \"ip\": \"abc\",\n    \"moniker\": \"abc\",\n    \"network\": \"abc\",\n    \"p2pAddress\": \"abc\",\n    \"supportedTxs\": [\n      \"abc\"\n    ],\n    \"synced\": true,\n    \"totalTxs\": \"abc\",\n    \"version\": \"abc\",\n    \"votingPower\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetNodeInfo\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.NodeInfo} info\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetProtocolState\n *\n * Checkout the following snippet for the format of ResponseGetProtocolState:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"state\": {\n    \"address\": \"abc\",\n    \"context\": {\n      \"genesisTime\": \"2019-04-29T00:00:00.000Z\",\n      \"genesisTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      },\n      \"renaissanceTime\": \"2019-04-29T00:00:00.000Z\",\n      \"renaissanceTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      }\n    },\n    \"data\": {\n      \"typeUrl\": \"abc\",\n      \"value\": \"abc\"\n    },\n    \"group\": \"abc\",\n    \"itx\": {\n      \"address\": \"abc\",\n      \"code\": [\n        {\n          \"binary\": \"abc\",\n          \"checksum\": \"abc\"\n        }\n      ],\n      \"data\": {\n        \"typeUrl\": \"abc\",\n        \"value\": \"abc\"\n      },\n      \"description\": \"abc\",\n      \"name\": \"abc\",\n      \"namespace\": \"abc\",\n      \"pipeline\": \"abc\",\n      \"proto\": \"abc\",\n      \"sources\": [\n        \"abc\"\n      ],\n      \"tags\": [\n        \"abc\"\n      ],\n      \"typeUrls\": [\n        {\n          \"module\": \"abc\",\n          \"url\": \"abc\"\n        }\n      ],\n      \"version\": 123\n    },\n    \"migratedFrom\": [\n      \"abc\"\n    ],\n    \"migratedTo\": [\n      \"abc\"\n    ],\n    \"rootHash\": \"abc\",\n    \"status\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetProtocolState\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.ProtocolState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetProtocols\n *\n * Checkout the following snippet for the format of ResponseGetProtocols:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"protocols\": [\n    {\n      \"address\": \"abc\",\n      \"code\": [\n        {\n          \"binary\": \"abc\",\n          \"checksum\": \"abc\"\n        }\n      ],\n      \"data\": {\n        \"typeUrl\": \"abc\",\n        \"value\": \"abc\"\n      },\n      \"description\": \"abc\",\n      \"group\": \"abc\",\n      \"installedAt\": \"2019-04-29T00:00:00.000Z\",\n      \"name\": \"abc\",\n      \"namespace\": \"abc\",\n      \"pipeline\": \"abc\",\n      \"proto\": \"abc\",\n      \"sources\": [\n        \"abc\"\n      ],\n      \"typeUrls\": [\n        {\n          \"module\": \"abc\",\n          \"url\": \"abc\"\n        }\n      ],\n      \"version\": 123\n    }\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetProtocols\n * @property {...GraphQLClient.StatusCode} code\n * @property {Array<...GraphQLClient.Protocol>} protocols\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetSimulatorStatus\n *\n * Checkout the following snippet for the format of ResponseGetSimulatorStatus:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"result\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetSimulatorStatus\n * @property {...GraphQLClient.StatusCode} code\n * @property {string} result\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetStakeState\n *\n * Checkout the following snippet for the format of ResponseGetStakeState:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"state\": {\n    \"address\": \"abc\",\n    \"balance\": \"abc\",\n    \"context\": {\n      \"genesisTime\": \"2019-04-29T00:00:00.000Z\",\n      \"genesisTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      },\n      \"renaissanceTime\": \"2019-04-29T00:00:00.000Z\",\n      \"renaissanceTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      }\n    },\n    \"data\": {\n      \"typeUrl\": \"abc\",\n      \"value\": \"abc\"\n    },\n    \"from\": \"abc\",\n    \"message\": \"abc\",\n    \"to\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetStakeState\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.StakeState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetSwapState\n *\n * Checkout the following snippet for the format of ResponseGetSwapState:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"state\": {\n    \"address\": \"abc\",\n    \"assets\": [\n      \"abc\"\n    ],\n    \"context\": {\n      \"genesisTime\": \"2019-04-29T00:00:00.000Z\",\n      \"genesisTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      },\n      \"renaissanceTime\": \"2019-04-29T00:00:00.000Z\",\n      \"renaissanceTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      }\n    },\n    \"hash\": \"abc\",\n    \"hashkey\": \"abc\",\n    \"hashlock\": \"abc\",\n    \"locktime\": 123,\n    \"receiver\": \"abc\",\n    \"sender\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetSwapState\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.SwapState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetTetherState\n *\n * Checkout the following snippet for the format of ResponseGetTetherState:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"state\": {\n    \"address\": \"abc\",\n    \"available\": true,\n    \"charge\": \"abc\",\n    \"commission\": \"abc\",\n    \"custodian\": \"abc\",\n    \"depositor\": \"abc\",\n    \"hash\": \"abc\",\n    \"locktime\": \"2019-04-29T00:00:00.000Z\",\n    \"target\": \"abc\",\n    \"value\": \"abc\",\n    \"withdrawer\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetTetherState\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.TetherState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetTx\n *\n * Checkout the following snippet for the format of ResponseGetTx:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"info\": {\n    \"accountMigrate\": {\n      \"address\": \"abc\"\n    },\n    \"code\": \"PROTOCOL_NOT_RUNNING\",\n    \"createAsset\": {\n      \"asset\": \"abc\"\n    },\n    \"hash\": \"abc\",\n    \"height\": \"abc\",\n    \"index\": 123,\n    \"tags\": [\n      {\n        \"key\": \"abc\",\n        \"value\": \"abc\"\n      }\n    ],\n    \"time\": \"2019-04-29T00:00:00.000Z\",\n    \"tx\": {\n      \"chainId\": \"abc\",\n      \"from\": \"abc\",\n      \"nonce\": \"abc\",\n      \"pk\": \"abc\",\n      \"signature\": \"abc\",\n      \"signatures\": [\n        {\n          \"data\": {\n            \"typeUrl\": \"abc\",\n            \"value\": \"abc\"\n          },\n          \"delegator\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signer\": \"abc\"\n        }\n      ]\n    }\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetTx\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.TransactionInfo} info\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetUnconfirmedTxs\n *\n * Checkout the following snippet for the format of ResponseGetUnconfirmedTxs:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"page\": {\n    \"cursor\": \"abc\",\n    \"next\": true,\n    \"total\": 123\n  },\n  \"unconfirmedTxs\": {\n    \"nTxs\": 123,\n    \"txs\": [\n      {\n        \"chainId\": \"abc\",\n        \"from\": \"abc\",\n        \"nonce\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signatures\": [\n          {\n            \"data\": {\n              \"typeUrl\": \"abc\",\n              \"value\": \"abc\"\n            },\n            \"delegator\": \"abc\",\n            \"pk\": \"abc\",\n            \"signature\": \"abc\",\n            \"signer\": \"abc\"\n          }\n        ]\n      }\n    ]\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetUnconfirmedTxs\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {...GraphQLClient.UnconfirmedTxs} unconfirmedTxs\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetValidatorsInfo\n *\n * Checkout the following snippet for the format of ResponseGetValidatorsInfo:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"validatorsInfo\": {\n    \"blockHeight\": \"abc\",\n    \"validators\": [\n      {\n        \"address\": \"abc\",\n        \"geoInfo\": {\n          \"city\": \"abc\",\n          \"country\": \"abc\",\n          \"latitude\": 123,\n          \"longitude\": 123\n        },\n        \"name\": \"abc\",\n        \"proposerPriority\": \"abc\",\n        \"pubKey\": {\n          \"data\": \"abc\",\n          \"type\": \"abc\"\n        },\n        \"votingPower\": \"abc\"\n      }\n    ]\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetValidatorsInfo\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.ValidatorsInfo} validatorsInfo\n */\n\n/**\n * Structure of GraphQLClient.ResponseListAssetTransactions\n *\n * Checkout the following snippet for the format of ResponseListAssetTransactions:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"page\": {\n    \"cursor\": \"abc\",\n    \"next\": true,\n    \"total\": 123\n  },\n  \"transactions\": [\n    {\n      \"code\": \"PROTOCOL_NOT_RUNNING\",\n      \"hash\": \"abc\",\n      \"receiver\": \"abc\",\n      \"sender\": \"abc\",\n      \"time\": \"abc\",\n      \"tx\": {\n        \"chainId\": \"abc\",\n        \"from\": \"abc\",\n        \"nonce\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signatures\": [\n          {\n            \"data\": {\n              \"typeUrl\": \"abc\",\n              \"value\": \"abc\"\n            },\n            \"delegator\": \"abc\",\n            \"pk\": \"abc\",\n            \"signature\": \"abc\",\n            \"signer\": \"abc\"\n          }\n        ]\n      },\n      \"type\": \"abc\",\n      \"valid\": true\n    }\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListAssetTransactions\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.IndexedTransaction>} transactions\n */\n\n/**\n * Structure of GraphQLClient.ResponseListAssets\n *\n * Checkout the following snippet for the format of ResponseListAssets:\n * ```json\n{\n  \"account\": {\n    \"address\": \"abc\",\n    \"balance\": \"abc\",\n    \"genesisTime\": \"abc\",\n    \"migratedFrom\": \"abc\",\n    \"migratedTo\": \"abc\",\n    \"moniker\": \"abc\",\n    \"nonce\": \"abc\",\n    \"numAssets\": \"abc\",\n    \"numTxs\": \"abc\",\n    \"recentNumTxs\": [\n      \"abc\"\n    ],\n    \"renaissanceTime\": \"abc\",\n    \"totalReceivedStakes\": \"abc\",\n    \"totalStakes\": \"abc\",\n    \"totalUnstakes\": \"abc\"\n  },\n  \"assets\": [\n    {\n      \"address\": \"abc\",\n      \"consumedTime\": \"abc\",\n      \"data\": {\n        \"typeUrl\": \"abc\",\n        \"value\": \"abc\"\n      },\n      \"genesisTime\": \"abc\",\n      \"issuer\": \"abc\",\n      \"moniker\": \"abc\",\n      \"owner\": \"abc\",\n      \"parent\": \"abc\",\n      \"readonly\": true,\n      \"renaissanceTime\": \"abc\",\n      \"transferrable\": true,\n      \"ttl\": \"abc\"\n    }\n  ],\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"page\": {\n    \"cursor\": \"abc\",\n    \"next\": true,\n    \"total\": 123\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListAssets\n * @property {...GraphQLClient.IndexedAccountState} account\n * @property {Array<...GraphQLClient.IndexedAssetState>} assets\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.PageInfo} page\n */\n\n/**\n * Structure of GraphQLClient.ResponseListBlocks\n *\n * Checkout the following snippet for the format of ResponseListBlocks:\n * ```json\n{\n  \"blocks\": [\n    {\n      \"height\": \"abc\",\n      \"numInvalidTxs\": \"abc\",\n      \"numTxs\": \"abc\",\n      \"proposer\": \"abc\",\n      \"time\": \"abc\"\n    }\n  ],\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"page\": {\n    \"cursor\": \"abc\",\n    \"next\": true,\n    \"total\": 123\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListBlocks\n * @property {Array<...GraphQLClient.IndexedBlock>} blocks\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.PageInfo} page\n */\n\n/**\n * Structure of GraphQLClient.ResponseListStakes\n *\n * Checkout the following snippet for the format of ResponseListStakes:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"page\": {\n    \"cursor\": \"abc\",\n    \"next\": true,\n    \"total\": 123\n  },\n  \"stakes\": [\n    {\n      \"address\": \"abc\",\n      \"balance\": \"abc\",\n      \"genesisTime\": \"abc\",\n      \"message\": \"abc\",\n      \"receiver\": \"abc\",\n      \"renaissanceTime\": \"abc\",\n      \"sender\": \"abc\",\n      \"type\": 123\n    }\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListStakes\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.IndexedStakeState>} stakes\n */\n\n/**\n * Structure of GraphQLClient.ResponseListSwap\n *\n * Checkout the following snippet for the format of ResponseListSwap:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"page\": {\n    \"cursor\": \"abc\",\n    \"next\": true,\n    \"total\": 123\n  },\n  \"swap\": [\n    {\n      \"address\": \"abc\",\n      \"assets\": [\n        \"abc\"\n      ],\n      \"context\": {\n        \"genesisTime\": \"2019-04-29T00:00:00.000Z\",\n        \"genesisTx\": {\n          \"accountMigrate\": {\n            \"address\": \"abc\"\n          },\n          \"code\": \"PROTOCOL_NOT_RUNNING\",\n          \"createAsset\": {\n            \"asset\": \"abc\"\n          },\n          \"hash\": \"abc\",\n          \"height\": \"abc\",\n          \"index\": 123,\n          \"tags\": [\n            {\n              \"key\": \"abc\",\n              \"value\": \"abc\"\n            }\n          ],\n          \"time\": \"2019-04-29T00:00:00.000Z\",\n          \"tx\": {\n            \"chainId\": \"abc\",\n            \"from\": \"abc\",\n            \"nonce\": \"abc\",\n            \"pk\": \"abc\",\n            \"signature\": \"abc\",\n            \"signatures\": [\n              {\n                \"data\": {\n                  \"typeUrl\": \"abc\",\n                  \"value\": \"abc\"\n                },\n                \"delegator\": \"abc\",\n                \"pk\": \"abc\",\n                \"signature\": \"abc\",\n                \"signer\": \"abc\"\n              }\n            ]\n          }\n        },\n        \"renaissanceTime\": \"2019-04-29T00:00:00.000Z\",\n        \"renaissanceTx\": {\n          \"accountMigrate\": {\n            \"address\": \"abc\"\n          },\n          \"code\": \"PROTOCOL_NOT_RUNNING\",\n          \"createAsset\": {\n            \"asset\": \"abc\"\n          },\n          \"hash\": \"abc\",\n          \"height\": \"abc\",\n          \"index\": 123,\n          \"tags\": [\n            {\n              \"key\": \"abc\",\n              \"value\": \"abc\"\n            }\n          ],\n          \"time\": \"2019-04-29T00:00:00.000Z\",\n          \"tx\": {\n            \"chainId\": \"abc\",\n            \"from\": \"abc\",\n            \"nonce\": \"abc\",\n            \"pk\": \"abc\",\n            \"signature\": \"abc\",\n            \"signatures\": [\n              {\n                \"data\": {\n                  \"typeUrl\": \"abc\",\n                  \"value\": \"abc\"\n                },\n                \"delegator\": \"abc\",\n                \"pk\": \"abc\",\n                \"signature\": \"abc\",\n                \"signer\": \"abc\"\n              }\n            ]\n          }\n        }\n      },\n      \"hash\": \"abc\",\n      \"hashkey\": \"abc\",\n      \"hashlock\": \"abc\",\n      \"locktime\": 123,\n      \"receiver\": \"abc\",\n      \"sender\": \"abc\",\n      \"value\": \"abc\"\n    }\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListSwap\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.SwapState>} swap\n */\n\n/**\n * Structure of GraphQLClient.ResponseListTethers\n *\n * Checkout the following snippet for the format of ResponseListTethers:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"page\": {\n    \"cursor\": \"abc\",\n    \"next\": true,\n    \"total\": 123\n  },\n  \"tethers\": [\n    {\n      \"address\": \"abc\",\n      \"available\": true,\n      \"charge\": \"abc\",\n      \"commission\": \"abc\",\n      \"custodian\": \"abc\",\n      \"depositor\": \"abc\",\n      \"hash\": \"abc\",\n      \"locktime\": \"2019-04-29T00:00:00.000Z\",\n      \"target\": \"abc\",\n      \"value\": \"abc\",\n      \"withdrawer\": \"abc\"\n    }\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListTethers\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.TetherState>} tethers\n */\n\n/**\n * Structure of GraphQLClient.ResponseListTopAccounts\n *\n * Checkout the following snippet for the format of ResponseListTopAccounts:\n * ```json\n{\n  \"accounts\": [\n    {\n      \"address\": \"abc\",\n      \"balance\": \"abc\",\n      \"genesisTime\": \"abc\",\n      \"migratedFrom\": \"abc\",\n      \"migratedTo\": \"abc\",\n      \"moniker\": \"abc\",\n      \"nonce\": \"abc\",\n      \"numAssets\": \"abc\",\n      \"numTxs\": \"abc\",\n      \"recentNumTxs\": [\n        \"abc\"\n      ],\n      \"renaissanceTime\": \"abc\",\n      \"totalReceivedStakes\": \"abc\",\n      \"totalStakes\": \"abc\",\n      \"totalUnstakes\": \"abc\"\n    }\n  ],\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"page\": {\n    \"cursor\": \"abc\",\n    \"next\": true,\n    \"total\": 123\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListTopAccounts\n * @property {Array<...GraphQLClient.IndexedAccountState>} accounts\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.PageInfo} page\n */\n\n/**\n * Structure of GraphQLClient.ResponseListTransactions\n *\n * Checkout the following snippet for the format of ResponseListTransactions:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"page\": {\n    \"cursor\": \"abc\",\n    \"next\": true,\n    \"total\": 123\n  },\n  \"transactions\": [\n    {\n      \"code\": \"PROTOCOL_NOT_RUNNING\",\n      \"hash\": \"abc\",\n      \"receiver\": \"abc\",\n      \"sender\": \"abc\",\n      \"time\": \"abc\",\n      \"tx\": {\n        \"chainId\": \"abc\",\n        \"from\": \"abc\",\n        \"nonce\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signatures\": [\n          {\n            \"data\": {\n              \"typeUrl\": \"abc\",\n              \"value\": \"abc\"\n            },\n            \"delegator\": \"abc\",\n            \"pk\": \"abc\",\n            \"signature\": \"abc\",\n            \"signer\": \"abc\"\n          }\n        ]\n      },\n      \"type\": \"abc\",\n      \"valid\": true\n    }\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListTransactions\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.IndexedTransaction>} transactions\n */\n\n/**\n * Structure of GraphQLClient.ResponseSendTx\n *\n * Checkout the following snippet for the format of ResponseSendTx:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"hash\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseSendTx\n * @property {...GraphQLClient.StatusCode} code\n * @property {string} hash\n */\n\n/**\n * Structure of GraphQLClient.ResponseStartSimulator\n *\n * Checkout the following snippet for the format of ResponseStartSimulator:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseStartSimulator\n * @property {...GraphQLClient.StatusCode} code\n */\n\n/**\n * Structure of GraphQLClient.ResponseStopSimulator\n *\n * Checkout the following snippet for the format of ResponseStopSimulator:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseStopSimulator\n * @property {...GraphQLClient.StatusCode} code\n */\n\n/**\n * Structure of GraphQLClient.ResponseSubscribe\n *\n * Checkout the following snippet for the format of ResponseSubscribe:\n * ```json\n{\n  \"accountMigrate\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"accountState\": {\n    \"address\": \"abc\",\n    \"balance\": \"abc\",\n    \"context\": {\n      \"genesisTime\": \"2019-04-29T00:00:00.000Z\",\n      \"genesisTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      },\n      \"renaissanceTime\": \"2019-04-29T00:00:00.000Z\",\n      \"renaissanceTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      }\n    },\n    \"data\": {\n      \"typeUrl\": \"abc\",\n      \"value\": \"abc\"\n    },\n    \"issuer\": \"abc\",\n    \"migratedFrom\": [\n      \"abc\"\n    ],\n    \"migratedTo\": [\n      \"abc\"\n    ],\n    \"moniker\": \"abc\",\n    \"nonce\": \"abc\",\n    \"numAssets\": \"abc\",\n    \"numTxs\": \"abc\",\n    \"pk\": \"abc\",\n    \"poke\": {\n      \"amount\": \"abc\",\n      \"dailyLimit\": \"abc\",\n      \"leftover\": \"abc\"\n    },\n    \"stake\": {\n      \"recentReceivedStakes\": {\n        \"circular\": true,\n        \"fifo\": true,\n        \"items\": [\n          \"abc\"\n        ],\n        \"maxItems\": 123,\n        \"typeUrl\": \"abc\"\n      },\n      \"recentStakes\": {\n        \"circular\": true,\n        \"fifo\": true,\n        \"items\": [\n          \"abc\"\n        ],\n        \"maxItems\": 123,\n        \"typeUrl\": \"abc\"\n      },\n      \"totalReceivedStakes\": \"abc\",\n      \"totalStakes\": \"abc\",\n      \"totalUnstakes\": \"abc\"\n    },\n    \"type\": {\n      \"address\": \"BASE16\",\n      \"hash\": \"KECCAK\",\n      \"pk\": \"ED25519\",\n      \"role\": \"ROLE_ACCOUNT\"\n    }\n  },\n  \"activateProtocol\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"approveWithdraw\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"assetState\": {\n    \"address\": \"abc\",\n    \"consumedTime\": \"2019-04-29T00:00:00.000Z\",\n    \"context\": {\n      \"genesisTime\": \"2019-04-29T00:00:00.000Z\",\n      \"genesisTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      },\n      \"renaissanceTime\": \"2019-04-29T00:00:00.000Z\",\n      \"renaissanceTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      }\n    },\n    \"data\": {\n      \"typeUrl\": \"abc\",\n      \"value\": \"abc\"\n    },\n    \"issuer\": \"abc\",\n    \"moniker\": \"abc\",\n    \"owner\": \"abc\",\n    \"parent\": \"abc\",\n    \"readonly\": true,\n    \"stake\": {\n      \"recentReceivedStakes\": {\n        \"circular\": true,\n        \"fifo\": true,\n        \"items\": [\n          \"abc\"\n        ],\n        \"maxItems\": 123,\n        \"typeUrl\": \"abc\"\n      },\n      \"recentStakes\": {\n        \"circular\": true,\n        \"fifo\": true,\n        \"items\": [\n          \"abc\"\n        ],\n        \"maxItems\": 123,\n        \"typeUrl\": \"abc\"\n      },\n      \"totalReceivedStakes\": \"abc\",\n      \"totalStakes\": \"abc\",\n      \"totalUnstakes\": \"abc\"\n    },\n    \"transferrable\": true,\n    \"ttl\": 123\n  },\n  \"beginBlock\": {\n    \"byzantineValidators\": [\n      {\n        \"chainId\": \"abc\",\n        \"chainType\": \"abc\",\n        \"hash\": \"abc\",\n        \"originalTx\": \"abc\",\n        \"receiverAddress\": \"abc\"\n      }\n    ],\n    \"hash\": \"abc\",\n    \"header\": {\n      \"appHash\": \"abc\",\n      \"chainId\": \"abc\",\n      \"consensusHash\": \"abc\",\n      \"dataHash\": \"abc\",\n      \"evidenceHash\": \"abc\",\n      \"height\": \"abc\",\n      \"lastBlockId\": {\n        \"hash\": \"abc\",\n        \"partsHeader\": {\n          \"hash\": \"abc\",\n          \"total\": 123\n        }\n      },\n      \"lastCommitHash\": \"abc\",\n      \"lastResultsHash\": \"abc\",\n      \"nextValidatorsHash\": \"abc\",\n      \"numTxs\": \"abc\",\n      \"proposerAddress\": \"abc\",\n      \"time\": \"2019-04-29T00:00:00.000Z\",\n      \"totalTxs\": \"abc\",\n      \"validatorsHash\": \"abc\",\n      \"version\": {\n        \"app\": \"abc\",\n        \"block\": \"abc\"\n      }\n    },\n    \"lastCommitInfo\": {\n      \"round\": 123,\n      \"votes\": [\n        {\n          \"signedLastBlock\": true,\n          \"validator\": {\n            \"address\": \"abc\",\n            \"power\": \"abc\"\n          }\n        }\n      ]\n    }\n  },\n  \"code\": \"PROTOCOL_NOT_RUNNING\",\n  \"confirm\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"consensusUpgrade\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"createAsset\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"deactivateProtocol\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"declare\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"declareFile\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"delegate\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"delegateState\": {\n    \"address\": \"abc\",\n    \"context\": {\n      \"genesisTime\": \"2019-04-29T00:00:00.000Z\",\n      \"genesisTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      },\n      \"renaissanceTime\": \"2019-04-29T00:00:00.000Z\",\n      \"renaissanceTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      }\n    },\n    \"data\": {\n      \"typeUrl\": \"abc\",\n      \"value\": \"abc\"\n    },\n    \"ops\": [\n      {\n        \"key\": \"abc\",\n        \"value\": {\n          \"balance\": \"abc\",\n          \"balanceDelta\": \"abc\",\n          \"numTxs\": \"abc\",\n          \"numTxsDelta\": \"abc\",\n          \"rule\": \"abc\"\n        }\n      }\n    ]\n  },\n  \"depositToken\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"endBlock\": {\n    \"height\": \"abc\"\n  },\n  \"exchange\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"forgeState\": {\n    \"accountConfig\": [\n      {\n        \"key\": \"abc\",\n        \"value\": {\n          \"address\": \"abc\",\n          \"balance\": \"abc\",\n          \"pk\": \"abc\"\n        }\n      }\n    ],\n    \"address\": \"abc\",\n    \"consensus\": {\n      \"maxBytes\": \"abc\",\n      \"maxCandidates\": 123,\n      \"maxGas\": \"abc\",\n      \"maxValidators\": 123,\n      \"paramChanged\": true,\n      \"pubKeyTypes\": [\n        \"abc\"\n      ],\n      \"validatorChanged\": true,\n      \"validators\": [\n        {\n          \"address\": \"abc\",\n          \"power\": \"abc\"\n        }\n      ]\n    },\n    \"data\": {\n      \"typeUrl\": \"abc\",\n      \"value\": \"abc\"\n    },\n    \"gas\": [\n      {\n        \"key\": \"abc\",\n        \"value\": 123\n      }\n    ],\n    \"protocols\": [\n      {\n        \"address\": \"abc\",\n        \"name\": \"abc\"\n      }\n    ],\n    \"stakeSummary\": [\n      {\n        \"key\": 123,\n        \"value\": {\n          \"context\": {\n            \"genesisTime\": \"2019-04-29T00:00:00.000Z\",\n            \"genesisTx\": {\n              \"accountMigrate\": {\n                \"address\": \"abc\"\n              },\n              \"code\": \"PROTOCOL_NOT_RUNNING\",\n              \"createAsset\": {\n                \"asset\": \"abc\"\n              },\n              \"hash\": \"abc\",\n              \"height\": \"abc\",\n              \"index\": 123,\n              \"tags\": [\n                {\n                  \"key\": \"abc\",\n                  \"value\": \"abc\"\n                }\n              ],\n              \"time\": \"2019-04-29T00:00:00.000Z\",\n              \"tx\": {\n                \"chainId\": \"abc\",\n                \"from\": \"abc\",\n                \"nonce\": \"abc\",\n                \"pk\": \"abc\",\n                \"signature\": \"abc\",\n                \"signatures\": [\n                  {\n                    \"data\": {\n                      \"typeUrl\": \"abc\",\n                      \"value\": \"abc\"\n                    },\n                    \"delegator\": \"abc\",\n                    \"pk\": \"abc\",\n                    \"signature\": \"abc\",\n                    \"signer\": \"abc\"\n                  }\n                ]\n              }\n            },\n            \"renaissanceTime\": \"2019-04-29T00:00:00.000Z\",\n            \"renaissanceTx\": {\n              \"accountMigrate\": {\n                \"address\": \"abc\"\n              },\n              \"code\": \"PROTOCOL_NOT_RUNNING\",\n              \"createAsset\": {\n                \"asset\": \"abc\"\n              },\n              \"hash\": \"abc\",\n              \"height\": \"abc\",\n              \"index\": 123,\n              \"tags\": [\n                {\n                  \"key\": \"abc\",\n                  \"value\": \"abc\"\n                }\n              ],\n              \"time\": \"2019-04-29T00:00:00.000Z\",\n              \"tx\": {\n                \"chainId\": \"abc\",\n                \"from\": \"abc\",\n                \"nonce\": \"abc\",\n                \"pk\": \"abc\",\n                \"signature\": \"abc\",\n                \"signatures\": [\n                  {\n                    \"data\": {\n                      \"typeUrl\": \"abc\",\n                      \"value\": \"abc\"\n                    },\n                    \"delegator\": \"abc\",\n                    \"pk\": \"abc\",\n                    \"signature\": \"abc\",\n                    \"signer\": \"abc\"\n                  }\n                ]\n              }\n            }\n          },\n          \"totalStakes\": \"abc\",\n          \"totalUnstakes\": \"abc\"\n        }\n      }\n    ],\n    \"tasks\": [\n      {\n        \"key\": \"abc\",\n        \"value\": [\n          {\n            \"actions\": [\n              \"BACKUP\"\n            ],\n            \"dataHash\": \"abc\",\n            \"type\": \"CONFIG_APP\"\n          }\n        ]\n      }\n    ],\n    \"token\": {\n      \"decimal\": 123,\n      \"description\": \"abc\",\n      \"icon\": \"abc\",\n      \"inflationRate\": 123,\n      \"initialSupply\": \"abc\",\n      \"name\": \"abc\",\n      \"symbol\": \"abc\",\n      \"totalSupply\": \"abc\",\n      \"unit\": \"abc\"\n    },\n    \"tokenSwapConfig\": {\n      \"commission\": \"abc\",\n      \"commissionHolderAddress\": \"abc\",\n      \"commissionRate\": 123,\n      \"revokeCommission\": 123,\n      \"withdrawInterval\": 123\n    },\n    \"txConfig\": {\n      \"declare\": {\n        \"hierarchy\": 123,\n        \"restricted\": true\n      },\n      \"delegate\": {\n        \"deltaInterval\": 123,\n        \"typeUrls\": [\n          \"abc\"\n        ]\n      },\n      \"maxAssetSize\": 123,\n      \"maxListSize\": 123,\n      \"maxMultisig\": 123,\n      \"minimumStake\": \"abc\",\n      \"poke\": {\n        \"amount\": \"abc\",\n        \"dailyLimit\": \"abc\",\n        \"enabled\": true\n      },\n      \"stake\": {\n        \"timeoutGeneral\": 123,\n        \"timeoutStakeForNode\": 123\n      }\n    },\n    \"upgradeInfo\": {\n      \"height\": \"abc\",\n      \"version\": \"abc\"\n    },\n    \"version\": \"abc\"\n  },\n  \"protocolState\": {\n    \"address\": \"abc\",\n    \"context\": {\n      \"genesisTime\": \"2019-04-29T00:00:00.000Z\",\n      \"genesisTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      },\n      \"renaissanceTime\": \"2019-04-29T00:00:00.000Z\",\n      \"renaissanceTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      }\n    },\n    \"data\": {\n      \"typeUrl\": \"abc\",\n      \"value\": \"abc\"\n    },\n    \"group\": \"abc\",\n    \"itx\": {\n      \"address\": \"abc\",\n      \"code\": [\n        {\n          \"binary\": \"abc\",\n          \"checksum\": \"abc\"\n        }\n      ],\n      \"data\": {\n        \"typeUrl\": \"abc\",\n        \"value\": \"abc\"\n      },\n      \"description\": \"abc\",\n      \"name\": \"abc\",\n      \"namespace\": \"abc\",\n      \"pipeline\": \"abc\",\n      \"proto\": \"abc\",\n      \"sources\": [\n        \"abc\"\n      ],\n      \"tags\": [\n        \"abc\"\n      ],\n      \"typeUrls\": [\n        {\n          \"module\": \"abc\",\n          \"url\": \"abc\"\n        }\n      ],\n      \"version\": 123\n    },\n    \"migratedFrom\": [\n      \"abc\"\n    ],\n    \"migratedTo\": [\n      \"abc\"\n    ],\n    \"rootHash\": \"abc\",\n    \"status\": \"abc\"\n  },\n  \"revoke\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"revokeDelegate\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"revokeWithdraw\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"stake\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"stakeState\": {\n    \"address\": \"abc\",\n    \"balance\": \"abc\",\n    \"context\": {\n      \"genesisTime\": \"2019-04-29T00:00:00.000Z\",\n      \"genesisTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      },\n      \"renaissanceTime\": \"2019-04-29T00:00:00.000Z\",\n      \"renaissanceTx\": {\n        \"accountMigrate\": {\n          \"address\": \"abc\"\n        },\n        \"code\": \"PROTOCOL_NOT_RUNNING\",\n        \"createAsset\": {\n          \"asset\": \"abc\"\n        },\n        \"hash\": \"abc\",\n        \"height\": \"abc\",\n        \"index\": 123,\n        \"tags\": [\n          {\n            \"key\": \"abc\",\n            \"value\": \"abc\"\n          }\n        ],\n        \"time\": \"2019-04-29T00:00:00.000Z\",\n        \"tx\": {\n          \"chainId\": \"abc\",\n          \"from\": \"abc\",\n          \"nonce\": \"abc\",\n          \"pk\": \"abc\",\n          \"signature\": \"abc\",\n          \"signatures\": [\n            {\n              \"data\": {\n                \"typeUrl\": \"abc\",\n                \"value\": \"abc\"\n              },\n              \"delegator\": \"abc\",\n              \"pk\": \"abc\",\n              \"signature\": \"abc\",\n              \"signer\": \"abc\"\n            }\n          ]\n        }\n      }\n    },\n    \"data\": {\n      \"typeUrl\": \"abc\",\n      \"value\": \"abc\"\n    },\n    \"from\": \"abc\",\n    \"message\": \"abc\",\n    \"to\": \"abc\"\n  },\n  \"sysUpgrade\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"topic\": \"abc\",\n  \"transfer\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"updateAsset\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  },\n  \"withdrawToken\": {\n    \"chainId\": \"abc\",\n    \"from\": \"abc\",\n    \"nonce\": \"abc\",\n    \"pk\": \"abc\",\n    \"signature\": \"abc\",\n    \"signatures\": [\n      {\n        \"data\": {\n          \"typeUrl\": \"abc\",\n          \"value\": \"abc\"\n        },\n        \"delegator\": \"abc\",\n        \"pk\": \"abc\",\n        \"signature\": \"abc\",\n        \"signer\": \"abc\"\n      }\n    ]\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseSubscribe\n * @property {...GraphQLClient.Transaction} accountMigrate\n * @property {...GraphQLClient.AccountState} accountState\n * @property {...GraphQLClient.Transaction} activateProtocol\n * @property {...GraphQLClient.Transaction} approveWithdraw\n * @property {...GraphQLClient.AssetState} assetState\n * @property {...GraphQLClient.RequestBeginBlock} beginBlock\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.Transaction} confirm\n * @property {...GraphQLClient.Transaction} consensusUpgrade\n * @property {...GraphQLClient.Transaction} createAsset\n * @property {...GraphQLClient.Transaction} deactivateProtocol\n * @property {...GraphQLClient.Transaction} declare\n * @property {...GraphQLClient.Transaction} declareFile\n * @property {...GraphQLClient.Transaction} delegate\n * @property {...GraphQLClient.DelegateState} delegateState\n * @property {...GraphQLClient.Transaction} depositToken\n * @property {...GraphQLClient.RequestEndBlock} endBlock\n * @property {...GraphQLClient.Transaction} exchange\n * @property {...GraphQLClient.ForgeState} forgeState\n * @property {...GraphQLClient.ProtocolState} protocolState\n * @property {...GraphQLClient.Transaction} revoke\n * @property {...GraphQLClient.Transaction} revokeDelegate\n * @property {...GraphQLClient.Transaction} revokeWithdraw\n * @property {...GraphQLClient.Transaction} stake\n * @property {...GraphQLClient.StakeState} stakeState\n * @property {...GraphQLClient.Transaction} sysUpgrade\n * @property {string} topic\n * @property {...GraphQLClient.Transaction} transfer\n * @property {...GraphQLClient.Transaction} updateAsset\n * @property {...GraphQLClient.Transaction} withdrawToken\n */\n\n/**\n * Structure of GraphQLClient.ResponseUnsubscribe\n *\n * Checkout the following snippet for the format of ResponseUnsubscribe:\n * ```json\n{\n  \"code\": \"PROTOCOL_NOT_RUNNING\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseUnsubscribe\n * @property {...GraphQLClient.StatusCode} code\n */\n\n/**\n * Structure of GraphQLClient.RetrieveSwapTx\n *\n * Checkout the following snippet for the format of RetrieveSwapTx:\n * ```json\n{\n  \"address\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"hashkey\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RetrieveSwapTx\n * @property {string} address\n * @property {...GraphQLClient.Any} data\n * @property {string} hashkey\n */\n\n/**\n * Structure of GraphQLClient.RevokeSwapTx\n *\n * Checkout the following snippet for the format of RevokeSwapTx:\n * ```json\n{\n  \"address\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RevokeSwapTx\n * @property {string} address\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.RevokeTetherTx\n *\n * Checkout the following snippet for the format of RevokeTetherTx:\n * ```json\n{\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"tether\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RevokeTetherTx\n * @property {...GraphQLClient.Any} data\n * @property {string} tether\n */\n\n/**\n * Structure of GraphQLClient.SetupSwapTx\n *\n * Checkout the following snippet for the format of SetupSwapTx:\n * ```json\n{\n  \"assets\": [\n    \"abc\"\n  ],\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"hashlock\": \"abc\",\n  \"locktime\": 123,\n  \"receiver\": \"abc\",\n  \"value\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.SetupSwapTx\n * @property {Array<...GraphQLClient.string>} assets\n * @property {...GraphQLClient.Any} data\n * @property {string} hashlock\n * @property {number} locktime\n * @property {string} receiver\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.StakeConfig\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.StakeConfig\n * @property {number} timeoutGeneral\n * @property {number} timeoutStakeForNode\n */\n\n/**\n * Structure of GraphQLClient.StakeContext\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.StakeContext\n * @property {...GraphQLClient.CircularQueue} recentReceivedStakes\n * @property {...GraphQLClient.CircularQueue} recentStakes\n * @property {string} totalReceivedStakes\n * @property {string} totalStakes\n * @property {string} totalUnstakes\n */\n\n/**\n * Structure of GraphQLClient.StakeDataType\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.StakeDataType\n * @property {string} type\n */\n\n/**\n * Structure of GraphQLClient.StakeState\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.StakeState\n * @property {string} address\n * @property {string} balance\n * @property {...GraphQLClient.StateContext} context\n * @property {...GraphQLClient.Any} data\n * @property {string} from\n * @property {string} message\n * @property {string} to\n */\n\n/**\n * Structure of GraphQLClient.StakeSummary\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.StakeSummary\n * @property {...GraphQLClient.StateContext} context\n * @property {string} totalStakes\n * @property {string} totalUnstakes\n */\n\n/**\n * Structure of GraphQLClient.StakeSummaryEntry\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.StakeSummaryEntry\n * @property {number} key\n * @property {...GraphQLClient.StakeSummary} value\n */\n\n/**\n * Structure of GraphQLClient.StakeTx\n *\n * Checkout the following snippet for the format of StakeTx:\n * ```json\n{\n  \"data\": {\n    \"type\": \"abc\"\n  },\n  \"message\": \"abc\",\n  \"to\": \"abc\",\n  \"value\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.StakeTx\n * @property {...GraphQLClient.StakeDataType} data\n * @property {string} message\n * @property {string} to\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.StateContext\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.StateContext\n * @property {string} genesisTime\n * @property {...GraphQLClient.TransactionInfo} genesisTx\n * @property {string} renaissanceTime\n * @property {...GraphQLClient.TransactionInfo} renaissanceTx\n */\n\n/**\n * Structure of GraphQLClient.StorageStatus\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.StorageStatus\n * @property {...GraphQLClient.DiskSpaceStatus} diskSpace\n * @property {boolean} health\n * @property {string} indexerServer\n * @property {string} stateDb\n */\n\n/**\n * Structure of GraphQLClient.SwapState\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.SwapState\n * @property {string} address\n * @property {Array<...GraphQLClient.string>} assets\n * @property {...GraphQLClient.StateContext} context\n * @property {string} hash\n * @property {string} hashkey\n * @property {string} hashlock\n * @property {number} locktime\n * @property {string} receiver\n * @property {string} sender\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.SysUpgradeTx\n *\n * Checkout the following snippet for the format of SysUpgradeTx:\n * ```json\n{\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"gracePeriod\": \"abc\",\n  \"task\": {\n    \"actions\": [\n      \"BACKUP\"\n    ],\n    \"dataHash\": \"abc\",\n    \"type\": \"CONFIG_APP\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.SysUpgradeTx\n * @property {...GraphQLClient.Any} data\n * @property {string} gracePeriod\n * @property {...GraphQLClient.UpgradeTask} task\n */\n\n/**\n * Structure of GraphQLClient.TasksEntry\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TasksEntry\n * @property {string} key\n * @property {...GraphQLClient.UpgradeTasks} value\n */\n\n/**\n * Structure of GraphQLClient.TetherExchangeInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TetherExchangeInfo\n * @property {Array<...GraphQLClient.string>} assets\n * @property {...GraphQLClient.Transaction} deposit\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.TetherState\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TetherState\n * @property {string} address\n * @property {boolean} available\n * @property {string} charge\n * @property {string} commission\n * @property {string} custodian\n * @property {string} depositor\n * @property {string} hash\n * @property {string} locktime\n * @property {string} target\n * @property {string} value\n * @property {string} withdrawer\n */\n\n/**\n * Structure of GraphQLClient.TetherTradeInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TetherTradeInfo\n * @property {Array<...GraphQLClient.string>} assets\n * @property {string} tether\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.TokenSwapConfig\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TokenSwapConfig\n * @property {string} commission\n * @property {string} commissionHolderAddress\n * @property {number} commissionRate\n * @property {number} revokeCommission\n * @property {number} withdrawInterval\n */\n\n/**\n * Structure of GraphQLClient.Transaction\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.Transaction\n * @property {string} chainId\n * @property {string} from\n * @property {...Itx} itx\n * @property {undefined} itxJson\n * @property {string} nonce\n * @property {string} pk\n * @property {string} signature\n * @property {Array<...GraphQLClient.Multisig>} signatures\n */\n\n/**\n * Structure of GraphQLClient.TransactionConfig\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TransactionConfig\n * @property {...GraphQLClient.DeclareConfig} declare\n * @property {...GraphQLClient.DelegateConfig} delegate\n * @property {number} maxAssetSize\n * @property {number} maxListSize\n * @property {number} maxMultisig\n * @property {string} minimumStake\n * @property {...GraphQLClient.PokeConfig} poke\n * @property {...GraphQLClient.StakeConfig} stake\n */\n\n/**\n * Structure of GraphQLClient.TransactionInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TransactionInfo\n * @property {...GraphQLClient.ExtraAccountMigrate} accountMigrate\n * @property {...GraphQLClient.StatusCode} code\n * @property {...GraphQLClient.ExtraCreateAsset} createAsset\n * @property {string} hash\n * @property {string} height\n * @property {number} index\n * @property {Array<...GraphQLClient.KvPair>} tags\n * @property {string} time\n * @property {...GraphQLClient.Transaction} tx\n */\n\n/**\n * Structure of GraphQLClient.TransferTx\n *\n * Checkout the following snippet for the format of TransferTx:\n * ```json\n{\n  \"assets\": [\n    \"abc\"\n  ],\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"to\": \"abc\",\n  \"value\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TransferTx\n * @property {Array<...GraphQLClient.string>} assets\n * @property {...GraphQLClient.Any} data\n * @property {string} to\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.TypeUrls\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TypeUrls\n * @property {string} module\n * @property {string} url\n */\n\n/**\n * Structure of GraphQLClient.UnconfirmedTxs\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.UnconfirmedTxs\n * @property {number} nTxs\n * @property {Array<...GraphQLClient.Transaction>} txs\n */\n\n/**\n * Structure of GraphQLClient.UpdateAssetTx\n *\n * Checkout the following snippet for the format of UpdateAssetTx:\n * ```json\n{\n  \"address\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"moniker\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.UpdateAssetTx\n * @property {string} address\n * @property {...GraphQLClient.Any} data\n * @property {string} moniker\n */\n\n/**\n * Structure of GraphQLClient.UpgradeInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.UpgradeInfo\n * @property {string} height\n * @property {string} version\n */\n\n/**\n * Structure of GraphQLClient.UpgradeNodeTx\n *\n * Checkout the following snippet for the format of UpgradeNodeTx:\n * ```json\n{\n  \"height\": \"abc\",\n  \"override\": true,\n  \"version\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.UpgradeNodeTx\n * @property {string} height\n * @property {boolean} override\n * @property {string} version\n */\n\n/**\n * Structure of GraphQLClient.UpgradeTask\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.UpgradeTask\n * @property {Array<...GraphQLClient.UpgradeAction>} actions\n * @property {string} dataHash\n * @property {...GraphQLClient.UpgradeType} type\n */\n\n/**\n * Structure of GraphQLClient.UpgradeTasks\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.UpgradeTasks\n * @property {Array<...GraphQLClient.UpgradeTask>} item\n */\n\n/**\n * Structure of GraphQLClient.Validator\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.Validator\n * @property {string} address\n * @property {string} power\n */\n\n/**\n * Structure of GraphQLClient.ValidatorInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ValidatorInfo\n * @property {string} address\n * @property {...GraphQLClient.GeoInfo} geoInfo\n * @property {string} name\n * @property {string} proposerPriority\n * @property {...GraphQLClient.PubKey} pubKey\n * @property {string} votingPower\n */\n\n/**\n * Structure of GraphQLClient.ValidatorsInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ValidatorsInfo\n * @property {string} blockHeight\n * @property {Array<...GraphQLClient.ValidatorInfo>} validators\n */\n\n/**\n * Structure of GraphQLClient.Version\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.Version\n * @property {string} app\n * @property {string} block\n */\n\n/**\n * Structure of GraphQLClient.VoteInfo\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.VoteInfo\n * @property {boolean} signedLastBlock\n * @property {...GraphQLClient.Validator} validator\n */\n\n/**\n * Structure of GraphQLClient.WalletType\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.WalletType\n * @property {...GraphQLClient.EncodingType} address\n * @property {...GraphQLClient.HashType} hash\n * @property {...GraphQLClient.KeyType} pk\n * @property {...GraphQLClient.RoleType} role\n */\n\n/**\n * Structure of GraphQLClient.WithdrawTetherTx\n *\n * Checkout the following snippet for the format of WithdrawTetherTx:\n * ```json\n{\n  \"chainId\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"expiredAt\": \"2019-04-29T00:00:00.000Z\",\n  \"from\": \"abc\",\n  \"nonce\": \"abc\",\n  \"pk\": \"abc\",\n  \"receiver\": {\n    \"assets\": [\n      \"abc\"\n    ],\n    \"tether\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"sender\": {\n    \"assets\": [\n      \"abc\"\n    ],\n    \"value\": \"abc\"\n  },\n  \"signature\": \"abc\",\n  \"signatures\": [\n    {\n      \"data\": {\n        \"typeUrl\": \"abc\",\n        \"value\": \"abc\"\n      },\n      \"delegator\": \"abc\",\n      \"pk\": \"abc\",\n      \"signature\": \"abc\",\n      \"signer\": \"abc\"\n    }\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.WithdrawTetherTx\n * @property {string} chainId\n * @property {...GraphQLClient.Any} data\n * @property {string} expiredAt\n * @property {string} from\n * @property {string} nonce\n * @property {string} pk\n * @property {...GraphQLClient.TetherTradeInfo} receiver\n * @property {...GraphQLClient.ExchangeInfo} sender\n * @property {string} signature\n * @property {Array<...GraphQLClient.Multisig>} signatures\n */\n\n/**\n * Structure of GraphQLClient.GetAccountStateParams\n *\n * Checkout the following snippet for the format of GetAccountStateParams:\n * ```json\n{\n  \"address\": \"abc\",\n  \"height\": \"abc\",\n  \"keys\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetAccountStateParams\n * @property {string} address\n * @property {string} height\n * @property {Array<...GraphQLClient.string>} keys\n */\n\n/**\n * Structure of GraphQLClient.GetAssetStateParams\n *\n * Checkout the following snippet for the format of GetAssetStateParams:\n * ```json\n{\n  \"address\": \"abc\",\n  \"height\": \"abc\",\n  \"keys\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetAssetStateParams\n * @property {string} address\n * @property {string} height\n * @property {Array<...GraphQLClient.string>} keys\n */\n\n/**\n * Structure of GraphQLClient.GetBlockParams\n *\n * Checkout the following snippet for the format of GetBlockParams:\n * ```json\n{\n  \"height\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetBlockParams\n * @property {string} height\n */\n\n/**\n * Structure of GraphQLClient.GetBlocksParams\n *\n * Checkout the following snippet for the format of GetBlocksParams:\n * ```json\n{\n  \"emptyExcluded\": true\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetBlocksParams\n * @property {boolean} emptyExcluded\n * @property {...GraphQLClient.RangeFilter} heightFilter\n * @property {...GraphQLClient.PageInput} paging\n */\n\n/**\n * Structure of GraphQLClient.GetConfigParams\n *\n * Checkout the following snippet for the format of GetConfigParams:\n * ```json\n{\n  \"parsed\": true\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetConfigParams\n * @property {boolean} parsed\n */\n\n/**\n * Structure of GraphQLClient.GetDelegateStateParams\n *\n * Checkout the following snippet for the format of GetDelegateStateParams:\n * ```json\n{\n  \"address\": \"abc\",\n  \"height\": \"abc\",\n  \"keys\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetDelegateStateParams\n * @property {string} address\n * @property {string} height\n * @property {Array<...GraphQLClient.string>} keys\n */\n\n/**\n * Structure of GraphQLClient.GetForgeStateParams\n *\n * Checkout the following snippet for the format of GetForgeStateParams:\n * ```json\n{\n  \"height\": \"abc\",\n  \"keys\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetForgeStateParams\n * @property {string} height\n * @property {Array<...GraphQLClient.string>} keys\n */\n\n/**\n * Structure of GraphQLClient.GetForgeStatsByDayParams\n *\n * Checkout the following snippet for the format of GetForgeStatsByDayParams:\n * ```json\n{\n  \"endDate\": \"abc\",\n  \"startDate\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetForgeStatsByDayParams\n * @property {string} endDate\n * @property {string} startDate\n */\n\n/**\n * Structure of GraphQLClient.GetForgeStatsByHourParams\n *\n * Checkout the following snippet for the format of GetForgeStatsByHourParams:\n * ```json\n{\n  \"date\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetForgeStatsByHourParams\n * @property {string} date\n */\n\n/**\n * Structure of GraphQLClient.GetProtocolStateParams\n *\n * Checkout the following snippet for the format of GetProtocolStateParams:\n * ```json\n{\n  \"address\": \"abc\",\n  \"height\": \"abc\",\n  \"keys\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetProtocolStateParams\n * @property {string} address\n * @property {string} height\n * @property {Array<...GraphQLClient.string>} keys\n */\n\n/**\n * Structure of GraphQLClient.GetProtocolsParams\n *\n * Checkout the following snippet for the format of GetProtocolsParams:\n * ```json\n{\n  \"address\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetProtocolsParams\n * @property {string} address\n */\n\n/**\n * Structure of GraphQLClient.GetStakeStateParams\n *\n * Checkout the following snippet for the format of GetStakeStateParams:\n * ```json\n{\n  \"address\": \"abc\",\n  \"height\": \"abc\",\n  \"keys\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetStakeStateParams\n * @property {string} address\n * @property {string} height\n * @property {Array<...GraphQLClient.string>} keys\n */\n\n/**\n * Structure of GraphQLClient.GetSwapStateParams\n *\n * Checkout the following snippet for the format of GetSwapStateParams:\n * ```json\n{\n  \"address\": \"abc\",\n  \"height\": \"abc\",\n  \"keys\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetSwapStateParams\n * @property {string} address\n * @property {string} height\n * @property {Array<...GraphQLClient.string>} keys\n */\n\n/**\n * Structure of GraphQLClient.GetTetherStateParams\n *\n * Checkout the following snippet for the format of GetTetherStateParams:\n * ```json\n{\n  \"address\": \"abc\",\n  \"height\": \"abc\",\n  \"keys\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetTetherStateParams\n * @property {string} address\n * @property {string} height\n * @property {Array<...GraphQLClient.string>} keys\n */\n\n/**\n * Structure of GraphQLClient.GetTxParams\n *\n * Checkout the following snippet for the format of GetTxParams:\n * ```json\n{\n  \"hash\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetTxParams\n * @property {string} hash\n */\n\n/**\n * Structure of GraphQLClient.GetUnconfirmedTxsParams\n *\n * Checkout the following snippet for the format of GetUnconfirmedTxsParams:\n * ```json\n{}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetUnconfirmedTxsParams\n * @property {...GraphQLClient.PageInput} paging\n */\n\n/**\n * Structure of GraphQLClient.ListAssetTransactionsParams\n *\n * Checkout the following snippet for the format of ListAssetTransactionsParams:\n * ```json\n{\n  \"address\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListAssetTransactionsParams\n * @property {string} address\n * @property {...GraphQLClient.PageInput} paging\n */\n\n/**\n * Structure of GraphQLClient.ListAssetsParams\n *\n * Checkout the following snippet for the format of ListAssetsParams:\n * ```json\n{\n  \"ownerAddress\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListAssetsParams\n * @property {string} ownerAddress\n * @property {...GraphQLClient.PageInput} paging\n */\n\n/**\n * Structure of GraphQLClient.ListBlocksParams\n *\n * Checkout the following snippet for the format of ListBlocksParams:\n * ```json\n{\n  \"proposer\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListBlocksParams\n * @property {...GraphQLClient.RangeFilter} heightFilter\n * @property {...GraphQLClient.RangeFilter} numInvalidTxsFilter\n * @property {...GraphQLClient.RangeFilter} numTxsFilter\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} proposer\n * @property {...GraphQLClient.TimeFilter} timeFilter\n */\n\n/**\n * Structure of GraphQLClient.ListStakesParams\n *\n * Checkout the following snippet for the format of ListStakesParams:\n * ```json\n{}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListStakesParams\n * @property {...GraphQLClient.AddressFilter} addressFilter\n * @property {...GraphQLClient.PageInput} paging\n */\n\n/**\n * Structure of GraphQLClient.ListSwapParams\n *\n * Checkout the following snippet for the format of ListSwapParams:\n * ```json\n{\n  \"available\": true,\n  \"paging\": \"abc\",\n  \"receiver\": \"abc\",\n  \"sender\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListSwapParams\n * @property {boolean} available\n * @property {string} paging\n * @property {string} receiver\n * @property {string} sender\n */\n\n/**\n * Structure of GraphQLClient.ListTethersParams\n *\n * Checkout the following snippet for the format of ListTethersParams:\n * ```json\n{\n  \"available\": true,\n  \"custodian\": \"abc\",\n  \"depositor\": \"abc\",\n  \"paging\": \"abc\",\n  \"withdrawer\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListTethersParams\n * @property {boolean} available\n * @property {string} custodian\n * @property {string} depositor\n * @property {string} paging\n * @property {string} withdrawer\n */\n\n/**\n * Structure of GraphQLClient.ListTopAccountsParams\n *\n * Checkout the following snippet for the format of ListTopAccountsParams:\n * ```json\n{}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListTopAccountsParams\n * @property {...GraphQLClient.PageInput} paging\n */\n\n/**\n * Structure of GraphQLClient.ListTransactionsParams\n *\n * Checkout the following snippet for the format of ListTransactionsParams:\n * ```json\n{}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListTransactionsParams\n * @property {...GraphQLClient.AddressFilter} addressFilter\n * @property {...GraphQLClient.PageInput} paging\n * @property {...GraphQLClient.TimeFilter} timeFilter\n * @property {...GraphQLClient.TypeFilter} typeFilter\n * @property {...GraphQLClient.ValidityFilter} validityFilter\n */\n\n/**\n * Structure of GraphQLClient.SendTxParams\n *\n * Checkout the following snippet for the format of SendTxParams:\n * ```json\n{\n  \"commit\": true,\n  \"token\": \"abc\",\n  \"tx\": \"abc\",\n  \"wallet\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.SendTxParams\n * @property {boolean} commit\n * @property {string} token\n * @property {string} tx\n * @property {string} wallet\n */\n\n/**\n * Structure of GraphQLClient.UnsubscribeParams\n *\n * Checkout the following snippet for the format of UnsubscribeParams:\n * ```json\n{\n  \"topic\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.UnsubscribeParams\n * @property {string} topic\n */\n\n/**\n * Structure of GraphQLClient.SubscribeParams\n *\n * Checkout the following snippet for the format of SubscribeParams:\n * ```json\n{\n  \"filter\": \"abc\",\n  \"topic\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.SubscribeParams\n * @property {string} filter\n * @property {string} topic\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.RevokeSwapTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.RevokeSwapTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send RevokeSwapTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendRevokeSwapTx\n * @param {GraphQLClient.RevokeSwapTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.WithdrawTokenTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.WithdrawTokenTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send WithdrawTokenTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendWithdrawTokenTx\n * @param {GraphQLClient.WithdrawTokenTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.DeactivateProtocolTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.DeactivateProtocolTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send DeactivateProtocolTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendDeactivateProtocolTx\n * @param {GraphQLClient.DeactivateProtocolTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.AccountMigrateTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.AccountMigrateTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send AccountMigrateTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendAccountMigrateTx\n * @param {GraphQLClient.AccountMigrateTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.SetupSwapTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.SetupSwapTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send SetupSwapTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendSetupSwapTx\n * @param {GraphQLClient.SetupSwapTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.DepositTetherTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.DepositTetherTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send DepositTetherTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendDepositTetherTx\n * @param {GraphQLClient.DepositTetherTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.StakeTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.StakeTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send StakeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendStakeTx\n * @param {GraphQLClient.StakeTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.DeployProtocolTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.DeployProtocolTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send DeployProtocolTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendDeployProtocolTx\n * @param {GraphQLClient.DeployProtocolTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.CreateAssetTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.CreateAssetTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send CreateAssetTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendCreateAssetTx\n * @param {GraphQLClient.CreateAssetTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.ExchangeTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.ExchangeTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send ExchangeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendExchangeTx\n * @param {GraphQLClient.ExchangeTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.ConsumeAssetTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.ConsumeAssetTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send ConsumeAssetTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendConsumeAssetTx\n * @param {GraphQLClient.ConsumeAssetTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.RetrieveSwapTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.RetrieveSwapTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send RetrieveSwapTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendRetrieveSwapTx\n * @param {GraphQLClient.RetrieveSwapTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.TransferTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.TransferTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send TransferTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendTransferTx\n * @param {GraphQLClient.TransferTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.RevokeTetherTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.RevokeTetherTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send RevokeTetherTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendRevokeTetherTx\n * @param {GraphQLClient.RevokeTetherTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.ApproveWithdrawTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.ApproveWithdrawTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send ApproveWithdrawTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendApproveWithdrawTx\n * @param {GraphQLClient.ApproveWithdrawTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.DelegateTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.DelegateTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send DelegateTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendDelegateTx\n * @param {GraphQLClient.DelegateTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.ApproveTetherTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.ApproveTetherTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send ApproveTetherTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendApproveTetherTx\n * @param {GraphQLClient.ApproveTetherTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.DepositTokenTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.DepositTokenTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send DepositTokenTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendDepositTokenTx\n * @param {GraphQLClient.DepositTokenTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.PokeTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.PokeTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send PokeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendPokeTx\n * @param {GraphQLClient.PokeTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.ExchangeTetherTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.ExchangeTetherTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send ExchangeTetherTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendExchangeTetherTx\n * @param {GraphQLClient.ExchangeTetherTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.WithdrawTetherTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.WithdrawTetherTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send WithdrawTetherTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendWithdrawTetherTx\n * @param {GraphQLClient.WithdrawTetherTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.ActivateProtocolTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.ActivateProtocolTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send ActivateProtocolTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendActivateProtocolTx\n * @param {GraphQLClient.ActivateProtocolTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.UpgradeNodeTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.UpgradeNodeTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send UpgradeNodeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendUpgradeNodeTx\n * @param {GraphQLClient.UpgradeNodeTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.UpdateAssetTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.UpdateAssetTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send UpdateAssetTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendUpdateAssetTx\n * @param {GraphQLClient.UpdateAssetTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.AcquireAssetTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.AcquireAssetTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send AcquireAssetTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendAcquireAssetTx\n * @param {GraphQLClient.AcquireAssetTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.DeclareTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.DeclareTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send DeclareTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendDeclareTx\n * @param {GraphQLClient.DeclareTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.RevokeWithdrawTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.RevokeWithdrawTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send RevokeWithdrawTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendRevokeWithdrawTx\n * @param {GraphQLClient.RevokeWithdrawTxInput} params\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n/**\n * Encode a RevokeSwapTx transaction for later use\n *\n * @name GraphQLClient#encodeRevokeSwapTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.RevokeSwapTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a WithdrawTokenTx transaction for later use\n *\n * @name GraphQLClient#encodeWithdrawTokenTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.WithdrawTokenTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a DeactivateProtocolTx transaction for later use\n *\n * @name GraphQLClient#encodeDeactivateProtocolTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.DeactivateProtocolTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a AccountMigrateTx transaction for later use\n *\n * @name GraphQLClient#encodeAccountMigrateTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.AccountMigrateTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a SetupSwapTx transaction for later use\n *\n * @name GraphQLClient#encodeSetupSwapTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.SetupSwapTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a DepositTetherTx transaction for later use\n *\n * @name GraphQLClient#encodeDepositTetherTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.DepositTetherTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a StakeTx transaction for later use\n *\n * @name GraphQLClient#encodeStakeTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.StakeTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a DeployProtocolTx transaction for later use\n *\n * @name GraphQLClient#encodeDeployProtocolTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.DeployProtocolTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a CreateAssetTx transaction for later use\n *\n * @name GraphQLClient#encodeCreateAssetTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.CreateAssetTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a ExchangeTx transaction for later use\n *\n * @name GraphQLClient#encodeExchangeTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.ExchangeTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a ConsumeAssetTx transaction for later use\n *\n * @name GraphQLClient#encodeConsumeAssetTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.ConsumeAssetTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a RetrieveSwapTx transaction for later use\n *\n * @name GraphQLClient#encodeRetrieveSwapTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.RetrieveSwapTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a TransferTx transaction for later use\n *\n * @name GraphQLClient#encodeTransferTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.TransferTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a RevokeTetherTx transaction for later use\n *\n * @name GraphQLClient#encodeRevokeTetherTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.RevokeTetherTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a ApproveWithdrawTx transaction for later use\n *\n * @name GraphQLClient#encodeApproveWithdrawTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.ApproveWithdrawTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a DelegateTx transaction for later use\n *\n * @name GraphQLClient#encodeDelegateTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.DelegateTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a ApproveTetherTx transaction for later use\n *\n * @name GraphQLClient#encodeApproveTetherTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.ApproveTetherTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a DepositTokenTx transaction for later use\n *\n * @name GraphQLClient#encodeDepositTokenTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.DepositTokenTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a PokeTx transaction for later use\n *\n * @name GraphQLClient#encodePokeTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.PokeTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a ExchangeTetherTx transaction for later use\n *\n * @name GraphQLClient#encodeExchangeTetherTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.ExchangeTetherTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a WithdrawTetherTx transaction for later use\n *\n * @name GraphQLClient#encodeWithdrawTetherTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.WithdrawTetherTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a ActivateProtocolTx transaction for later use\n *\n * @name GraphQLClient#encodeActivateProtocolTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.ActivateProtocolTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a UpgradeNodeTx transaction for later use\n *\n * @name GraphQLClient#encodeUpgradeNodeTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.UpgradeNodeTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a UpdateAssetTx transaction for later use\n *\n * @name GraphQLClient#encodeUpdateAssetTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.UpdateAssetTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a AcquireAssetTx transaction for later use\n *\n * @name GraphQLClient#encodeAcquireAssetTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.AcquireAssetTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a DeclareTx transaction for later use\n *\n * @name GraphQLClient#encodeDeclareTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.DeclareTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * Encode a RevokeWithdrawTx transaction for later use\n *\n * @name GraphQLClient#encodeRevokeWithdrawTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.RevokeWithdrawTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n/**\n * getAccountState\n *\n * @name GraphQLClient#getAccountState\n * @param {GraphQLClient.GetAccountStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetAccountState>} Checkout {@link GraphQLClient.ResponseGetAccountState} for resolved data format\n */\n\n/**\n * getAssetState\n *\n * @name GraphQLClient#getAssetState\n * @param {GraphQLClient.GetAssetStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetAssetState>} Checkout {@link GraphQLClient.ResponseGetAssetState} for resolved data format\n */\n\n/**\n * getBlock\n *\n * @name GraphQLClient#getBlock\n * @param {GraphQLClient.GetBlockParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetBlock>} Checkout {@link GraphQLClient.ResponseGetBlock} for resolved data format\n */\n\n/**\n * getBlocks\n *\n * @name GraphQLClient#getBlocks\n * @param {GraphQLClient.GetBlocksParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetBlocks>} Checkout {@link GraphQLClient.ResponseGetBlocks} for resolved data format\n */\n\n/**\n * getChainInfo\n *\n * @name GraphQLClient#getChainInfo\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetChainInfo>} Checkout {@link GraphQLClient.ResponseGetChainInfo} for resolved data format\n */\n\n/**\n * getConfig\n *\n * @name GraphQLClient#getConfig\n * @param {GraphQLClient.GetConfigParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetConfig>} Checkout {@link GraphQLClient.ResponseGetConfig} for resolved data format\n */\n\n/**\n * getDelegateState\n *\n * @name GraphQLClient#getDelegateState\n * @param {GraphQLClient.GetDelegateStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetDelegateState>} Checkout {@link GraphQLClient.ResponseGetDelegateState} for resolved data format\n */\n\n/**\n * getForgeState\n *\n * @name GraphQLClient#getForgeState\n * @param {GraphQLClient.GetForgeStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetForgeState>} Checkout {@link GraphQLClient.ResponseGetForgeState} for resolved data format\n */\n\n/**\n * getForgeStats\n *\n * @name GraphQLClient#getForgeStats\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetForgeStats>} Checkout {@link GraphQLClient.ResponseGetForgeStats} for resolved data format\n */\n\n/**\n * getForgeStatsByDay\n *\n * @name GraphQLClient#getForgeStatsByDay\n * @param {GraphQLClient.GetForgeStatsByDayParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetForgeStats>} Checkout {@link GraphQLClient.ResponseGetForgeStats} for resolved data format\n */\n\n/**\n * getForgeStatsByHour\n *\n * @name GraphQLClient#getForgeStatsByHour\n * @param {GraphQLClient.GetForgeStatsByHourParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetForgeStats>} Checkout {@link GraphQLClient.ResponseGetForgeStats} for resolved data format\n */\n\n/**\n * getHealthStatus\n *\n * @name GraphQLClient#getHealthStatus\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetHealthStatus>} Checkout {@link GraphQLClient.ResponseGetHealthStatus} for resolved data format\n */\n\n/**\n * getNetInfo\n *\n * @name GraphQLClient#getNetInfo\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetNetInfo>} Checkout {@link GraphQLClient.ResponseGetNetInfo} for resolved data format\n */\n\n/**\n * getNodeInfo\n *\n * @name GraphQLClient#getNodeInfo\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetNodeInfo>} Checkout {@link GraphQLClient.ResponseGetNodeInfo} for resolved data format\n */\n\n/**\n * getProtocolState\n *\n * @name GraphQLClient#getProtocolState\n * @param {GraphQLClient.GetProtocolStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetProtocolState>} Checkout {@link GraphQLClient.ResponseGetProtocolState} for resolved data format\n */\n\n/**\n * getProtocols\n *\n * @name GraphQLClient#getProtocols\n * @param {GraphQLClient.GetProtocolsParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetProtocols>} Checkout {@link GraphQLClient.ResponseGetProtocols} for resolved data format\n */\n\n/**\n * getSimulatorStatus\n *\n * @name GraphQLClient#getSimulatorStatus\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetSimulatorStatus>} Checkout {@link GraphQLClient.ResponseGetSimulatorStatus} for resolved data format\n */\n\n/**\n * getStakeState\n *\n * @name GraphQLClient#getStakeState\n * @param {GraphQLClient.GetStakeStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetStakeState>} Checkout {@link GraphQLClient.ResponseGetStakeState} for resolved data format\n */\n\n/**\n * getSwapState\n *\n * @name GraphQLClient#getSwapState\n * @param {GraphQLClient.GetSwapStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetSwapState>} Checkout {@link GraphQLClient.ResponseGetSwapState} for resolved data format\n */\n\n/**\n * getTetherState\n *\n * @name GraphQLClient#getTetherState\n * @param {GraphQLClient.GetTetherStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetTetherState>} Checkout {@link GraphQLClient.ResponseGetTetherState} for resolved data format\n */\n\n/**\n * getTx\n *\n * @name GraphQLClient#getTx\n * @param {GraphQLClient.GetTxParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetTx>} Checkout {@link GraphQLClient.ResponseGetTx} for resolved data format\n */\n\n/**\n * getUnconfirmedTxs\n *\n * @name GraphQLClient#getUnconfirmedTxs\n * @param {GraphQLClient.GetUnconfirmedTxsParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetUnconfirmedTxs>} Checkout {@link GraphQLClient.ResponseGetUnconfirmedTxs} for resolved data format\n */\n\n/**\n * getValidatorsInfo\n *\n * @name GraphQLClient#getValidatorsInfo\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetValidatorsInfo>} Checkout {@link GraphQLClient.ResponseGetValidatorsInfo} for resolved data format\n */\n\n/**\n * listAssetTransactions\n *\n * @name GraphQLClient#listAssetTransactions\n * @param {GraphQLClient.ListAssetTransactionsParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListAssetTransactions>} Checkout {@link GraphQLClient.ResponseListAssetTransactions} for resolved data format\n */\n\n/**\n * listAssets\n *\n * @name GraphQLClient#listAssets\n * @param {GraphQLClient.ListAssetsParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListAssets>} Checkout {@link GraphQLClient.ResponseListAssets} for resolved data format\n */\n\n/**\n * listBlocks\n *\n * @name GraphQLClient#listBlocks\n * @param {GraphQLClient.ListBlocksParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListBlocks>} Checkout {@link GraphQLClient.ResponseListBlocks} for resolved data format\n */\n\n/**\n * listStakes\n *\n * @name GraphQLClient#listStakes\n * @param {GraphQLClient.ListStakesParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListStakes>} Checkout {@link GraphQLClient.ResponseListStakes} for resolved data format\n */\n\n/**\n * listSwap\n *\n * @name GraphQLClient#listSwap\n * @param {GraphQLClient.ListSwapParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListSwap>} Checkout {@link GraphQLClient.ResponseListSwap} for resolved data format\n */\n\n/**\n * listTethers\n *\n * @name GraphQLClient#listTethers\n * @param {GraphQLClient.ListTethersParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListTethers>} Checkout {@link GraphQLClient.ResponseListTethers} for resolved data format\n */\n\n/**\n * listTopAccounts\n *\n * @name GraphQLClient#listTopAccounts\n * @param {GraphQLClient.ListTopAccountsParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListTopAccounts>} Checkout {@link GraphQLClient.ResponseListTopAccounts} for resolved data format\n */\n\n/**\n * listTransactions\n *\n * @name GraphQLClient#listTransactions\n * @param {GraphQLClient.ListTransactionsParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListTransactions>} Checkout {@link GraphQLClient.ResponseListTransactions} for resolved data format\n */\n\n/**\n * sendTx\n *\n * @name GraphQLClient#sendTx\n * @param {GraphQLClient.SendTxParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseSendTx>} Checkout {@link GraphQLClient.ResponseSendTx} for resolved data format\n */\n\n/**\n * startSimulator\n *\n * @name GraphQLClient#startSimulator\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseStartSimulator>} Checkout {@link GraphQLClient.ResponseStartSimulator} for resolved data format\n */\n\n/**\n * stopSimulator\n *\n * @name GraphQLClient#stopSimulator\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseStopSimulator>} Checkout {@link GraphQLClient.ResponseStopSimulator} for resolved data format\n */\n\n/**\n * unsubscribe\n *\n * @name GraphQLClient#unsubscribe\n * @param {GraphQLClient.UnsubscribeParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseUnsubscribe>} Checkout {@link GraphQLClient.ResponseUnsubscribe} for resolved data format\n */\n\n/**\n * subscribe\n *\n * @name GraphQLClient#subscribe\n * @param {GraphQLClient.SubscribeParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseSubscribe>} Checkout {@link GraphQLClient.ResponseSubscribe} for resolved data format\n */\n"]}