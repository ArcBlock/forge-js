/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
var code_pb = require('./code_pb.js');
var type_pb = require('./type_pb.js');
var state_pb = require('./state_pb.js');
goog.exportSymbol('proto.forge_abi.RequestCreateTx', null, global);
goog.exportSymbol('proto.forge_abi.RequestCreateWallet', null, global);
goog.exportSymbol('proto.forge_abi.RequestDeclareNode', null, global);
goog.exportSymbol('proto.forge_abi.RequestGetAccountState', null, global);
goog.exportSymbol('proto.forge_abi.RequestGetAssetState', null, global);
goog.exportSymbol('proto.forge_abi.RequestGetBlock', null, global);
goog.exportSymbol('proto.forge_abi.RequestGetChainInfo', null, global);
goog.exportSymbol('proto.forge_abi.RequestGetChannelState', null, global);
goog.exportSymbol('proto.forge_abi.RequestGetForgeState', null, global);
goog.exportSymbol('proto.forge_abi.RequestGetStakeState', null, global);
goog.exportSymbol('proto.forge_abi.RequestGetTx', null, global);
goog.exportSymbol('proto.forge_abi.RequestListWallets', null, global);
goog.exportSymbol('proto.forge_abi.RequestLoadFile', null, global);
goog.exportSymbol('proto.forge_abi.RequestLoadWallet', null, global);
goog.exportSymbol('proto.forge_abi.RequestRecoverWallet', null, global);
goog.exportSymbol('proto.forge_abi.RequestRemoveWallet', null, global);
goog.exportSymbol('proto.forge_abi.RequestSearch', null, global);
goog.exportSymbol('proto.forge_abi.RequestSendTx', null, global);
goog.exportSymbol('proto.forge_abi.RequestStoreFile', null, global);
goog.exportSymbol('proto.forge_abi.ResponseCreateTx', null, global);
goog.exportSymbol('proto.forge_abi.ResponseCreateWallet', null, global);
goog.exportSymbol('proto.forge_abi.ResponseDeclareNode', null, global);
goog.exportSymbol('proto.forge_abi.ResponseGetAccountState', null, global);
goog.exportSymbol('proto.forge_abi.ResponseGetAssetState', null, global);
goog.exportSymbol('proto.forge_abi.ResponseGetBlock', null, global);
goog.exportSymbol('proto.forge_abi.ResponseGetChainInfo', null, global);
goog.exportSymbol('proto.forge_abi.ResponseGetChannelState', null, global);
goog.exportSymbol('proto.forge_abi.ResponseGetForgeState', null, global);
goog.exportSymbol('proto.forge_abi.ResponseGetStakeState', null, global);
goog.exportSymbol('proto.forge_abi.ResponseGetTx', null, global);
goog.exportSymbol('proto.forge_abi.ResponseListWallet', null, global);
goog.exportSymbol('proto.forge_abi.ResponseLoadFile', null, global);
goog.exportSymbol('proto.forge_abi.ResponseLoadWallet', null, global);
goog.exportSymbol('proto.forge_abi.ResponseRecoverWallet', null, global);
goog.exportSymbol('proto.forge_abi.ResponseRemoveWallet', null, global);
goog.exportSymbol('proto.forge_abi.ResponseSearch', null, global);
goog.exportSymbol('proto.forge_abi.ResponseSendTx', null, global);
goog.exportSymbol('proto.forge_abi.ResponseStoreFile', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestCreateTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestCreateTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestCreateTx.displayName = 'proto.forge_abi.RequestCreateTx';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestCreateTx.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestCreateTx.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestCreateTx} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestCreateTx.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        itx: (f = msg.getItx()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
        from: jspb.Message.getFieldWithDefault(msg, 2, ''),
        nonce: jspb.Message.getFieldWithDefault(msg, 3, 0),
        wallet: (f = msg.getWallet()) && type_pb.WalletInfo.toObject(includeInstance, f),
        token: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestCreateTx}
 */
proto.forge_abi.RequestCreateTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestCreateTx();
  return proto.forge_abi.RequestCreateTx.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestCreateTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestCreateTx}
 */
proto.forge_abi.RequestCreateTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new google_protobuf_any_pb.Any();
        reader.readMessage(value, google_protobuf_any_pb.Any.deserializeBinaryFromReader);
        msg.setItx(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setFrom(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNonce(value);
        break;
      case 4:
        var value = new type_pb.WalletInfo();
        reader.readMessage(value, type_pb.WalletInfo.deserializeBinaryFromReader);
        msg.setWallet(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestCreateTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestCreateTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestCreateTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestCreateTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItx();
  if (f != null) {
    writer.writeMessage(1, f, google_protobuf_any_pb.Any.serializeBinaryToWriter);
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
  f = message.getWallet();
  if (f != null) {
    writer.writeMessage(4, f, type_pb.WalletInfo.serializeBinaryToWriter);
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional google.protobuf.Any itx = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.forge_abi.RequestCreateTx.prototype.getItx = function() {
  return /** @type{?proto.google.protobuf.Any} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_any_pb.Any,
    1
  ));
};

/** @param {?proto.google.protobuf.Any|undefined} value */
proto.forge_abi.RequestCreateTx.prototype.setItx = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.forge_abi.RequestCreateTx.prototype.clearItx = function() {
  this.setItx(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.RequestCreateTx.prototype.hasItx = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string from = 2;
 * @return {string}
 */
proto.forge_abi.RequestCreateTx.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.RequestCreateTx.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional uint64 nonce = 3;
 * @return {number}
 */
proto.forge_abi.RequestCreateTx.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.forge_abi.RequestCreateTx.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional WalletInfo wallet = 4;
 * @return {?proto.forge_abi.WalletInfo}
 */
proto.forge_abi.RequestCreateTx.prototype.getWallet = function() {
  return /** @type{?proto.forge_abi.WalletInfo} */ (jspb.Message.getWrapperField(
    this,
    type_pb.WalletInfo,
    4
  ));
};

/** @param {?proto.forge_abi.WalletInfo|undefined} value */
proto.forge_abi.RequestCreateTx.prototype.setWallet = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.forge_abi.RequestCreateTx.prototype.clearWallet = function() {
  this.setWallet(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.RequestCreateTx.prototype.hasWallet = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional string token = 5;
 * @return {string}
 */
proto.forge_abi.RequestCreateTx.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/** @param {string} value */
proto.forge_abi.RequestCreateTx.prototype.setToken = function(value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseCreateTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseCreateTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseCreateTx.displayName = 'proto.forge_abi.ResponseCreateTx';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseCreateTx.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseCreateTx.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseCreateTx} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseCreateTx.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        tx: (f = msg.getTx()) && type_pb.Transaction.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseCreateTx}
 */
proto.forge_abi.ResponseCreateTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseCreateTx();
  return proto.forge_abi.ResponseCreateTx.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseCreateTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseCreateTx}
 */
proto.forge_abi.ResponseCreateTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = new type_pb.Transaction();
        reader.readMessage(value, type_pb.Transaction.deserializeBinaryFromReader);
        msg.setTx(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseCreateTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseCreateTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseCreateTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseCreateTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(2, f, type_pb.Transaction.serializeBinaryToWriter);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseCreateTx.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseCreateTx.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional Transaction tx = 2;
 * @return {?proto.forge_abi.Transaction}
 */
proto.forge_abi.ResponseCreateTx.prototype.getTx = function() {
  return /** @type{?proto.forge_abi.Transaction} */ (jspb.Message.getWrapperField(
    this,
    type_pb.Transaction,
    2
  ));
};

/** @param {?proto.forge_abi.Transaction|undefined} value */
proto.forge_abi.ResponseCreateTx.prototype.setTx = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.ResponseCreateTx.prototype.clearTx = function() {
  this.setTx(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.ResponseCreateTx.prototype.hasTx = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestSendTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestSendTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestSendTx.displayName = 'proto.forge_abi.RequestSendTx';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestSendTx.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestSendTx.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestSendTx} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestSendTx.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        tx: (f = msg.getTx()) && type_pb.Transaction.toObject(includeInstance, f),
        wallet: (f = msg.getWallet()) && type_pb.WalletInfo.toObject(includeInstance, f),
        token: jspb.Message.getFieldWithDefault(msg, 3, ''),
        commit: jspb.Message.getFieldWithDefault(msg, 4, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestSendTx}
 */
proto.forge_abi.RequestSendTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestSendTx();
  return proto.forge_abi.RequestSendTx.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestSendTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestSendTx}
 */
proto.forge_abi.RequestSendTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new type_pb.Transaction();
        reader.readMessage(value, type_pb.Transaction.deserializeBinaryFromReader);
        msg.setTx(value);
        break;
      case 2:
        var value = new type_pb.WalletInfo();
        reader.readMessage(value, type_pb.WalletInfo.deserializeBinaryFromReader);
        msg.setWallet(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      case 4:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setCommit(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestSendTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestSendTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestSendTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestSendTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(1, f, type_pb.Transaction.serializeBinaryToWriter);
  }
  f = message.getWallet();
  if (f != null) {
    writer.writeMessage(2, f, type_pb.WalletInfo.serializeBinaryToWriter);
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getCommit();
  if (f) {
    writer.writeBool(4, f);
  }
};

/**
 * optional Transaction tx = 1;
 * @return {?proto.forge_abi.Transaction}
 */
proto.forge_abi.RequestSendTx.prototype.getTx = function() {
  return /** @type{?proto.forge_abi.Transaction} */ (jspb.Message.getWrapperField(
    this,
    type_pb.Transaction,
    1
  ));
};

/** @param {?proto.forge_abi.Transaction|undefined} value */
proto.forge_abi.RequestSendTx.prototype.setTx = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.forge_abi.RequestSendTx.prototype.clearTx = function() {
  this.setTx(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.RequestSendTx.prototype.hasTx = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional WalletInfo wallet = 2;
 * @return {?proto.forge_abi.WalletInfo}
 */
proto.forge_abi.RequestSendTx.prototype.getWallet = function() {
  return /** @type{?proto.forge_abi.WalletInfo} */ (jspb.Message.getWrapperField(
    this,
    type_pb.WalletInfo,
    2
  ));
};

/** @param {?proto.forge_abi.WalletInfo|undefined} value */
proto.forge_abi.RequestSendTx.prototype.setWallet = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.RequestSendTx.prototype.clearWallet = function() {
  this.setWallet(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.RequestSendTx.prototype.hasWallet = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional string token = 3;
 * @return {string}
 */
proto.forge_abi.RequestSendTx.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.forge_abi.RequestSendTx.prototype.setToken = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional bool commit = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.forge_abi.RequestSendTx.prototype.getCommit = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};

/** @param {boolean} value */
proto.forge_abi.RequestSendTx.prototype.setCommit = function(value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseSendTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseSendTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseSendTx.displayName = 'proto.forge_abi.ResponseSendTx';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseSendTx.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseSendTx.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseSendTx} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseSendTx.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        hash: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseSendTx}
 */
proto.forge_abi.ResponseSendTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseSendTx();
  return proto.forge_abi.ResponseSendTx.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseSendTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseSendTx}
 */
proto.forge_abi.ResponseSendTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseSendTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseSendTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseSendTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseSendTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseSendTx.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseSendTx.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string hash = 2;
 * @return {string}
 */
proto.forge_abi.ResponseSendTx.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.ResponseSendTx.prototype.setHash = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestGetTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestGetTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestGetTx.displayName = 'proto.forge_abi.RequestGetTx';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestGetTx.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestGetTx.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestGetTx} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestGetTx.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        hash: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestGetTx}
 */
proto.forge_abi.RequestGetTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestGetTx();
  return proto.forge_abi.RequestGetTx.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestGetTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestGetTx}
 */
proto.forge_abi.RequestGetTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestGetTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestGetTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestGetTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestGetTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string hash = 1;
 * @return {string}
 */
proto.forge_abi.RequestGetTx.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetTx.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseGetTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseGetTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseGetTx.displayName = 'proto.forge_abi.ResponseGetTx';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseGetTx.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseGetTx.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseGetTx} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseGetTx.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        info: (f = msg.getInfo()) && type_pb.TransactionInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseGetTx}
 */
proto.forge_abi.ResponseGetTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseGetTx();
  return proto.forge_abi.ResponseGetTx.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseGetTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseGetTx}
 */
proto.forge_abi.ResponseGetTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = new type_pb.TransactionInfo();
        reader.readMessage(value, type_pb.TransactionInfo.deserializeBinaryFromReader);
        msg.setInfo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseGetTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseGetTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseGetTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseGetTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(2, f, type_pb.TransactionInfo.serializeBinaryToWriter);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseGetTx.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseGetTx.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional TransactionInfo info = 2;
 * @return {?proto.forge_abi.TransactionInfo}
 */
proto.forge_abi.ResponseGetTx.prototype.getInfo = function() {
  return /** @type{?proto.forge_abi.TransactionInfo} */ (jspb.Message.getWrapperField(
    this,
    type_pb.TransactionInfo,
    2
  ));
};

/** @param {?proto.forge_abi.TransactionInfo|undefined} value */
proto.forge_abi.ResponseGetTx.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.ResponseGetTx.prototype.clearInfo = function() {
  this.setInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.ResponseGetTx.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestGetBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestGetBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestGetBlock.displayName = 'proto.forge_abi.RequestGetBlock';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestGetBlock.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestGetBlock.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestGetBlock} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestGetBlock.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        height: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestGetBlock}
 */
proto.forge_abi.RequestGetBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestGetBlock();
  return proto.forge_abi.RequestGetBlock.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestGetBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestGetBlock}
 */
proto.forge_abi.RequestGetBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setHeight(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestGetBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestGetBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestGetBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestGetBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
};

/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.forge_abi.RequestGetBlock.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.forge_abi.RequestGetBlock.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseGetBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseGetBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseGetBlock.displayName = 'proto.forge_abi.ResponseGetBlock';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseGetBlock.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseGetBlock.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseGetBlock} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseGetBlock.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        block: (f = msg.getBlock()) && type_pb.BlockInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseGetBlock}
 */
proto.forge_abi.ResponseGetBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseGetBlock();
  return proto.forge_abi.ResponseGetBlock.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseGetBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseGetBlock}
 */
proto.forge_abi.ResponseGetBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = new type_pb.BlockInfo();
        reader.readMessage(value, type_pb.BlockInfo.deserializeBinaryFromReader);
        msg.setBlock(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseGetBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseGetBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseGetBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseGetBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(2, f, type_pb.BlockInfo.serializeBinaryToWriter);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseGetBlock.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseGetBlock.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional BlockInfo block = 2;
 * @return {?proto.forge_abi.BlockInfo}
 */
proto.forge_abi.ResponseGetBlock.prototype.getBlock = function() {
  return /** @type{?proto.forge_abi.BlockInfo} */ (jspb.Message.getWrapperField(
    this,
    type_pb.BlockInfo,
    2
  ));
};

/** @param {?proto.forge_abi.BlockInfo|undefined} value */
proto.forge_abi.ResponseGetBlock.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.ResponseGetBlock.prototype.clearBlock = function() {
  this.setBlock(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.ResponseGetBlock.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestCreateWallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestCreateWallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestCreateWallet.displayName = 'proto.forge_abi.RequestCreateWallet';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestCreateWallet.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestCreateWallet.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestCreateWallet} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestCreateWallet.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        passphrase: jspb.Message.getFieldWithDefault(msg, 1, ''),
        type: (f = msg.getType()) && type_pb.WalletType.toObject(includeInstance, f),
        moniker: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestCreateWallet}
 */
proto.forge_abi.RequestCreateWallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestCreateWallet();
  return proto.forge_abi.RequestCreateWallet.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestCreateWallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestCreateWallet}
 */
proto.forge_abi.RequestCreateWallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassphrase(value);
        break;
      case 2:
        var value = new type_pb.WalletType();
        reader.readMessage(value, type_pb.WalletType.deserializeBinaryFromReader);
        msg.setType(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setMoniker(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestCreateWallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestCreateWallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestCreateWallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestCreateWallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPassphrase();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(2, f, type_pb.WalletType.serializeBinaryToWriter);
  }
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string passphrase = 1;
 * @return {string}
 */
proto.forge_abi.RequestCreateWallet.prototype.getPassphrase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.RequestCreateWallet.prototype.setPassphrase = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional WalletType type = 2;
 * @return {?proto.forge_abi.WalletType}
 */
proto.forge_abi.RequestCreateWallet.prototype.getType = function() {
  return /** @type{?proto.forge_abi.WalletType} */ (jspb.Message.getWrapperField(
    this,
    type_pb.WalletType,
    2
  ));
};

/** @param {?proto.forge_abi.WalletType|undefined} value */
proto.forge_abi.RequestCreateWallet.prototype.setType = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.RequestCreateWallet.prototype.clearType = function() {
  this.setType(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.RequestCreateWallet.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional string moniker = 3;
 * @return {string}
 */
proto.forge_abi.RequestCreateWallet.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.forge_abi.RequestCreateWallet.prototype.setMoniker = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseCreateWallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseCreateWallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseCreateWallet.displayName = 'proto.forge_abi.ResponseCreateWallet';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseCreateWallet.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseCreateWallet.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseCreateWallet} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseCreateWallet.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        token: jspb.Message.getFieldWithDefault(msg, 2, ''),
        wallet: (f = msg.getWallet()) && type_pb.WalletInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseCreateWallet}
 */
proto.forge_abi.ResponseCreateWallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseCreateWallet();
  return proto.forge_abi.ResponseCreateWallet.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseCreateWallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseCreateWallet}
 */
proto.forge_abi.ResponseCreateWallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      case 3:
        var value = new type_pb.WalletInfo();
        reader.readMessage(value, type_pb.WalletInfo.deserializeBinaryFromReader);
        msg.setWallet(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseCreateWallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseCreateWallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseCreateWallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseCreateWallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getWallet();
  if (f != null) {
    writer.writeMessage(3, f, type_pb.WalletInfo.serializeBinaryToWriter);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseCreateWallet.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseCreateWallet.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string token = 2;
 * @return {string}
 */
proto.forge_abi.ResponseCreateWallet.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.ResponseCreateWallet.prototype.setToken = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional WalletInfo wallet = 3;
 * @return {?proto.forge_abi.WalletInfo}
 */
proto.forge_abi.ResponseCreateWallet.prototype.getWallet = function() {
  return /** @type{?proto.forge_abi.WalletInfo} */ (jspb.Message.getWrapperField(
    this,
    type_pb.WalletInfo,
    3
  ));
};

/** @param {?proto.forge_abi.WalletInfo|undefined} value */
proto.forge_abi.ResponseCreateWallet.prototype.setWallet = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.forge_abi.ResponseCreateWallet.prototype.clearWallet = function() {
  this.setWallet(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.ResponseCreateWallet.prototype.hasWallet = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestLoadWallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestLoadWallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestLoadWallet.displayName = 'proto.forge_abi.RequestLoadWallet';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestLoadWallet.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestLoadWallet.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestLoadWallet} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestLoadWallet.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        passphrase: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestLoadWallet}
 */
proto.forge_abi.RequestLoadWallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestLoadWallet();
  return proto.forge_abi.RequestLoadWallet.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestLoadWallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestLoadWallet}
 */
proto.forge_abi.RequestLoadWallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassphrase(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestLoadWallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestLoadWallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestLoadWallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestLoadWallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPassphrase();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.forge_abi.RequestLoadWallet.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.RequestLoadWallet.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string passphrase = 2;
 * @return {string}
 */
proto.forge_abi.RequestLoadWallet.prototype.getPassphrase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.RequestLoadWallet.prototype.setPassphrase = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseLoadWallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseLoadWallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseLoadWallet.displayName = 'proto.forge_abi.ResponseLoadWallet';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseLoadWallet.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseLoadWallet.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseLoadWallet} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseLoadWallet.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        token: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseLoadWallet}
 */
proto.forge_abi.ResponseLoadWallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseLoadWallet();
  return proto.forge_abi.ResponseLoadWallet.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseLoadWallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseLoadWallet}
 */
proto.forge_abi.ResponseLoadWallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseLoadWallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseLoadWallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseLoadWallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseLoadWallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseLoadWallet.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseLoadWallet.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string token = 2;
 * @return {string}
 */
proto.forge_abi.ResponseLoadWallet.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.ResponseLoadWallet.prototype.setToken = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestRecoverWallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestRecoverWallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestRecoverWallet.displayName = 'proto.forge_abi.RequestRecoverWallet';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestRecoverWallet.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestRecoverWallet.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestRecoverWallet} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestRecoverWallet.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        data: msg.getData(),
        type: (f = msg.getType()) && type_pb.WalletType.toObject(includeInstance, f),
        passphrase: jspb.Message.getFieldWithDefault(msg, 3, ''),
        moniker: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestRecoverWallet}
 */
proto.forge_abi.RequestRecoverWallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestRecoverWallet();
  return proto.forge_abi.RequestRecoverWallet.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestRecoverWallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestRecoverWallet}
 */
proto.forge_abi.RequestRecoverWallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      case 2:
        var value = new type_pb.WalletType();
        reader.readMessage(value, type_pb.WalletType.deserializeBinaryFromReader);
        msg.setType(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassphrase(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setMoniker(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestRecoverWallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestRecoverWallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestRecoverWallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestRecoverWallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(2, f, type_pb.WalletType.serializeBinaryToWriter);
  }
  f = message.getPassphrase();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.RequestRecoverWallet.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.forge_abi.RequestRecoverWallet.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestRecoverWallet.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/** @param {!(string|Uint8Array)} value */
proto.forge_abi.RequestRecoverWallet.prototype.setData = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional WalletType type = 2;
 * @return {?proto.forge_abi.WalletType}
 */
proto.forge_abi.RequestRecoverWallet.prototype.getType = function() {
  return /** @type{?proto.forge_abi.WalletType} */ (jspb.Message.getWrapperField(
    this,
    type_pb.WalletType,
    2
  ));
};

/** @param {?proto.forge_abi.WalletType|undefined} value */
proto.forge_abi.RequestRecoverWallet.prototype.setType = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.RequestRecoverWallet.prototype.clearType = function() {
  this.setType(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.RequestRecoverWallet.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional string passphrase = 3;
 * @return {string}
 */
proto.forge_abi.RequestRecoverWallet.prototype.getPassphrase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.forge_abi.RequestRecoverWallet.prototype.setPassphrase = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional string moniker = 4;
 * @return {string}
 */
proto.forge_abi.RequestRecoverWallet.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/** @param {string} value */
proto.forge_abi.RequestRecoverWallet.prototype.setMoniker = function(value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseRecoverWallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseRecoverWallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseRecoverWallet.displayName = 'proto.forge_abi.ResponseRecoverWallet';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseRecoverWallet.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseRecoverWallet.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseRecoverWallet} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseRecoverWallet.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        token: jspb.Message.getFieldWithDefault(msg, 2, ''),
        wallet: (f = msg.getWallet()) && type_pb.WalletInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseRecoverWallet}
 */
proto.forge_abi.ResponseRecoverWallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseRecoverWallet();
  return proto.forge_abi.ResponseRecoverWallet.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseRecoverWallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseRecoverWallet}
 */
proto.forge_abi.ResponseRecoverWallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      case 3:
        var value = new type_pb.WalletInfo();
        reader.readMessage(value, type_pb.WalletInfo.deserializeBinaryFromReader);
        msg.setWallet(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseRecoverWallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseRecoverWallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseRecoverWallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseRecoverWallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getWallet();
  if (f != null) {
    writer.writeMessage(3, f, type_pb.WalletInfo.serializeBinaryToWriter);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseRecoverWallet.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseRecoverWallet.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string token = 2;
 * @return {string}
 */
proto.forge_abi.ResponseRecoverWallet.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.ResponseRecoverWallet.prototype.setToken = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional WalletInfo wallet = 3;
 * @return {?proto.forge_abi.WalletInfo}
 */
proto.forge_abi.ResponseRecoverWallet.prototype.getWallet = function() {
  return /** @type{?proto.forge_abi.WalletInfo} */ (jspb.Message.getWrapperField(
    this,
    type_pb.WalletInfo,
    3
  ));
};

/** @param {?proto.forge_abi.WalletInfo|undefined} value */
proto.forge_abi.ResponseRecoverWallet.prototype.setWallet = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.forge_abi.ResponseRecoverWallet.prototype.clearWallet = function() {
  this.setWallet(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.ResponseRecoverWallet.prototype.hasWallet = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestListWallets = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestListWallets, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestListWallets.displayName = 'proto.forge_abi.RequestListWallets';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestListWallets.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestListWallets.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestListWallets} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestListWallets.toObject = function(includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestListWallets}
 */
proto.forge_abi.RequestListWallets.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestListWallets();
  return proto.forge_abi.RequestListWallets.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestListWallets} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestListWallets}
 */
proto.forge_abi.RequestListWallets.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestListWallets.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestListWallets.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestListWallets} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestListWallets.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseListWallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseListWallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseListWallet.displayName = 'proto.forge_abi.ResponseListWallet';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseListWallet.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseListWallet.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseListWallet} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseListWallet.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        address: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseListWallet}
 */
proto.forge_abi.ResponseListWallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseListWallet();
  return proto.forge_abi.ResponseListWallet.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseListWallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseListWallet}
 */
proto.forge_abi.ResponseListWallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseListWallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseListWallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseListWallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseListWallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseListWallet.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseListWallet.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string address = 2;
 * @return {string}
 */
proto.forge_abi.ResponseListWallet.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.ResponseListWallet.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestRemoveWallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestRemoveWallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestRemoveWallet.displayName = 'proto.forge_abi.RequestRemoveWallet';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestRemoveWallet.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestRemoveWallet.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestRemoveWallet} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestRemoveWallet.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestRemoveWallet}
 */
proto.forge_abi.RequestRemoveWallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestRemoveWallet();
  return proto.forge_abi.RequestRemoveWallet.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestRemoveWallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestRemoveWallet}
 */
proto.forge_abi.RequestRemoveWallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestRemoveWallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestRemoveWallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestRemoveWallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestRemoveWallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.forge_abi.RequestRemoveWallet.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.RequestRemoveWallet.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseRemoveWallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseRemoveWallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseRemoveWallet.displayName = 'proto.forge_abi.ResponseRemoveWallet';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseRemoveWallet.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseRemoveWallet.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseRemoveWallet} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseRemoveWallet.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseRemoveWallet}
 */
proto.forge_abi.ResponseRemoveWallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseRemoveWallet();
  return proto.forge_abi.ResponseRemoveWallet.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseRemoveWallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseRemoveWallet}
 */
proto.forge_abi.ResponseRemoveWallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseRemoveWallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseRemoveWallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseRemoveWallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseRemoveWallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseRemoveWallet.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseRemoveWallet.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestDeclareNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestDeclareNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestDeclareNode.displayName = 'proto.forge_abi.RequestDeclareNode';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestDeclareNode.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestDeclareNode.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestDeclareNode} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestDeclareNode.toObject = function(includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestDeclareNode}
 */
proto.forge_abi.RequestDeclareNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestDeclareNode();
  return proto.forge_abi.RequestDeclareNode.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestDeclareNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestDeclareNode}
 */
proto.forge_abi.RequestDeclareNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestDeclareNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestDeclareNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestDeclareNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestDeclareNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseDeclareNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseDeclareNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseDeclareNode.displayName = 'proto.forge_abi.ResponseDeclareNode';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseDeclareNode.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseDeclareNode.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseDeclareNode} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseDeclareNode.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        wallet: (f = msg.getWallet()) && type_pb.WalletInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseDeclareNode}
 */
proto.forge_abi.ResponseDeclareNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseDeclareNode();
  return proto.forge_abi.ResponseDeclareNode.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseDeclareNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseDeclareNode}
 */
proto.forge_abi.ResponseDeclareNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 3:
        var value = new type_pb.WalletInfo();
        reader.readMessage(value, type_pb.WalletInfo.deserializeBinaryFromReader);
        msg.setWallet(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseDeclareNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseDeclareNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseDeclareNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseDeclareNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getWallet();
  if (f != null) {
    writer.writeMessage(3, f, type_pb.WalletInfo.serializeBinaryToWriter);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseDeclareNode.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseDeclareNode.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional WalletInfo wallet = 3;
 * @return {?proto.forge_abi.WalletInfo}
 */
proto.forge_abi.ResponseDeclareNode.prototype.getWallet = function() {
  return /** @type{?proto.forge_abi.WalletInfo} */ (jspb.Message.getWrapperField(
    this,
    type_pb.WalletInfo,
    3
  ));
};

/** @param {?proto.forge_abi.WalletInfo|undefined} value */
proto.forge_abi.ResponseDeclareNode.prototype.setWallet = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.forge_abi.ResponseDeclareNode.prototype.clearWallet = function() {
  this.setWallet(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.ResponseDeclareNode.prototype.hasWallet = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestGetAccountState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestGetAccountState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestGetAccountState.displayName = 'proto.forge_abi.RequestGetAccountState';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestGetAccountState.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestGetAccountState.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestGetAccountState} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestGetAccountState.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        key: jspb.Message.getFieldWithDefault(msg, 2, ''),
        appHash: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestGetAccountState}
 */
proto.forge_abi.RequestGetAccountState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestGetAccountState();
  return proto.forge_abi.RequestGetAccountState.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestGetAccountState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestGetAccountState}
 */
proto.forge_abi.RequestGetAccountState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setAppHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestGetAccountState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestGetAccountState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestGetAccountState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestGetAccountState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAppHash();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.forge_abi.RequestGetAccountState.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetAccountState.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string key = 2;
 * @return {string}
 */
proto.forge_abi.RequestGetAccountState.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetAccountState.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional string app_hash = 3;
 * @return {string}
 */
proto.forge_abi.RequestGetAccountState.prototype.getAppHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetAccountState.prototype.setAppHash = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseGetAccountState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseGetAccountState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseGetAccountState.displayName = 'proto.forge_abi.ResponseGetAccountState';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseGetAccountState.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseGetAccountState.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseGetAccountState} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseGetAccountState.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        state: (f = msg.getState()) && state_pb.AccountState.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseGetAccountState}
 */
proto.forge_abi.ResponseGetAccountState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseGetAccountState();
  return proto.forge_abi.ResponseGetAccountState.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseGetAccountState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseGetAccountState}
 */
proto.forge_abi.ResponseGetAccountState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = new state_pb.AccountState();
        reader.readMessage(value, state_pb.AccountState.deserializeBinaryFromReader);
        msg.setState(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseGetAccountState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseGetAccountState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseGetAccountState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseGetAccountState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(2, f, state_pb.AccountState.serializeBinaryToWriter);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseGetAccountState.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseGetAccountState.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional AccountState state = 2;
 * @return {?proto.forge_abi.AccountState}
 */
proto.forge_abi.ResponseGetAccountState.prototype.getState = function() {
  return /** @type{?proto.forge_abi.AccountState} */ (jspb.Message.getWrapperField(
    this,
    state_pb.AccountState,
    2
  ));
};

/** @param {?proto.forge_abi.AccountState|undefined} value */
proto.forge_abi.ResponseGetAccountState.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.ResponseGetAccountState.prototype.clearState = function() {
  this.setState(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.ResponseGetAccountState.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestGetAssetState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestGetAssetState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestGetAssetState.displayName = 'proto.forge_abi.RequestGetAssetState';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestGetAssetState.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestGetAssetState.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestGetAssetState} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestGetAssetState.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        key: jspb.Message.getFieldWithDefault(msg, 2, ''),
        appHash: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestGetAssetState}
 */
proto.forge_abi.RequestGetAssetState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestGetAssetState();
  return proto.forge_abi.RequestGetAssetState.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestGetAssetState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestGetAssetState}
 */
proto.forge_abi.RequestGetAssetState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setAppHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestGetAssetState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestGetAssetState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestGetAssetState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestGetAssetState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAppHash();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.forge_abi.RequestGetAssetState.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetAssetState.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string key = 2;
 * @return {string}
 */
proto.forge_abi.RequestGetAssetState.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetAssetState.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional string app_hash = 3;
 * @return {string}
 */
proto.forge_abi.RequestGetAssetState.prototype.getAppHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetAssetState.prototype.setAppHash = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseGetAssetState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseGetAssetState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseGetAssetState.displayName = 'proto.forge_abi.ResponseGetAssetState';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseGetAssetState.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseGetAssetState.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseGetAssetState} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseGetAssetState.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        state: (f = msg.getState()) && state_pb.AssetState.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseGetAssetState}
 */
proto.forge_abi.ResponseGetAssetState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseGetAssetState();
  return proto.forge_abi.ResponseGetAssetState.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseGetAssetState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseGetAssetState}
 */
proto.forge_abi.ResponseGetAssetState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = new state_pb.AssetState();
        reader.readMessage(value, state_pb.AssetState.deserializeBinaryFromReader);
        msg.setState(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseGetAssetState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseGetAssetState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseGetAssetState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseGetAssetState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(2, f, state_pb.AssetState.serializeBinaryToWriter);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseGetAssetState.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseGetAssetState.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional AssetState state = 2;
 * @return {?proto.forge_abi.AssetState}
 */
proto.forge_abi.ResponseGetAssetState.prototype.getState = function() {
  return /** @type{?proto.forge_abi.AssetState} */ (jspb.Message.getWrapperField(
    this,
    state_pb.AssetState,
    2
  ));
};

/** @param {?proto.forge_abi.AssetState|undefined} value */
proto.forge_abi.ResponseGetAssetState.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.ResponseGetAssetState.prototype.clearState = function() {
  this.setState(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.ResponseGetAssetState.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestGetChannelState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestGetChannelState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestGetChannelState.displayName = 'proto.forge_abi.RequestGetChannelState';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestGetChannelState.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestGetChannelState.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestGetChannelState} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestGetChannelState.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        key: jspb.Message.getFieldWithDefault(msg, 2, ''),
        appHash: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestGetChannelState}
 */
proto.forge_abi.RequestGetChannelState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestGetChannelState();
  return proto.forge_abi.RequestGetChannelState.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestGetChannelState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestGetChannelState}
 */
proto.forge_abi.RequestGetChannelState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setAppHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestGetChannelState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestGetChannelState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestGetChannelState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestGetChannelState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAppHash();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.forge_abi.RequestGetChannelState.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetChannelState.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string key = 2;
 * @return {string}
 */
proto.forge_abi.RequestGetChannelState.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetChannelState.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional string app_hash = 3;
 * @return {string}
 */
proto.forge_abi.RequestGetChannelState.prototype.getAppHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetChannelState.prototype.setAppHash = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestGetStakeState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestGetStakeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestGetStakeState.displayName = 'proto.forge_abi.RequestGetStakeState';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestGetStakeState.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestGetStakeState.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestGetStakeState} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestGetStakeState.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        key: jspb.Message.getFieldWithDefault(msg, 2, ''),
        appHash: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestGetStakeState}
 */
proto.forge_abi.RequestGetStakeState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestGetStakeState();
  return proto.forge_abi.RequestGetStakeState.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestGetStakeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestGetStakeState}
 */
proto.forge_abi.RequestGetStakeState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setAppHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestGetStakeState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestGetStakeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestGetStakeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestGetStakeState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAppHash();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.forge_abi.RequestGetStakeState.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetStakeState.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string key = 2;
 * @return {string}
 */
proto.forge_abi.RequestGetStakeState.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetStakeState.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional string app_hash = 3;
 * @return {string}
 */
proto.forge_abi.RequestGetStakeState.prototype.getAppHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetStakeState.prototype.setAppHash = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseGetChannelState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseGetChannelState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseGetChannelState.displayName = 'proto.forge_abi.ResponseGetChannelState';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseGetChannelState.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseGetChannelState.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseGetChannelState} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseGetChannelState.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        state: (f = msg.getState()) && state_pb.ChannelState.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseGetChannelState}
 */
proto.forge_abi.ResponseGetChannelState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseGetChannelState();
  return proto.forge_abi.ResponseGetChannelState.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseGetChannelState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseGetChannelState}
 */
proto.forge_abi.ResponseGetChannelState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = new state_pb.ChannelState();
        reader.readMessage(value, state_pb.ChannelState.deserializeBinaryFromReader);
        msg.setState(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseGetChannelState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseGetChannelState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseGetChannelState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseGetChannelState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(2, f, state_pb.ChannelState.serializeBinaryToWriter);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseGetChannelState.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseGetChannelState.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional ChannelState state = 2;
 * @return {?proto.forge_abi.ChannelState}
 */
proto.forge_abi.ResponseGetChannelState.prototype.getState = function() {
  return /** @type{?proto.forge_abi.ChannelState} */ (jspb.Message.getWrapperField(
    this,
    state_pb.ChannelState,
    2
  ));
};

/** @param {?proto.forge_abi.ChannelState|undefined} value */
proto.forge_abi.ResponseGetChannelState.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.ResponseGetChannelState.prototype.clearState = function() {
  this.setState(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.ResponseGetChannelState.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseGetStakeState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseGetStakeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseGetStakeState.displayName = 'proto.forge_abi.ResponseGetStakeState';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseGetStakeState.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseGetStakeState.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseGetStakeState} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseGetStakeState.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        state: (f = msg.getState()) && state_pb.StakeState.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseGetStakeState}
 */
proto.forge_abi.ResponseGetStakeState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseGetStakeState();
  return proto.forge_abi.ResponseGetStakeState.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseGetStakeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseGetStakeState}
 */
proto.forge_abi.ResponseGetStakeState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = new state_pb.StakeState();
        reader.readMessage(value, state_pb.StakeState.deserializeBinaryFromReader);
        msg.setState(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseGetStakeState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseGetStakeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseGetStakeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseGetStakeState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(2, f, state_pb.StakeState.serializeBinaryToWriter);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseGetStakeState.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseGetStakeState.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional StakeState state = 2;
 * @return {?proto.forge_abi.StakeState}
 */
proto.forge_abi.ResponseGetStakeState.prototype.getState = function() {
  return /** @type{?proto.forge_abi.StakeState} */ (jspb.Message.getWrapperField(
    this,
    state_pb.StakeState,
    2
  ));
};

/** @param {?proto.forge_abi.StakeState|undefined} value */
proto.forge_abi.ResponseGetStakeState.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.ResponseGetStakeState.prototype.clearState = function() {
  this.setState(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.ResponseGetStakeState.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestGetForgeState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestGetForgeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestGetForgeState.displayName = 'proto.forge_abi.RequestGetForgeState';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestGetForgeState.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestGetForgeState.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestGetForgeState} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestGetForgeState.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        key: jspb.Message.getFieldWithDefault(msg, 1, ''),
        appHash: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestGetForgeState}
 */
proto.forge_abi.RequestGetForgeState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestGetForgeState();
  return proto.forge_abi.RequestGetForgeState.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestGetForgeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestGetForgeState}
 */
proto.forge_abi.RequestGetForgeState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setAppHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestGetForgeState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestGetForgeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestGetForgeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestGetForgeState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getAppHash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string key = 1;
 * @return {string}
 */
proto.forge_abi.RequestGetForgeState.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetForgeState.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string app_hash = 2;
 * @return {string}
 */
proto.forge_abi.RequestGetForgeState.prototype.getAppHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.RequestGetForgeState.prototype.setAppHash = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseGetForgeState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseGetForgeState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseGetForgeState.displayName = 'proto.forge_abi.ResponseGetForgeState';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseGetForgeState.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseGetForgeState.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseGetForgeState} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseGetForgeState.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        state: (f = msg.getState()) && state_pb.ForgeState.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseGetForgeState}
 */
proto.forge_abi.ResponseGetForgeState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseGetForgeState();
  return proto.forge_abi.ResponseGetForgeState.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseGetForgeState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseGetForgeState}
 */
proto.forge_abi.ResponseGetForgeState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = new state_pb.ForgeState();
        reader.readMessage(value, state_pb.ForgeState.deserializeBinaryFromReader);
        msg.setState(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseGetForgeState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseGetForgeState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseGetForgeState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseGetForgeState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(2, f, state_pb.ForgeState.serializeBinaryToWriter);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseGetForgeState.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseGetForgeState.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional ForgeState state = 2;
 * @return {?proto.forge_abi.ForgeState}
 */
proto.forge_abi.ResponseGetForgeState.prototype.getState = function() {
  return /** @type{?proto.forge_abi.ForgeState} */ (jspb.Message.getWrapperField(
    this,
    state_pb.ForgeState,
    2
  ));
};

/** @param {?proto.forge_abi.ForgeState|undefined} value */
proto.forge_abi.ResponseGetForgeState.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.ResponseGetForgeState.prototype.clearState = function() {
  this.setState(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.ResponseGetForgeState.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestStoreFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestStoreFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestStoreFile.displayName = 'proto.forge_abi.RequestStoreFile';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestStoreFile.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestStoreFile.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestStoreFile} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestStoreFile.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        chunk: msg.getChunk(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestStoreFile}
 */
proto.forge_abi.RequestStoreFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestStoreFile();
  return proto.forge_abi.RequestStoreFile.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestStoreFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestStoreFile}
 */
proto.forge_abi.RequestStoreFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setChunk(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestStoreFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestStoreFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestStoreFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestStoreFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes chunk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.RequestStoreFile.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes chunk = 1;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.forge_abi.RequestStoreFile.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getChunk()));
};

/**
 * optional bytes chunk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestStoreFile.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getChunk()));
};

/** @param {!(string|Uint8Array)} value */
proto.forge_abi.RequestStoreFile.prototype.setChunk = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseStoreFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseStoreFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseStoreFile.displayName = 'proto.forge_abi.ResponseStoreFile';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseStoreFile.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseStoreFile.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseStoreFile} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseStoreFile.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        hash: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseStoreFile}
 */
proto.forge_abi.ResponseStoreFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseStoreFile();
  return proto.forge_abi.ResponseStoreFile.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseStoreFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseStoreFile}
 */
proto.forge_abi.ResponseStoreFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseStoreFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseStoreFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseStoreFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseStoreFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseStoreFile.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseStoreFile.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string hash = 2;
 * @return {string}
 */
proto.forge_abi.ResponseStoreFile.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.ResponseStoreFile.prototype.setHash = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestLoadFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestLoadFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestLoadFile.displayName = 'proto.forge_abi.RequestLoadFile';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestLoadFile.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestLoadFile.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestLoadFile} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestLoadFile.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        hash: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestLoadFile}
 */
proto.forge_abi.RequestLoadFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestLoadFile();
  return proto.forge_abi.RequestLoadFile.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestLoadFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestLoadFile}
 */
proto.forge_abi.RequestLoadFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestLoadFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestLoadFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestLoadFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestLoadFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string hash = 1;
 * @return {string}
 */
proto.forge_abi.RequestLoadFile.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.RequestLoadFile.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseLoadFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseLoadFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseLoadFile.displayName = 'proto.forge_abi.ResponseLoadFile';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseLoadFile.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseLoadFile.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseLoadFile} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseLoadFile.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        chunk: msg.getChunk(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseLoadFile}
 */
proto.forge_abi.ResponseLoadFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseLoadFile();
  return proto.forge_abi.ResponseLoadFile.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseLoadFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseLoadFile}
 */
proto.forge_abi.ResponseLoadFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setChunk(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseLoadFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseLoadFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseLoadFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseLoadFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseLoadFile.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseLoadFile.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes chunk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.ResponseLoadFile.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes chunk = 2;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.forge_abi.ResponseLoadFile.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getChunk()));
};

/**
 * optional bytes chunk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseLoadFile.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getChunk()));
};

/** @param {!(string|Uint8Array)} value */
proto.forge_abi.ResponseLoadFile.prototype.setChunk = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestGetChainInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestGetChainInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestGetChainInfo.displayName = 'proto.forge_abi.RequestGetChainInfo';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestGetChainInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestGetChainInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestGetChainInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestGetChainInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestGetChainInfo}
 */
proto.forge_abi.RequestGetChainInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestGetChainInfo();
  return proto.forge_abi.RequestGetChainInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestGetChainInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestGetChainInfo}
 */
proto.forge_abi.RequestGetChainInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestGetChainInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestGetChainInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestGetChainInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestGetChainInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseGetChainInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ResponseGetChainInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseGetChainInfo.displayName = 'proto.forge_abi.ResponseGetChainInfo';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseGetChainInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseGetChainInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseGetChainInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseGetChainInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        info: (f = msg.getInfo()) && type_pb.ChainInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseGetChainInfo}
 */
proto.forge_abi.ResponseGetChainInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseGetChainInfo();
  return proto.forge_abi.ResponseGetChainInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseGetChainInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseGetChainInfo}
 */
proto.forge_abi.ResponseGetChainInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = new type_pb.ChainInfo();
        reader.readMessage(value, type_pb.ChainInfo.deserializeBinaryFromReader);
        msg.setInfo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseGetChainInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseGetChainInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseGetChainInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseGetChainInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(2, f, type_pb.ChainInfo.serializeBinaryToWriter);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseGetChainInfo.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseGetChainInfo.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional ChainInfo info = 2;
 * @return {?proto.forge_abi.ChainInfo}
 */
proto.forge_abi.ResponseGetChainInfo.prototype.getInfo = function() {
  return /** @type{?proto.forge_abi.ChainInfo} */ (jspb.Message.getWrapperField(
    this,
    type_pb.ChainInfo,
    2
  ));
};

/** @param {?proto.forge_abi.ChainInfo|undefined} value */
proto.forge_abi.ResponseGetChainInfo.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.ResponseGetChainInfo.prototype.clearInfo = function() {
  this.setInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.ResponseGetChainInfo.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.RequestSearch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.RequestSearch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.RequestSearch.displayName = 'proto.forge_abi.RequestSearch';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.RequestSearch.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.RequestSearch.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.RequestSearch} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.RequestSearch.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        key: jspb.Message.getFieldWithDefault(msg, 1, ''),
        value: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.RequestSearch}
 */
proto.forge_abi.RequestSearch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.RequestSearch();
  return proto.forge_abi.RequestSearch.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.RequestSearch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.RequestSearch}
 */
proto.forge_abi.RequestSearch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.RequestSearch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.RequestSearch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.RequestSearch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.RequestSearch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string key = 1;
 * @return {string}
 */
proto.forge_abi.RequestSearch.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.RequestSearch.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string value = 2;
 * @return {string}
 */
proto.forge_abi.RequestSearch.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.RequestSearch.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ResponseSearch = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.forge_abi.ResponseSearch.repeatedFields_,
    null
  );
};
goog.inherits(proto.forge_abi.ResponseSearch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ResponseSearch.displayName = 'proto.forge_abi.ResponseSearch';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.ResponseSearch.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ResponseSearch.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ResponseSearch.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ResponseSearch} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ResponseSearch.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        txsList: jspb.Message.toObjectList(
          msg.getTxsList(),
          type_pb.TransactionInfo.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ResponseSearch}
 */
proto.forge_abi.ResponseSearch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ResponseSearch();
  return proto.forge_abi.ResponseSearch.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ResponseSearch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ResponseSearch}
 */
proto.forge_abi.ResponseSearch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = new type_pb.TransactionInfo();
        reader.readMessage(value, type_pb.TransactionInfo.deserializeBinaryFromReader);
        msg.addTxs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ResponseSearch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ResponseSearch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ResponseSearch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ResponseSearch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, type_pb.TransactionInfo.serializeBinaryToWriter);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.ResponseSearch.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.ResponseSearch.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated TransactionInfo txs = 2;
 * @return {!Array.<!proto.forge_abi.TransactionInfo>}
 */
proto.forge_abi.ResponseSearch.prototype.getTxsList = function() {
  return /** @type{!Array.<!proto.forge_abi.TransactionInfo>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    type_pb.TransactionInfo,
    2
  ));
};

/** @param {!Array.<!proto.forge_abi.TransactionInfo>} value */
proto.forge_abi.ResponseSearch.prototype.setTxsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.forge_abi.TransactionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.TransactionInfo}
 */
proto.forge_abi.ResponseSearch.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.forge_abi.TransactionInfo,
    opt_index
  );
};

proto.forge_abi.ResponseSearch.prototype.clearTxsList = function() {
  this.setTxsList([]);
};

goog.object.extend(exports, proto.forge_abi);

module.exports = proto.forge_abi;
