/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
var vendor_pb = require('./vendor_pb.js');
var enum_pb = require('./enum_pb.js');
goog.exportSymbol('proto.forge_abi.AbciContext', null, global);
goog.exportSymbol('proto.forge_abi.BigSint', null, global);
goog.exportSymbol('proto.forge_abi.BigUint', null, global);
goog.exportSymbol('proto.forge_abi.BlockInfo', null, global);
goog.exportSymbol('proto.forge_abi.ChainInfo', null, global);
goog.exportSymbol('proto.forge_abi.CircularQueue', null, global);
goog.exportSymbol('proto.forge_abi.ConsensusParams', null, global);
goog.exportSymbol('proto.forge_abi.GenesisInfo', null, global);
goog.exportSymbol('proto.forge_abi.GeoInfo', null, global);
goog.exportSymbol('proto.forge_abi.NetInfo', null, global);
goog.exportSymbol('proto.forge_abi.NodeInfo', null, global);
goog.exportSymbol('proto.forge_abi.PeerInfo', null, global);
goog.exportSymbol('proto.forge_abi.StakeContext', null, global);
goog.exportSymbol('proto.forge_abi.StakeSummary', null, global);
goog.exportSymbol('proto.forge_abi.StateContext', null, global);
goog.exportSymbol('proto.forge_abi.Transaction', null, global);
goog.exportSymbol('proto.forge_abi.TransactionInfo', null, global);
goog.exportSymbol('proto.forge_abi.TxStatus', null, global);
goog.exportSymbol('proto.forge_abi.UnconfirmedTxs', null, global);
goog.exportSymbol('proto.forge_abi.UpgradeTask', null, global);
goog.exportSymbol('proto.forge_abi.UpgradeTasks', null, global);
goog.exportSymbol('proto.forge_abi.Validator', null, global);
goog.exportSymbol('proto.forge_abi.ValidatorInfo', null, global);
goog.exportSymbol('proto.forge_abi.ValidatorsInfo', null, global);
goog.exportSymbol('proto.forge_abi.WalletInfo', null, global);
goog.exportSymbol('proto.forge_abi.WalletType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.BigUint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.BigUint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.BigUint.displayName = 'proto.forge_abi.BigUint';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.BigUint.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.BigUint.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.BigUint} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.BigUint.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        value: msg.getValue(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.BigUint}
 */
proto.forge_abi.BigUint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.BigUint();
  return proto.forge_abi.BigUint.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.BigUint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.BigUint}
 */
proto.forge_abi.BigUint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.BigUint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.BigUint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.BigUint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.BigUint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BigUint.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.forge_abi.BigUint.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getValue()));
};

/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BigUint.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getValue()));
};

/** @param {!(string|Uint8Array)} value */
proto.forge_abi.BigUint.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.BigSint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.BigSint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.BigSint.displayName = 'proto.forge_abi.BigSint';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.BigSint.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.BigSint.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.BigSint} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.BigSint.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        value: msg.getValue(),
        minus: jspb.Message.getFieldWithDefault(msg, 2, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.BigSint}
 */
proto.forge_abi.BigSint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.BigSint();
  return proto.forge_abi.BigSint.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.BigSint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.BigSint}
 */
proto.forge_abi.BigSint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setValue(value);
        break;
      case 2:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setMinus(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.BigSint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.BigSint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.BigSint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.BigSint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getMinus();
  if (f) {
    writer.writeBool(2, f);
  }
};

/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.BigSint.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.forge_abi.BigSint.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getValue()));
};

/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.forge_abi.BigSint.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getValue()));
};

/** @param {!(string|Uint8Array)} value */
proto.forge_abi.BigSint.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bool minus = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.forge_abi.BigSint.prototype.getMinus = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};

/** @param {boolean} value */
proto.forge_abi.BigSint.prototype.setMinus = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.WalletType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.WalletType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.WalletType.displayName = 'proto.forge_abi.WalletType';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.WalletType.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.WalletType.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.WalletType} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.WalletType.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        pk: jspb.Message.getFieldWithDefault(msg, 1, 0),
        hash: jspb.Message.getFieldWithDefault(msg, 2, 0),
        address: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.WalletType}
 */
proto.forge_abi.WalletType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.WalletType();
  return proto.forge_abi.WalletType.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.WalletType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.WalletType}
 */
proto.forge_abi.WalletType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.KeyType} */ (reader.readEnum());
        msg.setPk(value);
        break;
      case 2:
        var value = /** @type {!proto.forge_abi.HashType} */ (reader.readEnum());
        msg.setHash(value);
        break;
      case 3:
        var value = /** @type {!proto.forge_abi.EncodingType} */ (reader.readEnum());
        msg.setAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.WalletType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.WalletType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.WalletType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.WalletType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPk();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getHash();
  if (f !== 0.0) {
    writer.writeEnum(2, f);
  }
  f = message.getAddress();
  if (f !== 0.0) {
    writer.writeEnum(3, f);
  }
};

/**
 * optional KeyType pk = 1;
 * @return {!proto.forge_abi.KeyType}
 */
proto.forge_abi.WalletType.prototype.getPk = function() {
  return /** @type {!proto.forge_abi.KeyType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.KeyType} value */
proto.forge_abi.WalletType.prototype.setPk = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional HashType hash = 2;
 * @return {!proto.forge_abi.HashType}
 */
proto.forge_abi.WalletType.prototype.getHash = function() {
  return /** @type {!proto.forge_abi.HashType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {!proto.forge_abi.HashType} value */
proto.forge_abi.WalletType.prototype.setHash = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional EncodingType address = 3;
 * @return {!proto.forge_abi.EncodingType}
 */
proto.forge_abi.WalletType.prototype.getAddress = function() {
  return /** @type {!proto.forge_abi.EncodingType} */ (jspb.Message.getFieldWithDefault(
    this,
    3,
    0
  ));
};

/** @param {!proto.forge_abi.EncodingType} value */
proto.forge_abi.WalletType.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.WalletInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.WalletInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.WalletInfo.displayName = 'proto.forge_abi.WalletInfo';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.WalletInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.WalletInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.WalletInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.WalletInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        type: (f = msg.getType()) && proto.forge_abi.WalletType.toObject(includeInstance, f),
        sk: msg.getSk(),
        pk: msg.getPk(),
        address: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.WalletInfo}
 */
proto.forge_abi.WalletInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.WalletInfo();
  return proto.forge_abi.WalletInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.WalletInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.WalletInfo}
 */
proto.forge_abi.WalletInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.forge_abi.WalletType();
        reader.readMessage(value, proto.forge_abi.WalletType.deserializeBinaryFromReader);
        msg.setType(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSk(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPk(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.WalletInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.WalletInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.WalletInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.WalletInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f != null) {
    writer.writeMessage(1, f, proto.forge_abi.WalletType.serializeBinaryToWriter);
  }
  f = message.getSk_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional WalletType type = 1;
 * @return {?proto.forge_abi.WalletType}
 */
proto.forge_abi.WalletInfo.prototype.getType = function() {
  return /** @type{?proto.forge_abi.WalletType} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.WalletType,
    1
  ));
};

/** @param {?proto.forge_abi.WalletType|undefined} value */
proto.forge_abi.WalletInfo.prototype.setType = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.forge_abi.WalletInfo.prototype.clearType = function() {
  this.setType(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.WalletInfo.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bytes sk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.WalletInfo.prototype.getSk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes sk = 2;
 * This is a type-conversion wrapper around `getSk()`
 * @return {string}
 */
proto.forge_abi.WalletInfo.prototype.getSk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSk()));
};

/**
 * optional bytes sk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSk()`
 * @return {!Uint8Array}
 */
proto.forge_abi.WalletInfo.prototype.getSk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSk()));
};

/** @param {!(string|Uint8Array)} value */
proto.forge_abi.WalletInfo.prototype.setSk = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional bytes pk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.WalletInfo.prototype.getPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * optional bytes pk = 3;
 * This is a type-conversion wrapper around `getPk()`
 * @return {string}
 */
proto.forge_abi.WalletInfo.prototype.getPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPk()));
};

/**
 * optional bytes pk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPk()`
 * @return {!Uint8Array}
 */
proto.forge_abi.WalletInfo.prototype.getPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPk()));
};

/** @param {!(string|Uint8Array)} value */
proto.forge_abi.WalletInfo.prototype.setPk = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional string address = 4;
 * @return {string}
 */
proto.forge_abi.WalletInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/** @param {string} value */
proto.forge_abi.WalletInfo.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ChainInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.ChainInfo.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.ChainInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ChainInfo.displayName = 'proto.forge_abi.ChainInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.ChainInfo.repeatedFields_ = [16];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ChainInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ChainInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ChainInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ChainInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        network: jspb.Message.getFieldWithDefault(msg, 2, ''),
        moniker: jspb.Message.getFieldWithDefault(msg, 3, ''),
        consensusVersion: jspb.Message.getFieldWithDefault(msg, 4, ''),
        synced: jspb.Message.getFieldWithDefault(msg, 5, false),
        appHash: msg.getAppHash(),
        blockHash: msg.getBlockHash(),
        blockHeight: jspb.Message.getFieldWithDefault(msg, 8, 0),
        blockTime:
          (f = msg.getBlockTime()) &&
          google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        address: jspb.Message.getFieldWithDefault(msg, 10, ''),
        votingPower: jspb.Message.getFieldWithDefault(msg, 11, 0),
        totalTxs: jspb.Message.getFieldWithDefault(msg, 12, 0),
        version: jspb.Message.getFieldWithDefault(msg, 13, ''),
        dataVersion: jspb.Message.getFieldWithDefault(msg, 14, ''),
        forgeAppsVersionMap: (f = msg.getForgeAppsVersionMap())
          ? f.toObject(includeInstance, undefined)
          : [],
        supportedTxsList: jspb.Message.getRepeatedField(msg, 16),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ChainInfo}
 */
proto.forge_abi.ChainInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ChainInfo();
  return proto.forge_abi.ChainInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ChainInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ChainInfo}
 */
proto.forge_abi.ChainInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setNetwork(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setMoniker(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setConsensusVersion(value);
        break;
      case 5:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSynced(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAppHash(value);
        break;
      case 7:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setBlockHash(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setBlockHeight(value);
        break;
      case 9:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(
          value,
          google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
        );
        msg.setBlockTime(value);
        break;
      case 10:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 11:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setVotingPower(value);
        break;
      case 12:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTotalTxs(value);
        break;
      case 13:
        var value = /** @type {string} */ (reader.readString());
        msg.setVersion(value);
        break;
      case 14:
        var value = /** @type {string} */ (reader.readString());
        msg.setDataVersion(value);
        break;
      case 15:
        var value = msg.getForgeAppsVersionMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString
          );
        });
        break;
      case 16:
        var value = /** @type {string} */ (reader.readString());
        msg.addSupportedTxs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ChainInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ChainInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ChainInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ChainInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getConsensusVersion();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getSynced();
  if (f) {
    writer.writeBool(5, f);
  }
  f = message.getAppHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(6, f);
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(7, f);
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(8, f);
  }
  f = message.getBlockTime();
  if (f != null) {
    writer.writeMessage(9, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(10, f);
  }
  f = message.getVotingPower();
  if (f !== 0) {
    writer.writeUint32(11, f);
  }
  f = message.getTotalTxs();
  if (f !== 0) {
    writer.writeUint64(12, f);
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(13, f);
  }
  f = message.getDataVersion();
  if (f.length > 0) {
    writer.writeString(14, f);
  }
  f = message.getForgeAppsVersionMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      15,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    );
  }
  f = message.getSupportedTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(16, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.ChainInfo.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string network = 2;
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.ChainInfo.prototype.setNetwork = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional string moniker = 3;
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.forge_abi.ChainInfo.prototype.setMoniker = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional string consensus_version = 4;
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getConsensusVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/** @param {string} value */
proto.forge_abi.ChainInfo.prototype.setConsensusVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional bool synced = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.forge_abi.ChainInfo.prototype.getSynced = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};

/** @param {boolean} value */
proto.forge_abi.ChainInfo.prototype.setSynced = function(value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * optional bytes app_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.ChainInfo.prototype.getAppHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * optional bytes app_hash = 6;
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getAppHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAppHash()));
};

/**
 * optional bytes app_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.ChainInfo.prototype.getAppHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAppHash()));
};

/** @param {!(string|Uint8Array)} value */
proto.forge_abi.ChainInfo.prototype.setAppHash = function(value) {
  jspb.Message.setField(this, 6, value);
};

/**
 * optional bytes block_hash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.ChainInfo.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * optional bytes block_hash = 7;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBlockHash()));
};

/**
 * optional bytes block_hash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.forge_abi.ChainInfo.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBlockHash()));
};

/** @param {!(string|Uint8Array)} value */
proto.forge_abi.ChainInfo.prototype.setBlockHash = function(value) {
  jspb.Message.setField(this, 7, value);
};

/**
 * optional uint64 block_height = 8;
 * @return {number}
 */
proto.forge_abi.ChainInfo.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/** @param {number} value */
proto.forge_abi.ChainInfo.prototype.setBlockHeight = function(value) {
  jspb.Message.setField(this, 8, value);
};

/**
 * optional google.protobuf.Timestamp block_time = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_abi.ChainInfo.prototype.getBlockTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    9
  ));
};

/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.forge_abi.ChainInfo.prototype.setBlockTime = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};

proto.forge_abi.ChainInfo.prototype.clearBlockTime = function() {
  this.setBlockTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.ChainInfo.prototype.hasBlockTime = function() {
  return jspb.Message.getField(this, 9) != null;
};

/**
 * optional string address = 10;
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''));
};

/** @param {string} value */
proto.forge_abi.ChainInfo.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 10, value);
};

/**
 * optional uint32 voting_power = 11;
 * @return {number}
 */
proto.forge_abi.ChainInfo.prototype.getVotingPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};

/** @param {number} value */
proto.forge_abi.ChainInfo.prototype.setVotingPower = function(value) {
  jspb.Message.setField(this, 11, value);
};

/**
 * optional uint64 total_txs = 12;
 * @return {number}
 */
proto.forge_abi.ChainInfo.prototype.getTotalTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};

/** @param {number} value */
proto.forge_abi.ChainInfo.prototype.setTotalTxs = function(value) {
  jspb.Message.setField(this, 12, value);
};

/**
 * optional string version = 13;
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ''));
};

/** @param {string} value */
proto.forge_abi.ChainInfo.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 13, value);
};

/**
 * optional string data_version = 14;
 * @return {string}
 */
proto.forge_abi.ChainInfo.prototype.getDataVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ''));
};

/** @param {string} value */
proto.forge_abi.ChainInfo.prototype.setDataVersion = function(value) {
  jspb.Message.setField(this, 14, value);
};

/**
 * map<string, string> forge_apps_version = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.forge_abi.ChainInfo.prototype.getForgeAppsVersionMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(
    this,
    15,
    opt_noLazyCreate,
    null
  ));
};

proto.forge_abi.ChainInfo.prototype.clearForgeAppsVersionMap = function() {
  this.getForgeAppsVersionMap().clear();
};

/**
 * repeated string supported_txs = 16;
 * @return {!Array.<string>}
 */
proto.forge_abi.ChainInfo.prototype.getSupportedTxsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 16));
};

/** @param {!Array.<string>} value */
proto.forge_abi.ChainInfo.prototype.setSupportedTxsList = function(value) {
  jspb.Message.setField(this, 16, value || []);
};

/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.forge_abi.ChainInfo.prototype.addSupportedTxs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};

proto.forge_abi.ChainInfo.prototype.clearSupportedTxsList = function() {
  this.setSupportedTxsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.Validator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.Validator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.Validator.displayName = 'proto.forge_abi.Validator';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.Validator.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.Validator.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.Validator} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.Validator.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        power: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.Validator}
 */
proto.forge_abi.Validator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.Validator();
  return proto.forge_abi.Validator.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.Validator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.Validator}
 */
proto.forge_abi.Validator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setPower(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.Validator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.Validator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.Validator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.Validator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.forge_abi.Validator.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.Validator.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional uint64 power = 2;
 * @return {number}
 */
proto.forge_abi.Validator.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.forge_abi.Validator.prototype.setPower = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ConsensusParams = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.forge_abi.ConsensusParams.repeatedFields_,
    null
  );
};
goog.inherits(proto.forge_abi.ConsensusParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ConsensusParams.displayName = 'proto.forge_abi.ConsensusParams';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.ConsensusParams.repeatedFields_ = [5, 6];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ConsensusParams.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ConsensusParams.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ConsensusParams} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ConsensusParams.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        maxBytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
        maxGas: jspb.Message.getFieldWithDefault(msg, 2, 0),
        maxValidators: jspb.Message.getFieldWithDefault(msg, 3, 0),
        maxCandidates: jspb.Message.getFieldWithDefault(msg, 4, 0),
        pubKeyTypesList: jspb.Message.getRepeatedField(msg, 5),
        validatorsList: jspb.Message.toObjectList(
          msg.getValidatorsList(),
          proto.forge_abi.Validator.toObject,
          includeInstance
        ),
        validatorChanged: jspb.Message.getFieldWithDefault(msg, 7, false),
        paramChanged: jspb.Message.getFieldWithDefault(msg, 8, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ConsensusParams}
 */
proto.forge_abi.ConsensusParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ConsensusParams();
  return proto.forge_abi.ConsensusParams.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ConsensusParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ConsensusParams}
 */
proto.forge_abi.ConsensusParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMaxBytes(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readSint64());
        msg.setMaxGas(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setMaxValidators(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setMaxCandidates(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.addPubKeyTypes(value);
        break;
      case 6:
        var value = new proto.forge_abi.Validator();
        reader.readMessage(value, proto.forge_abi.Validator.deserializeBinaryFromReader);
        msg.addValidators(value);
        break;
      case 7:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setValidatorChanged(value);
        break;
      case 8:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setParamChanged(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ConsensusParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ConsensusParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ConsensusParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ConsensusParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxBytes();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getMaxGas();
  if (f !== 0) {
    writer.writeSint64(2, f);
  }
  f = message.getMaxValidators();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getMaxCandidates();
  if (f !== 0) {
    writer.writeUint32(4, f);
  }
  f = message.getPubKeyTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(5, f);
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(6, f, proto.forge_abi.Validator.serializeBinaryToWriter);
  }
  f = message.getValidatorChanged();
  if (f) {
    writer.writeBool(7, f);
  }
  f = message.getParamChanged();
  if (f) {
    writer.writeBool(8, f);
  }
};

/**
 * optional uint64 max_bytes = 1;
 * @return {number}
 */
proto.forge_abi.ConsensusParams.prototype.getMaxBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.forge_abi.ConsensusParams.prototype.setMaxBytes = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional sint64 max_gas = 2;
 * @return {number}
 */
proto.forge_abi.ConsensusParams.prototype.getMaxGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.forge_abi.ConsensusParams.prototype.setMaxGas = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional uint32 max_validators = 3;
 * @return {number}
 */
proto.forge_abi.ConsensusParams.prototype.getMaxValidators = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.forge_abi.ConsensusParams.prototype.setMaxValidators = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional uint32 max_candidates = 4;
 * @return {number}
 */
proto.forge_abi.ConsensusParams.prototype.getMaxCandidates = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/** @param {number} value */
proto.forge_abi.ConsensusParams.prototype.setMaxCandidates = function(value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * repeated string pub_key_types = 5;
 * @return {!Array.<string>}
 */
proto.forge_abi.ConsensusParams.prototype.getPubKeyTypesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 5));
};

/** @param {!Array.<string>} value */
proto.forge_abi.ConsensusParams.prototype.setPubKeyTypesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};

/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.forge_abi.ConsensusParams.prototype.addPubKeyTypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};

proto.forge_abi.ConsensusParams.prototype.clearPubKeyTypesList = function() {
  this.setPubKeyTypesList([]);
};

/**
 * repeated Validator validators = 6;
 * @return {!Array.<!proto.forge_abi.Validator>}
 */
proto.forge_abi.ConsensusParams.prototype.getValidatorsList = function() {
  return /** @type{!Array.<!proto.forge_abi.Validator>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.Validator,
    6
  ));
};

/** @param {!Array.<!proto.forge_abi.Validator>} value */
proto.forge_abi.ConsensusParams.prototype.setValidatorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};

/**
 * @param {!proto.forge_abi.Validator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.Validator}
 */
proto.forge_abi.ConsensusParams.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    6,
    opt_value,
    proto.forge_abi.Validator,
    opt_index
  );
};

proto.forge_abi.ConsensusParams.prototype.clearValidatorsList = function() {
  this.setValidatorsList([]);
};

/**
 * optional bool validator_changed = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.forge_abi.ConsensusParams.prototype.getValidatorChanged = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};

/** @param {boolean} value */
proto.forge_abi.ConsensusParams.prototype.setValidatorChanged = function(value) {
  jspb.Message.setField(this, 7, value);
};

/**
 * optional bool param_changed = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.forge_abi.ConsensusParams.prototype.getParamChanged = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};

/** @param {boolean} value */
proto.forge_abi.ConsensusParams.prototype.setParamChanged = function(value) {
  jspb.Message.setField(this, 8, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.UpgradeTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.UpgradeTask.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.UpgradeTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.UpgradeTask.displayName = 'proto.forge_abi.UpgradeTask';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.UpgradeTask.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.UpgradeTask.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.UpgradeTask.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.UpgradeTask} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.UpgradeTask.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, 0),
        dataHash: jspb.Message.getFieldWithDefault(msg, 2, ''),
        actionsList: jspb.Message.getRepeatedField(msg, 4),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.UpgradeTask}
 */
proto.forge_abi.UpgradeTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.UpgradeTask();
  return proto.forge_abi.UpgradeTask.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.UpgradeTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.UpgradeTask}
 */
proto.forge_abi.UpgradeTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.UpgradeType} */ (reader.readEnum());
        msg.setType(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setDataHash(value);
        break;
      case 4:
        var value = /** @type {!Array.<!proto.forge_abi.UpgradeAction>} */ (reader.readPackedEnum());
        msg.setActionsList(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.UpgradeTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.UpgradeTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.UpgradeTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.UpgradeTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getDataHash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writePackedEnum(4, f);
  }
};

/**
 * optional UpgradeType type = 1;
 * @return {!proto.forge_abi.UpgradeType}
 */
proto.forge_abi.UpgradeTask.prototype.getType = function() {
  return /** @type {!proto.forge_abi.UpgradeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.UpgradeType} value */
proto.forge_abi.UpgradeTask.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string data_hash = 2;
 * @return {string}
 */
proto.forge_abi.UpgradeTask.prototype.getDataHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.UpgradeTask.prototype.setDataHash = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * repeated UpgradeAction actions = 4;
 * @return {!Array.<!proto.forge_abi.UpgradeAction>}
 */
proto.forge_abi.UpgradeTask.prototype.getActionsList = function() {
  return /** @type {!Array.<!proto.forge_abi.UpgradeAction>} */ (jspb.Message.getRepeatedField(
    this,
    4
  ));
};

/** @param {!Array.<!proto.forge_abi.UpgradeAction>} value */
proto.forge_abi.UpgradeTask.prototype.setActionsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};

/**
 * @param {!proto.forge_abi.UpgradeAction} value
 * @param {number=} opt_index
 */
proto.forge_abi.UpgradeTask.prototype.addActions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};

proto.forge_abi.UpgradeTask.prototype.clearActionsList = function() {
  this.setActionsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.UpgradeTasks = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.forge_abi.UpgradeTasks.repeatedFields_,
    null
  );
};
goog.inherits(proto.forge_abi.UpgradeTasks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.UpgradeTasks.displayName = 'proto.forge_abi.UpgradeTasks';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.UpgradeTasks.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.UpgradeTasks.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.UpgradeTasks.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.UpgradeTasks} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.UpgradeTasks.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        itemList: jspb.Message.toObjectList(
          msg.getItemList(),
          proto.forge_abi.UpgradeTask.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.UpgradeTasks}
 */
proto.forge_abi.UpgradeTasks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.UpgradeTasks();
  return proto.forge_abi.UpgradeTasks.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.UpgradeTasks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.UpgradeTasks}
 */
proto.forge_abi.UpgradeTasks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.forge_abi.UpgradeTask();
        reader.readMessage(value, proto.forge_abi.UpgradeTask.deserializeBinaryFromReader);
        msg.addItem(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.UpgradeTasks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.UpgradeTasks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.UpgradeTasks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.UpgradeTasks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.forge_abi.UpgradeTask.serializeBinaryToWriter);
  }
};

/**
 * repeated UpgradeTask item = 1;
 * @return {!Array.<!proto.forge_abi.UpgradeTask>}
 */
proto.forge_abi.UpgradeTasks.prototype.getItemList = function() {
  return /** @type{!Array.<!proto.forge_abi.UpgradeTask>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.UpgradeTask,
    1
  ));
};

/** @param {!Array.<!proto.forge_abi.UpgradeTask>} value */
proto.forge_abi.UpgradeTasks.prototype.setItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.forge_abi.UpgradeTask=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.UpgradeTask}
 */
proto.forge_abi.UpgradeTasks.prototype.addItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.forge_abi.UpgradeTask,
    opt_index
  );
};

proto.forge_abi.UpgradeTasks.prototype.clearItemList = function() {
  this.setItemList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.AbciContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.AbciContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.AbciContext.displayName = 'proto.forge_abi.AbciContext';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.AbciContext.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.AbciContext.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.AbciContext} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.AbciContext.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        txHash: jspb.Message.getFieldWithDefault(msg, 1, ''),
        blockHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
        blockTime:
          (f = msg.getBlockTime()) &&
          google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.AbciContext}
 */
proto.forge_abi.AbciContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.AbciContext();
  return proto.forge_abi.AbciContext.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.AbciContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.AbciContext}
 */
proto.forge_abi.AbciContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTxHash(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setBlockHeight(value);
        break;
      case 3:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(
          value,
          google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
        );
        msg.setBlockTime(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.AbciContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.AbciContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.AbciContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.AbciContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getBlockTime();
  if (f != null) {
    writer.writeMessage(3, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
};

/**
 * optional string tx_hash = 1;
 * @return {string}
 */
proto.forge_abi.AbciContext.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.AbciContext.prototype.setTxHash = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional uint64 block_height = 2;
 * @return {number}
 */
proto.forge_abi.AbciContext.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.forge_abi.AbciContext.prototype.setBlockHeight = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional google.protobuf.Timestamp block_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_abi.AbciContext.prototype.getBlockTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    3
  ));
};

/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.forge_abi.AbciContext.prototype.setBlockTime = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.forge_abi.AbciContext.prototype.clearBlockTime = function() {
  this.setBlockTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.AbciContext.prototype.hasBlockTime = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.Transaction.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.Transaction.displayName = 'proto.forge_abi.Transaction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.Transaction.repeatedFields_ = [5];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.Transaction.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.Transaction.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.Transaction} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.Transaction.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        from: jspb.Message.getFieldWithDefault(msg, 1, ''),
        nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
        signature: msg.getSignature(),
        chainId: jspb.Message.getFieldWithDefault(msg, 4, 0),
        signaturesList: jspb.Message.toObjectList(
          msg.getSignaturesList(),
          vendor_pb.KVPair.toObject,
          includeInstance
        ),
        itx: (f = msg.getItx()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.Transaction}
 */
proto.forge_abi.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.Transaction();
  return proto.forge_abi.Transaction.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.Transaction}
 */
proto.forge_abi.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setFrom(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setNonce(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSignature(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setChainId(value);
        break;
      case 5:
        var value = new vendor_pb.KVPair();
        reader.readMessage(value, vendor_pb.KVPair.deserializeBinaryFromReader);
        msg.addSignatures(value);
        break;
      case 7:
        var value = new google_protobuf_any_pb.Any();
        reader.readMessage(value, google_protobuf_any_pb.Any.deserializeBinaryFromReader);
        msg.setItx(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getChainId();
  if (f !== 0) {
    writer.writeUint32(4, f);
  }
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(5, f, vendor_pb.KVPair.serializeBinaryToWriter);
  }
  f = message.getItx();
  if (f != null) {
    writer.writeMessage(7, f, google_protobuf_any_pb.Any.serializeBinaryToWriter);
  }
};

/**
 * optional string from = 1;
 * @return {string}
 */
proto.forge_abi.Transaction.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.Transaction.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.forge_abi.Transaction.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.forge_abi.Transaction.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.forge_abi.Transaction.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.forge_abi.Transaction.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.forge_abi.Transaction.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getSignature()));
};

/** @param {!(string|Uint8Array)} value */
proto.forge_abi.Transaction.prototype.setSignature = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional uint32 chain_id = 4;
 * @return {number}
 */
proto.forge_abi.Transaction.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/** @param {number} value */
proto.forge_abi.Transaction.prototype.setChainId = function(value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * repeated forge_vendor.KVPair signatures = 5;
 * @return {!Array.<!proto.forge_vendor.KVPair>}
 */
proto.forge_abi.Transaction.prototype.getSignaturesList = function() {
  return /** @type{!Array.<!proto.forge_vendor.KVPair>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    vendor_pb.KVPair,
    5
  ));
};

/** @param {!Array.<!proto.forge_vendor.KVPair>} value */
proto.forge_abi.Transaction.prototype.setSignaturesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};

/**
 * @param {!proto.forge_vendor.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_vendor.KVPair}
 */
proto.forge_abi.Transaction.prototype.addSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    5,
    opt_value,
    proto.forge_vendor.KVPair,
    opt_index
  );
};

proto.forge_abi.Transaction.prototype.clearSignaturesList = function() {
  this.setSignaturesList([]);
};

/**
 * optional google.protobuf.Any itx = 7;
 * @return {?proto.google.protobuf.Any}
 */
proto.forge_abi.Transaction.prototype.getItx = function() {
  return /** @type{?proto.google.protobuf.Any} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_any_pb.Any,
    7
  ));
};

/** @param {?proto.google.protobuf.Any|undefined} value */
proto.forge_abi.Transaction.prototype.setItx = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};

proto.forge_abi.Transaction.prototype.clearItx = function() {
  this.setItx(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.Transaction.prototype.hasItx = function() {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.TransactionInfo = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.forge_abi.TransactionInfo.repeatedFields_,
    null
  );
};
goog.inherits(proto.forge_abi.TransactionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.TransactionInfo.displayName = 'proto.forge_abi.TransactionInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.TransactionInfo.repeatedFields_ = [5];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.TransactionInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.TransactionInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.TransactionInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.TransactionInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        tx: (f = msg.getTx()) && proto.forge_abi.Transaction.toObject(includeInstance, f),
        height: jspb.Message.getFieldWithDefault(msg, 2, 0),
        index: jspb.Message.getFieldWithDefault(msg, 3, 0),
        hash: jspb.Message.getFieldWithDefault(msg, 4, ''),
        tagsList: jspb.Message.toObjectList(
          msg.getTagsList(),
          vendor_pb.KVPair.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.TransactionInfo}
 */
proto.forge_abi.TransactionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.TransactionInfo();
  return proto.forge_abi.TransactionInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.TransactionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.TransactionInfo}
 */
proto.forge_abi.TransactionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.forge_abi.Transaction();
        reader.readMessage(value, proto.forge_abi.Transaction.deserializeBinaryFromReader);
        msg.setTx(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setHeight(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setIndex(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setHash(value);
        break;
      case 5:
        var value = new vendor_pb.KVPair();
        reader.readMessage(value, vendor_pb.KVPair.deserializeBinaryFromReader);
        msg.addTags(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.TransactionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.TransactionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.TransactionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.TransactionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(1, f, proto.forge_abi.Transaction.serializeBinaryToWriter);
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(5, f, vendor_pb.KVPair.serializeBinaryToWriter);
  }
};

/**
 * optional Transaction tx = 1;
 * @return {?proto.forge_abi.Transaction}
 */
proto.forge_abi.TransactionInfo.prototype.getTx = function() {
  return /** @type{?proto.forge_abi.Transaction} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.Transaction,
    1
  ));
};

/** @param {?proto.forge_abi.Transaction|undefined} value */
proto.forge_abi.TransactionInfo.prototype.setTx = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.forge_abi.TransactionInfo.prototype.clearTx = function() {
  this.setTx(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.TransactionInfo.prototype.hasTx = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.forge_abi.TransactionInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.forge_abi.TransactionInfo.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional uint32 index = 3;
 * @return {number}
 */
proto.forge_abi.TransactionInfo.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.forge_abi.TransactionInfo.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional string hash = 4;
 * @return {string}
 */
proto.forge_abi.TransactionInfo.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/** @param {string} value */
proto.forge_abi.TransactionInfo.prototype.setHash = function(value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * repeated forge_vendor.KVPair tags = 5;
 * @return {!Array.<!proto.forge_vendor.KVPair>}
 */
proto.forge_abi.TransactionInfo.prototype.getTagsList = function() {
  return /** @type{!Array.<!proto.forge_vendor.KVPair>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    vendor_pb.KVPair,
    5
  ));
};

/** @param {!Array.<!proto.forge_vendor.KVPair>} value */
proto.forge_abi.TransactionInfo.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};

/**
 * @param {!proto.forge_vendor.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_vendor.KVPair}
 */
proto.forge_abi.TransactionInfo.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    5,
    opt_value,
    proto.forge_vendor.KVPair,
    opt_index
  );
};

proto.forge_abi.TransactionInfo.prototype.clearTagsList = function() {
  this.setTagsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.BlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.BlockInfo.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.BlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.BlockInfo.displayName = 'proto.forge_abi.BlockInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.BlockInfo.repeatedFields_ = [6];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.BlockInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.BlockInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.BlockInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.BlockInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        height: jspb.Message.getFieldWithDefault(msg, 1, 0),
        numTxs: jspb.Message.getFieldWithDefault(msg, 2, 0),
        time:
          (f = msg.getTime()) &&
          google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        appHash: jspb.Message.getFieldWithDefault(msg, 4, ''),
        proposer: jspb.Message.getFieldWithDefault(msg, 5, ''),
        txsList: jspb.Message.toObjectList(
          msg.getTxsList(),
          proto.forge_abi.Transaction.toObject,
          includeInstance
        ),
        totalTxs: jspb.Message.getFieldWithDefault(msg, 7, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.BlockInfo}
 */
proto.forge_abi.BlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.BlockInfo();
  return proto.forge_abi.BlockInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.BlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.BlockInfo}
 */
proto.forge_abi.BlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setHeight(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setNumTxs(value);
        break;
      case 3:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(
          value,
          google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
        );
        msg.setTime(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setAppHash(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setProposer(value);
        break;
      case 6:
        var value = new proto.forge_abi.Transaction();
        reader.readMessage(value, proto.forge_abi.Transaction.deserializeBinaryFromReader);
        msg.addTxs(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTotalTxs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.BlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.BlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.BlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.BlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getNumTxs();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(3, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
  f = message.getAppHash();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getProposer();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(6, f, proto.forge_abi.Transaction.serializeBinaryToWriter);
  }
  f = message.getTotalTxs();
  if (f !== 0) {
    writer.writeUint64(7, f);
  }
};

/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.forge_abi.BlockInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.forge_abi.BlockInfo.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional uint32 num_txs = 2;
 * @return {number}
 */
proto.forge_abi.BlockInfo.prototype.getNumTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.forge_abi.BlockInfo.prototype.setNumTxs = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional google.protobuf.Timestamp time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_abi.BlockInfo.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    3
  ));
};

/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.forge_abi.BlockInfo.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.forge_abi.BlockInfo.prototype.clearTime = function() {
  this.setTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.BlockInfo.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional string app_hash = 4;
 * @return {string}
 */
proto.forge_abi.BlockInfo.prototype.getAppHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/** @param {string} value */
proto.forge_abi.BlockInfo.prototype.setAppHash = function(value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional string proposer = 5;
 * @return {string}
 */
proto.forge_abi.BlockInfo.prototype.getProposer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/** @param {string} value */
proto.forge_abi.BlockInfo.prototype.setProposer = function(value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * repeated Transaction txs = 6;
 * @return {!Array.<!proto.forge_abi.Transaction>}
 */
proto.forge_abi.BlockInfo.prototype.getTxsList = function() {
  return /** @type{!Array.<!proto.forge_abi.Transaction>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.Transaction,
    6
  ));
};

/** @param {!Array.<!proto.forge_abi.Transaction>} value */
proto.forge_abi.BlockInfo.prototype.setTxsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};

/**
 * @param {!proto.forge_abi.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.Transaction}
 */
proto.forge_abi.BlockInfo.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    6,
    opt_value,
    proto.forge_abi.Transaction,
    opt_index
  );
};

proto.forge_abi.BlockInfo.prototype.clearTxsList = function() {
  this.setTxsList([]);
};

/**
 * optional uint64 total_txs = 7;
 * @return {number}
 */
proto.forge_abi.BlockInfo.prototype.getTotalTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/** @param {number} value */
proto.forge_abi.BlockInfo.prototype.setTotalTxs = function(value) {
  jspb.Message.setField(this, 7, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.TxStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.TxStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.TxStatus.displayName = 'proto.forge_abi.TxStatus';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.TxStatus.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.TxStatus.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.TxStatus} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.TxStatus.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        code: jspb.Message.getFieldWithDefault(msg, 1, 0),
        hash: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.TxStatus}
 */
proto.forge_abi.TxStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.TxStatus();
  return proto.forge_abi.TxStatus.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.TxStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.TxStatus}
 */
proto.forge_abi.TxStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.forge_abi.StatusCode} */ (reader.readEnum());
        msg.setCode(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.TxStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.TxStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.TxStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.TxStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional StatusCode code = 1;
 * @return {!proto.forge_abi.StatusCode}
 */
proto.forge_abi.TxStatus.prototype.getCode = function() {
  return /** @type {!proto.forge_abi.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.forge_abi.StatusCode} value */
proto.forge_abi.TxStatus.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string hash = 2;
 * @return {string}
 */
proto.forge_abi.TxStatus.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.TxStatus.prototype.setHash = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.CircularQueue = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.forge_abi.CircularQueue.repeatedFields_,
    null
  );
};
goog.inherits(proto.forge_abi.CircularQueue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.CircularQueue.displayName = 'proto.forge_abi.CircularQueue';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.CircularQueue.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.CircularQueue.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.CircularQueue.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.CircularQueue} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.CircularQueue.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        itemsList: jspb.Message.toObjectList(
          msg.getItemsList(),
          google_protobuf_any_pb.Any.toObject,
          includeInstance
        ),
        typeUrl: jspb.Message.getFieldWithDefault(msg, 2, ''),
        maxItems: jspb.Message.getFieldWithDefault(msg, 3, 0),
        circular: jspb.Message.getFieldWithDefault(msg, 4, false),
        fifo: jspb.Message.getFieldWithDefault(msg, 5, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.CircularQueue}
 */
proto.forge_abi.CircularQueue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.CircularQueue();
  return proto.forge_abi.CircularQueue.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.CircularQueue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.CircularQueue}
 */
proto.forge_abi.CircularQueue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new google_protobuf_any_pb.Any();
        reader.readMessage(value, google_protobuf_any_pb.Any.deserializeBinaryFromReader);
        msg.addItems(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setTypeUrl(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setMaxItems(value);
        break;
      case 4:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setCircular(value);
        break;
      case 5:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setFifo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.CircularQueue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.CircularQueue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.CircularQueue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.CircularQueue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, google_protobuf_any_pb.Any.serializeBinaryToWriter);
  }
  f = message.getTypeUrl();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getMaxItems();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getCircular();
  if (f) {
    writer.writeBool(4, f);
  }
  f = message.getFifo();
  if (f) {
    writer.writeBool(5, f);
  }
};

/**
 * repeated google.protobuf.Any items = 1;
 * @return {!Array.<!proto.google.protobuf.Any>}
 */
proto.forge_abi.CircularQueue.prototype.getItemsList = function() {
  return /** @type{!Array.<!proto.google.protobuf.Any>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    google_protobuf_any_pb.Any,
    1
  ));
};

/** @param {!Array.<!proto.google.protobuf.Any>} value */
proto.forge_abi.CircularQueue.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.google.protobuf.Any=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Any}
 */
proto.forge_abi.CircularQueue.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.google.protobuf.Any,
    opt_index
  );
};

proto.forge_abi.CircularQueue.prototype.clearItemsList = function() {
  this.setItemsList([]);
};

/**
 * optional string type_url = 2;
 * @return {string}
 */
proto.forge_abi.CircularQueue.prototype.getTypeUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.CircularQueue.prototype.setTypeUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional uint32 max_items = 3;
 * @return {number}
 */
proto.forge_abi.CircularQueue.prototype.getMaxItems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.forge_abi.CircularQueue.prototype.setMaxItems = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional bool circular = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.forge_abi.CircularQueue.prototype.getCircular = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};

/** @param {boolean} value */
proto.forge_abi.CircularQueue.prototype.setCircular = function(value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional bool fifo = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.forge_abi.CircularQueue.prototype.getFifo = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};

/** @param {boolean} value */
proto.forge_abi.CircularQueue.prototype.setFifo = function(value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.StateContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.StateContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.StateContext.displayName = 'proto.forge_abi.StateContext';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.StateContext.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.StateContext.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.StateContext} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.StateContext.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        genesisTx: jspb.Message.getFieldWithDefault(msg, 1, ''),
        renaissanceTx: jspb.Message.getFieldWithDefault(msg, 2, ''),
        genesisTime:
          (f = msg.getGenesisTime()) &&
          google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        renaissanceTime:
          (f = msg.getRenaissanceTime()) &&
          google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.StateContext}
 */
proto.forge_abi.StateContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.StateContext();
  return proto.forge_abi.StateContext.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.StateContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.StateContext}
 */
proto.forge_abi.StateContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setGenesisTx(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setRenaissanceTx(value);
        break;
      case 3:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(
          value,
          google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
        );
        msg.setGenesisTime(value);
        break;
      case 4:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(
          value,
          google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
        );
        msg.setRenaissanceTime(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.StateContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.StateContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.StateContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.StateContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGenesisTx();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getRenaissanceTx();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getGenesisTime();
  if (f != null) {
    writer.writeMessage(3, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
  f = message.getRenaissanceTime();
  if (f != null) {
    writer.writeMessage(4, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
  }
};

/**
 * optional string genesis_tx = 1;
 * @return {string}
 */
proto.forge_abi.StateContext.prototype.getGenesisTx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.StateContext.prototype.setGenesisTx = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string renaissance_tx = 2;
 * @return {string}
 */
proto.forge_abi.StateContext.prototype.getRenaissanceTx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.StateContext.prototype.setRenaissanceTx = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional google.protobuf.Timestamp genesis_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_abi.StateContext.prototype.getGenesisTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    3
  ));
};

/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.forge_abi.StateContext.prototype.setGenesisTime = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.forge_abi.StateContext.prototype.clearGenesisTime = function() {
  this.setGenesisTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.StateContext.prototype.hasGenesisTime = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional google.protobuf.Timestamp renaissance_time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_abi.StateContext.prototype.getRenaissanceTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    4
  ));
};

/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.forge_abi.StateContext.prototype.setRenaissanceTime = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.forge_abi.StateContext.prototype.clearRenaissanceTime = function() {
  this.setRenaissanceTime(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.StateContext.prototype.hasRenaissanceTime = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.StakeContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.StakeContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.StakeContext.displayName = 'proto.forge_abi.StakeContext';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.StakeContext.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.StakeContext.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.StakeContext} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.StakeContext.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        totalStakes:
          (f = msg.getTotalStakes()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
        totalUnstakes:
          (f = msg.getTotalUnstakes()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
        totalReceivedStakes:
          (f = msg.getTotalReceivedStakes()) &&
          proto.forge_abi.BigUint.toObject(includeInstance, f),
        recentStakes:
          (f = msg.getRecentStakes()) && proto.forge_abi.CircularQueue.toObject(includeInstance, f),
        recentReceivedStakes:
          (f = msg.getRecentReceivedStakes()) &&
          proto.forge_abi.CircularQueue.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.StakeContext}
 */
proto.forge_abi.StakeContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.StakeContext();
  return proto.forge_abi.StakeContext.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.StakeContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.StakeContext}
 */
proto.forge_abi.StakeContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setTotalStakes(value);
        break;
      case 2:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setTotalUnstakes(value);
        break;
      case 3:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setTotalReceivedStakes(value);
        break;
      case 4:
        var value = new proto.forge_abi.CircularQueue();
        reader.readMessage(value, proto.forge_abi.CircularQueue.deserializeBinaryFromReader);
        msg.setRecentStakes(value);
        break;
      case 15:
        var value = new proto.forge_abi.CircularQueue();
        reader.readMessage(value, proto.forge_abi.CircularQueue.deserializeBinaryFromReader);
        msg.setRecentReceivedStakes(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.StakeContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.StakeContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.StakeContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.StakeContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalStakes();
  if (f != null) {
    writer.writeMessage(1, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
  f = message.getTotalUnstakes();
  if (f != null) {
    writer.writeMessage(2, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
  f = message.getTotalReceivedStakes();
  if (f != null) {
    writer.writeMessage(3, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
  f = message.getRecentStakes();
  if (f != null) {
    writer.writeMessage(4, f, proto.forge_abi.CircularQueue.serializeBinaryToWriter);
  }
  f = message.getRecentReceivedStakes();
  if (f != null) {
    writer.writeMessage(15, f, proto.forge_abi.CircularQueue.serializeBinaryToWriter);
  }
};

/**
 * optional BigUint total_stakes = 1;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.StakeContext.prototype.getTotalStakes = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.BigUint,
    1
  ));
};

/** @param {?proto.forge_abi.BigUint|undefined} value */
proto.forge_abi.StakeContext.prototype.setTotalStakes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.forge_abi.StakeContext.prototype.clearTotalStakes = function() {
  this.setTotalStakes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.StakeContext.prototype.hasTotalStakes = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional BigUint total_unstakes = 2;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.StakeContext.prototype.getTotalUnstakes = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.BigUint,
    2
  ));
};

/** @param {?proto.forge_abi.BigUint|undefined} value */
proto.forge_abi.StakeContext.prototype.setTotalUnstakes = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.StakeContext.prototype.clearTotalUnstakes = function() {
  this.setTotalUnstakes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.StakeContext.prototype.hasTotalUnstakes = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional BigUint total_received_stakes = 3;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.StakeContext.prototype.getTotalReceivedStakes = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.BigUint,
    3
  ));
};

/** @param {?proto.forge_abi.BigUint|undefined} value */
proto.forge_abi.StakeContext.prototype.setTotalReceivedStakes = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.forge_abi.StakeContext.prototype.clearTotalReceivedStakes = function() {
  this.setTotalReceivedStakes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.StakeContext.prototype.hasTotalReceivedStakes = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional CircularQueue recent_stakes = 4;
 * @return {?proto.forge_abi.CircularQueue}
 */
proto.forge_abi.StakeContext.prototype.getRecentStakes = function() {
  return /** @type{?proto.forge_abi.CircularQueue} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.CircularQueue,
    4
  ));
};

/** @param {?proto.forge_abi.CircularQueue|undefined} value */
proto.forge_abi.StakeContext.prototype.setRecentStakes = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.forge_abi.StakeContext.prototype.clearRecentStakes = function() {
  this.setRecentStakes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.StakeContext.prototype.hasRecentStakes = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional CircularQueue recent_received_stakes = 15;
 * @return {?proto.forge_abi.CircularQueue}
 */
proto.forge_abi.StakeContext.prototype.getRecentReceivedStakes = function() {
  return /** @type{?proto.forge_abi.CircularQueue} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.CircularQueue,
    15
  ));
};

/** @param {?proto.forge_abi.CircularQueue|undefined} value */
proto.forge_abi.StakeContext.prototype.setRecentReceivedStakes = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};

proto.forge_abi.StakeContext.prototype.clearRecentReceivedStakes = function() {
  this.setRecentReceivedStakes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.StakeContext.prototype.hasRecentReceivedStakes = function() {
  return jspb.Message.getField(this, 15) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.StakeSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.StakeSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.StakeSummary.displayName = 'proto.forge_abi.StakeSummary';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.StakeSummary.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.StakeSummary.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.StakeSummary} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.StakeSummary.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        totalStakes:
          (f = msg.getTotalStakes()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
        totalUnstakes:
          (f = msg.getTotalUnstakes()) && proto.forge_abi.BigUint.toObject(includeInstance, f),
        context:
          (f = msg.getContext()) && proto.forge_abi.StateContext.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.StakeSummary}
 */
proto.forge_abi.StakeSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.StakeSummary();
  return proto.forge_abi.StakeSummary.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.StakeSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.StakeSummary}
 */
proto.forge_abi.StakeSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setTotalStakes(value);
        break;
      case 2:
        var value = new proto.forge_abi.BigUint();
        reader.readMessage(value, proto.forge_abi.BigUint.deserializeBinaryFromReader);
        msg.setTotalUnstakes(value);
        break;
      case 3:
        var value = new proto.forge_abi.StateContext();
        reader.readMessage(value, proto.forge_abi.StateContext.deserializeBinaryFromReader);
        msg.setContext(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.StakeSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.StakeSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.StakeSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.StakeSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalStakes();
  if (f != null) {
    writer.writeMessage(1, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
  f = message.getTotalUnstakes();
  if (f != null) {
    writer.writeMessage(2, f, proto.forge_abi.BigUint.serializeBinaryToWriter);
  }
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(3, f, proto.forge_abi.StateContext.serializeBinaryToWriter);
  }
};

/**
 * optional BigUint total_stakes = 1;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.StakeSummary.prototype.getTotalStakes = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.BigUint,
    1
  ));
};

/** @param {?proto.forge_abi.BigUint|undefined} value */
proto.forge_abi.StakeSummary.prototype.setTotalStakes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.forge_abi.StakeSummary.prototype.clearTotalStakes = function() {
  this.setTotalStakes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.StakeSummary.prototype.hasTotalStakes = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional BigUint total_unstakes = 2;
 * @return {?proto.forge_abi.BigUint}
 */
proto.forge_abi.StakeSummary.prototype.getTotalUnstakes = function() {
  return /** @type{?proto.forge_abi.BigUint} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.BigUint,
    2
  ));
};

/** @param {?proto.forge_abi.BigUint|undefined} value */
proto.forge_abi.StakeSummary.prototype.setTotalUnstakes = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.StakeSummary.prototype.clearTotalUnstakes = function() {
  this.setTotalUnstakes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.StakeSummary.prototype.hasTotalUnstakes = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional StateContext context = 3;
 * @return {?proto.forge_abi.StateContext}
 */
proto.forge_abi.StakeSummary.prototype.getContext = function() {
  return /** @type{?proto.forge_abi.StateContext} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.StateContext,
    3
  ));
};

/** @param {?proto.forge_abi.StateContext|undefined} value */
proto.forge_abi.StakeSummary.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.forge_abi.StakeSummary.prototype.clearContext = function() {
  this.setContext(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.StakeSummary.prototype.hasContext = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.UnconfirmedTxs = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.forge_abi.UnconfirmedTxs.repeatedFields_,
    null
  );
};
goog.inherits(proto.forge_abi.UnconfirmedTxs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.UnconfirmedTxs.displayName = 'proto.forge_abi.UnconfirmedTxs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.UnconfirmedTxs.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.UnconfirmedTxs.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.UnconfirmedTxs.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.UnconfirmedTxs} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.UnconfirmedTxs.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        nTxs: jspb.Message.getFieldWithDefault(msg, 1, 0),
        txsList: jspb.Message.toObjectList(
          msg.getTxsList(),
          proto.forge_abi.Transaction.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.UnconfirmedTxs}
 */
proto.forge_abi.UnconfirmedTxs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.UnconfirmedTxs();
  return proto.forge_abi.UnconfirmedTxs.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.UnconfirmedTxs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.UnconfirmedTxs}
 */
proto.forge_abi.UnconfirmedTxs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setNTxs(value);
        break;
      case 2:
        var value = new proto.forge_abi.Transaction();
        reader.readMessage(value, proto.forge_abi.Transaction.deserializeBinaryFromReader);
        msg.addTxs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.UnconfirmedTxs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.UnconfirmedTxs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.UnconfirmedTxs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.UnconfirmedTxs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNTxs();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.forge_abi.Transaction.serializeBinaryToWriter);
  }
};

/**
 * optional uint32 n_txs = 1;
 * @return {number}
 */
proto.forge_abi.UnconfirmedTxs.prototype.getNTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.forge_abi.UnconfirmedTxs.prototype.setNTxs = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated Transaction txs = 2;
 * @return {!Array.<!proto.forge_abi.Transaction>}
 */
proto.forge_abi.UnconfirmedTxs.prototype.getTxsList = function() {
  return /** @type{!Array.<!proto.forge_abi.Transaction>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.Transaction,
    2
  ));
};

/** @param {!Array.<!proto.forge_abi.Transaction>} value */
proto.forge_abi.UnconfirmedTxs.prototype.setTxsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.forge_abi.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.Transaction}
 */
proto.forge_abi.UnconfirmedTxs.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.forge_abi.Transaction,
    opt_index
  );
};

proto.forge_abi.UnconfirmedTxs.prototype.clearTxsList = function() {
  this.setTxsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.NetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.NetInfo.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.NetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.NetInfo.displayName = 'proto.forge_abi.NetInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.NetInfo.repeatedFields_ = [2, 4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.NetInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.NetInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.NetInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.NetInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        listening: jspb.Message.getFieldWithDefault(msg, 1, false),
        listenersList: jspb.Message.getRepeatedField(msg, 2),
        nPeers: jspb.Message.getFieldWithDefault(msg, 3, 0),
        peersList: jspb.Message.toObjectList(
          msg.getPeersList(),
          proto.forge_abi.PeerInfo.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.NetInfo}
 */
proto.forge_abi.NetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.NetInfo();
  return proto.forge_abi.NetInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.NetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.NetInfo}
 */
proto.forge_abi.NetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setListening(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.addListeners(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setNPeers(value);
        break;
      case 4:
        var value = new proto.forge_abi.PeerInfo();
        reader.readMessage(value, proto.forge_abi.PeerInfo.deserializeBinaryFromReader);
        msg.addPeers(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.NetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.NetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.NetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.NetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListening();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getListenersList();
  if (f.length > 0) {
    writer.writeRepeatedString(2, f);
  }
  f = message.getNPeers();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(4, f, proto.forge_abi.PeerInfo.serializeBinaryToWriter);
  }
};

/**
 * optional bool listening = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.forge_abi.NetInfo.prototype.getListening = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};

/** @param {boolean} value */
proto.forge_abi.NetInfo.prototype.setListening = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated string listeners = 2;
 * @return {!Array.<string>}
 */
proto.forge_abi.NetInfo.prototype.getListenersList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};

/** @param {!Array.<string>} value */
proto.forge_abi.NetInfo.prototype.setListenersList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.forge_abi.NetInfo.prototype.addListeners = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

proto.forge_abi.NetInfo.prototype.clearListenersList = function() {
  this.setListenersList([]);
};

/**
 * optional uint32 n_peers = 3;
 * @return {number}
 */
proto.forge_abi.NetInfo.prototype.getNPeers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.forge_abi.NetInfo.prototype.setNPeers = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * repeated PeerInfo peers = 4;
 * @return {!Array.<!proto.forge_abi.PeerInfo>}
 */
proto.forge_abi.NetInfo.prototype.getPeersList = function() {
  return /** @type{!Array.<!proto.forge_abi.PeerInfo>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.PeerInfo,
    4
  ));
};

/** @param {!Array.<!proto.forge_abi.PeerInfo>} value */
proto.forge_abi.NetInfo.prototype.setPeersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!proto.forge_abi.PeerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.PeerInfo}
 */
proto.forge_abi.NetInfo.prototype.addPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    4,
    opt_value,
    proto.forge_abi.PeerInfo,
    opt_index
  );
};

proto.forge_abi.NetInfo.prototype.clearPeersList = function() {
  this.setPeersList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.PeerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.PeerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.PeerInfo.displayName = 'proto.forge_abi.PeerInfo';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.PeerInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.PeerInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.PeerInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.PeerInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        nodeInfo: (f = msg.getNodeInfo()) && proto.forge_abi.NodeInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.PeerInfo}
 */
proto.forge_abi.PeerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.PeerInfo();
  return proto.forge_abi.PeerInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.PeerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.PeerInfo}
 */
proto.forge_abi.PeerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.forge_abi.NodeInfo();
        reader.readMessage(value, proto.forge_abi.NodeInfo.deserializeBinaryFromReader);
        msg.setNodeInfo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.PeerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.PeerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.PeerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.PeerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeInfo();
  if (f != null) {
    writer.writeMessage(1, f, proto.forge_abi.NodeInfo.serializeBinaryToWriter);
  }
};

/**
 * optional NodeInfo node_info = 1;
 * @return {?proto.forge_abi.NodeInfo}
 */
proto.forge_abi.PeerInfo.prototype.getNodeInfo = function() {
  return /** @type{?proto.forge_abi.NodeInfo} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.NodeInfo,
    1
  ));
};

/** @param {?proto.forge_abi.NodeInfo|undefined} value */
proto.forge_abi.PeerInfo.prototype.setNodeInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.forge_abi.PeerInfo.prototype.clearNodeInfo = function() {
  this.setNodeInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.PeerInfo.prototype.hasNodeInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.NodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.NodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.NodeInfo.displayName = 'proto.forge_abi.NodeInfo';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.NodeInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.NodeInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.NodeInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.NodeInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        network: jspb.Message.getFieldWithDefault(msg, 2, ''),
        version: jspb.Message.getFieldWithDefault(msg, 3, ''),
        moniker: jspb.Message.getFieldWithDefault(msg, 4, ''),
        ip: jspb.Message.getFieldWithDefault(msg, 5, ''),
        geoInfo: (f = msg.getGeoInfo()) && proto.forge_abi.GeoInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.NodeInfo}
 */
proto.forge_abi.NodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.NodeInfo();
  return proto.forge_abi.NodeInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.NodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.NodeInfo}
 */
proto.forge_abi.NodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setNetwork(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setVersion(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setMoniker(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setIp(value);
        break;
      case 6:
        var value = new proto.forge_abi.GeoInfo();
        reader.readMessage(value, proto.forge_abi.GeoInfo.deserializeBinaryFromReader);
        msg.setGeoInfo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.NodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.NodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.NodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.NodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getGeoInfo();
  if (f != null) {
    writer.writeMessage(6, f, proto.forge_abi.GeoInfo.serializeBinaryToWriter);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.NodeInfo.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string network = 2;
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.NodeInfo.prototype.setNetwork = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional string version = 3;
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.forge_abi.NodeInfo.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional string moniker = 4;
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/** @param {string} value */
proto.forge_abi.NodeInfo.prototype.setMoniker = function(value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional string ip = 5;
 * @return {string}
 */
proto.forge_abi.NodeInfo.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/** @param {string} value */
proto.forge_abi.NodeInfo.prototype.setIp = function(value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * optional GeoInfo geo_info = 6;
 * @return {?proto.forge_abi.GeoInfo}
 */
proto.forge_abi.NodeInfo.prototype.getGeoInfo = function() {
  return /** @type{?proto.forge_abi.GeoInfo} */ (jspb.Message.getWrapperField(
    this,
    proto.forge_abi.GeoInfo,
    6
  ));
};

/** @param {?proto.forge_abi.GeoInfo|undefined} value */
proto.forge_abi.NodeInfo.prototype.setGeoInfo = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};

proto.forge_abi.NodeInfo.prototype.clearGeoInfo = function() {
  this.setGeoInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.NodeInfo.prototype.hasGeoInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.GeoInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.GeoInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.GeoInfo.displayName = 'proto.forge_abi.GeoInfo';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.GeoInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.GeoInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.GeoInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.GeoInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        city: jspb.Message.getFieldWithDefault(msg, 1, ''),
        country: jspb.Message.getFieldWithDefault(msg, 2, ''),
        latitude: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
        longitude: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.GeoInfo}
 */
proto.forge_abi.GeoInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.GeoInfo();
  return proto.forge_abi.GeoInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.GeoInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.GeoInfo}
 */
proto.forge_abi.GeoInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setCity(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setCountry(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setLatitude(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setLongitude(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.GeoInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.GeoInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.GeoInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.GeoInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(3, f);
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(4, f);
  }
};

/**
 * optional string city = 1;
 * @return {string}
 */
proto.forge_abi.GeoInfo.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.GeoInfo.prototype.setCity = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string country = 2;
 * @return {string}
 */
proto.forge_abi.GeoInfo.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.GeoInfo.prototype.setCountry = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional float latitude = 3;
 * @return {number}
 */
proto.forge_abi.GeoInfo.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};

/** @param {number} value */
proto.forge_abi.GeoInfo.prototype.setLatitude = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional float longitude = 4;
 * @return {number}
 */
proto.forge_abi.GeoInfo.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};

/** @param {number} value */
proto.forge_abi.GeoInfo.prototype.setLongitude = function(value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ValidatorsInfo = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.forge_abi.ValidatorsInfo.repeatedFields_,
    null
  );
};
goog.inherits(proto.forge_abi.ValidatorsInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ValidatorsInfo.displayName = 'proto.forge_abi.ValidatorsInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.ValidatorsInfo.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ValidatorsInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ValidatorsInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ValidatorsInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ValidatorsInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
        validatorsList: jspb.Message.toObjectList(
          msg.getValidatorsList(),
          proto.forge_abi.ValidatorInfo.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ValidatorsInfo}
 */
proto.forge_abi.ValidatorsInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ValidatorsInfo();
  return proto.forge_abi.ValidatorsInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ValidatorsInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ValidatorsInfo}
 */
proto.forge_abi.ValidatorsInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setBlockHeight(value);
        break;
      case 2:
        var value = new proto.forge_abi.ValidatorInfo();
        reader.readMessage(value, proto.forge_abi.ValidatorInfo.deserializeBinaryFromReader);
        msg.addValidators(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ValidatorsInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ValidatorsInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ValidatorsInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ValidatorsInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.forge_abi.ValidatorInfo.serializeBinaryToWriter);
  }
};

/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.forge_abi.ValidatorsInfo.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.forge_abi.ValidatorsInfo.prototype.setBlockHeight = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated ValidatorInfo validators = 2;
 * @return {!Array.<!proto.forge_abi.ValidatorInfo>}
 */
proto.forge_abi.ValidatorsInfo.prototype.getValidatorsList = function() {
  return /** @type{!Array.<!proto.forge_abi.ValidatorInfo>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.ValidatorInfo,
    2
  ));
};

/** @param {!Array.<!proto.forge_abi.ValidatorInfo>} value */
proto.forge_abi.ValidatorsInfo.prototype.setValidatorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.forge_abi.ValidatorInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ValidatorInfo}
 */
proto.forge_abi.ValidatorsInfo.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.forge_abi.ValidatorInfo,
    opt_index
  );
};

proto.forge_abi.ValidatorsInfo.prototype.clearValidatorsList = function() {
  this.setValidatorsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.ValidatorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_abi.ValidatorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.ValidatorInfo.displayName = 'proto.forge_abi.ValidatorInfo';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.ValidatorInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.ValidatorInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.ValidatorInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.ValidatorInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        pubKey: (f = msg.getPubKey()) && vendor_pb.PubKey.toObject(includeInstance, f),
        votingPower: jspb.Message.getFieldWithDefault(msg, 3, 0),
        proposerPriority: jspb.Message.getFieldWithDefault(msg, 4, ''),
        name: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.ValidatorInfo}
 */
proto.forge_abi.ValidatorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.ValidatorInfo();
  return proto.forge_abi.ValidatorInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.ValidatorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.ValidatorInfo}
 */
proto.forge_abi.ValidatorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 2:
        var value = new vendor_pb.PubKey();
        reader.readMessage(value, vendor_pb.PubKey.deserializeBinaryFromReader);
        msg.setPubKey(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setVotingPower(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setProposerPriority(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.ValidatorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.ValidatorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.ValidatorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.ValidatorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPubKey();
  if (f != null) {
    writer.writeMessage(2, f, vendor_pb.PubKey.serializeBinaryToWriter);
  }
  f = message.getVotingPower();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getProposerPriority();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.forge_abi.ValidatorInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.ValidatorInfo.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional forge_vendor.PubKey pub_key = 2;
 * @return {?proto.forge_vendor.PubKey}
 */
proto.forge_abi.ValidatorInfo.prototype.getPubKey = function() {
  return /** @type{?proto.forge_vendor.PubKey} */ (jspb.Message.getWrapperField(
    this,
    vendor_pb.PubKey,
    2
  ));
};

/** @param {?proto.forge_vendor.PubKey|undefined} value */
proto.forge_abi.ValidatorInfo.prototype.setPubKey = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.forge_abi.ValidatorInfo.prototype.clearPubKey = function() {
  this.setPubKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.ValidatorInfo.prototype.hasPubKey = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional uint32 voting_power = 3;
 * @return {number}
 */
proto.forge_abi.ValidatorInfo.prototype.getVotingPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.forge_abi.ValidatorInfo.prototype.setVotingPower = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional string proposer_priority = 4;
 * @return {string}
 */
proto.forge_abi.ValidatorInfo.prototype.getProposerPriority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/** @param {string} value */
proto.forge_abi.ValidatorInfo.prototype.setProposerPriority = function(value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional string name = 5;
 * @return {string}
 */
proto.forge_abi.ValidatorInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/** @param {string} value */
proto.forge_abi.ValidatorInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_abi.GenesisInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_abi.GenesisInfo.repeatedFields_, null);
};
goog.inherits(proto.forge_abi.GenesisInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_abi.GenesisInfo.displayName = 'proto.forge_abi.GenesisInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_abi.GenesisInfo.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.forge_abi.GenesisInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.forge_abi.GenesisInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.forge_abi.GenesisInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.forge_abi.GenesisInfo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        genesisTime: jspb.Message.getFieldWithDefault(msg, 1, ''),
        chainId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        consensusParams:
          (f = msg.getConsensusParams()) && vendor_pb.ConsensusParams.toObject(includeInstance, f),
        validatorsList: jspb.Message.toObjectList(
          msg.getValidatorsList(),
          proto.forge_abi.ValidatorInfo.toObject,
          includeInstance
        ),
        appHash: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_abi.GenesisInfo}
 */
proto.forge_abi.GenesisInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_abi.GenesisInfo();
  return proto.forge_abi.GenesisInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_abi.GenesisInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_abi.GenesisInfo}
 */
proto.forge_abi.GenesisInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setGenesisTime(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setChainId(value);
        break;
      case 3:
        var value = new vendor_pb.ConsensusParams();
        reader.readMessage(value, vendor_pb.ConsensusParams.deserializeBinaryFromReader);
        msg.setConsensusParams(value);
        break;
      case 4:
        var value = new proto.forge_abi.ValidatorInfo();
        reader.readMessage(value, proto.forge_abi.ValidatorInfo.deserializeBinaryFromReader);
        msg.addValidators(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setAppHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_abi.GenesisInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_abi.GenesisInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_abi.GenesisInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_abi.GenesisInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGenesisTime();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getConsensusParams();
  if (f != null) {
    writer.writeMessage(3, f, vendor_pb.ConsensusParams.serializeBinaryToWriter);
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(4, f, proto.forge_abi.ValidatorInfo.serializeBinaryToWriter);
  }
  f = message.getAppHash();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string genesis_time = 1;
 * @return {string}
 */
proto.forge_abi.GenesisInfo.prototype.getGenesisTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.forge_abi.GenesisInfo.prototype.setGenesisTime = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.forge_abi.GenesisInfo.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.forge_abi.GenesisInfo.prototype.setChainId = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional forge_vendor.ConsensusParams consensus_params = 3;
 * @return {?proto.forge_vendor.ConsensusParams}
 */
proto.forge_abi.GenesisInfo.prototype.getConsensusParams = function() {
  return /** @type{?proto.forge_vendor.ConsensusParams} */ (jspb.Message.getWrapperField(
    this,
    vendor_pb.ConsensusParams,
    3
  ));
};

/** @param {?proto.forge_vendor.ConsensusParams|undefined} value */
proto.forge_abi.GenesisInfo.prototype.setConsensusParams = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.forge_abi.GenesisInfo.prototype.clearConsensusParams = function() {
  this.setConsensusParams(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_abi.GenesisInfo.prototype.hasConsensusParams = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * repeated ValidatorInfo validators = 4;
 * @return {!Array.<!proto.forge_abi.ValidatorInfo>}
 */
proto.forge_abi.GenesisInfo.prototype.getValidatorsList = function() {
  return /** @type{!Array.<!proto.forge_abi.ValidatorInfo>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.forge_abi.ValidatorInfo,
    4
  ));
};

/** @param {!Array.<!proto.forge_abi.ValidatorInfo>} value */
proto.forge_abi.GenesisInfo.prototype.setValidatorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!proto.forge_abi.ValidatorInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_abi.ValidatorInfo}
 */
proto.forge_abi.GenesisInfo.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    4,
    opt_value,
    proto.forge_abi.ValidatorInfo,
    opt_index
  );
};

proto.forge_abi.GenesisInfo.prototype.clearValidatorsList = function() {
  this.setValidatorsList([]);
};

/**
 * optional string app_hash = 5;
 * @return {string}
 */
proto.forge_abi.GenesisInfo.prototype.getAppHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/** @param {string} value */
proto.forge_abi.GenesisInfo.prototype.setAppHash = function(value) {
  jspb.Message.setField(this, 5, value);
};

goog.object.extend(exports, proto.forge_abi);

module.exports = proto.forge_abi;
