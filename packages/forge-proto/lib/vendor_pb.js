/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.forge_vendor.BlockID', null, global);
goog.exportSymbol('proto.forge_vendor.BlockSizeParams', null, global);
goog.exportSymbol('proto.forge_vendor.ConsensusParams', null, global);
goog.exportSymbol('proto.forge_vendor.Evidence', null, global);
goog.exportSymbol('proto.forge_vendor.EvidenceParams', null, global);
goog.exportSymbol('proto.forge_vendor.Header', null, global);
goog.exportSymbol('proto.forge_vendor.KVPair', null, global);
goog.exportSymbol('proto.forge_vendor.LastCommitInfo', null, global);
goog.exportSymbol('proto.forge_vendor.PartSetHeader', null, global);
goog.exportSymbol('proto.forge_vendor.Proof', null, global);
goog.exportSymbol('proto.forge_vendor.ProofOp', null, global);
goog.exportSymbol('proto.forge_vendor.PubKey', null, global);
goog.exportSymbol('proto.forge_vendor.Request', null, global);
goog.exportSymbol('proto.forge_vendor.RequestBeginBlock', null, global);
goog.exportSymbol('proto.forge_vendor.RequestBroadcastTx', null, global);
goog.exportSymbol('proto.forge_vendor.RequestCheckTx', null, global);
goog.exportSymbol('proto.forge_vendor.RequestCommit', null, global);
goog.exportSymbol('proto.forge_vendor.RequestDeliverTx', null, global);
goog.exportSymbol('proto.forge_vendor.RequestEcho', null, global);
goog.exportSymbol('proto.forge_vendor.RequestEndBlock', null, global);
goog.exportSymbol('proto.forge_vendor.RequestFlush', null, global);
goog.exportSymbol('proto.forge_vendor.RequestInfo', null, global);
goog.exportSymbol('proto.forge_vendor.RequestInitChain', null, global);
goog.exportSymbol('proto.forge_vendor.RequestPing', null, global);
goog.exportSymbol('proto.forge_vendor.RequestQuery', null, global);
goog.exportSymbol('proto.forge_vendor.RequestSetOption', null, global);
goog.exportSymbol('proto.forge_vendor.Response', null, global);
goog.exportSymbol('proto.forge_vendor.ResponseBeginBlock', null, global);
goog.exportSymbol('proto.forge_vendor.ResponseBroadcastTx', null, global);
goog.exportSymbol('proto.forge_vendor.ResponseCheckTx', null, global);
goog.exportSymbol('proto.forge_vendor.ResponseCommit', null, global);
goog.exportSymbol('proto.forge_vendor.ResponseDeliverTx', null, global);
goog.exportSymbol('proto.forge_vendor.ResponseEcho', null, global);
goog.exportSymbol('proto.forge_vendor.ResponseEndBlock', null, global);
goog.exportSymbol('proto.forge_vendor.ResponseException', null, global);
goog.exportSymbol('proto.forge_vendor.ResponseFlush', null, global);
goog.exportSymbol('proto.forge_vendor.ResponseInfo', null, global);
goog.exportSymbol('proto.forge_vendor.ResponseInitChain', null, global);
goog.exportSymbol('proto.forge_vendor.ResponsePing', null, global);
goog.exportSymbol('proto.forge_vendor.ResponseQuery', null, global);
goog.exportSymbol('proto.forge_vendor.ResponseSetOption', null, global);
goog.exportSymbol('proto.forge_vendor.Validator', null, global);
goog.exportSymbol('proto.forge_vendor.ValidatorParams', null, global);
goog.exportSymbol('proto.forge_vendor.ValidatorUpdate', null, global);
goog.exportSymbol('proto.forge_vendor.Version', null, global);
goog.exportSymbol('proto.forge_vendor.VoteInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.KVPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.KVPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.KVPair.displayName = 'proto.forge_vendor.KVPair';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.KVPair.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.KVPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.KVPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.KVPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey(),
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.KVPair}
 */
proto.forge_vendor.KVPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.KVPair;
  return proto.forge_vendor.KVPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.KVPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.KVPair}
 */
proto.forge_vendor.KVPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.KVPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.KVPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.KVPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.KVPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.KVPair.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.forge_vendor.KVPair.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.KVPair.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.KVPair.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.KVPair.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.forge_vendor.KVPair.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.KVPair.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.KVPair.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ProofOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.ProofOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ProofOp.displayName = 'proto.forge_vendor.ProofOp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ProofOp.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ProofOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ProofOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ProofOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    key: msg.getKey(),
    data: msg.getData()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ProofOp}
 */
proto.forge_vendor.ProofOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ProofOp;
  return proto.forge_vendor.ProofOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ProofOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ProofOp}
 */
proto.forge_vendor.ProofOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ProofOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ProofOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ProofOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ProofOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.forge_vendor.ProofOp.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.forge_vendor.ProofOp.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.ProofOp.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.forge_vendor.ProofOp.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.ProofOp.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.ProofOp.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.ProofOp.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.forge_vendor.ProofOp.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.ProofOp.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.ProofOp.prototype.setData = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.Proof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_vendor.Proof.repeatedFields_, null);
};
goog.inherits(proto.forge_vendor.Proof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.Proof.displayName = 'proto.forge_vendor.Proof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_vendor.Proof.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.Proof.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.Proof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.Proof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.Proof.toObject = function(includeInstance, msg) {
  var f, obj = {
    opsList: jspb.Message.toObjectList(msg.getOpsList(),
    proto.forge_vendor.ProofOp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.Proof}
 */
proto.forge_vendor.Proof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.Proof;
  return proto.forge_vendor.Proof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.Proof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.Proof}
 */
proto.forge_vendor.Proof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.forge_vendor.ProofOp;
      reader.readMessage(value,proto.forge_vendor.ProofOp.deserializeBinaryFromReader);
      msg.addOps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.Proof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.Proof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.Proof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.Proof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.forge_vendor.ProofOp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProofOp ops = 1;
 * @return {!Array.<!proto.forge_vendor.ProofOp>}
 */
proto.forge_vendor.Proof.prototype.getOpsList = function() {
  return /** @type{!Array.<!proto.forge_vendor.ProofOp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.forge_vendor.ProofOp, 1));
};


/** @param {!Array.<!proto.forge_vendor.ProofOp>} value */
proto.forge_vendor.Proof.prototype.setOpsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.forge_vendor.ProofOp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_vendor.ProofOp}
 */
proto.forge_vendor.Proof.prototype.addOps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.forge_vendor.ProofOp, opt_index);
};


proto.forge_vendor.Proof.prototype.clearOpsList = function() {
  this.setOpsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.BlockSizeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.BlockSizeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.BlockSizeParams.displayName = 'proto.forge_vendor.BlockSizeParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.BlockSizeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.BlockSizeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.BlockSizeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.BlockSizeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxBytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxGas: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.BlockSizeParams}
 */
proto.forge_vendor.BlockSizeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.BlockSizeParams;
  return proto.forge_vendor.BlockSizeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.BlockSizeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.BlockSizeParams}
 */
proto.forge_vendor.BlockSizeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxBytes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxGas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.BlockSizeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.BlockSizeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.BlockSizeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.BlockSizeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxBytes();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMaxGas();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 max_bytes = 1;
 * @return {number}
 */
proto.forge_vendor.BlockSizeParams.prototype.getMaxBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.forge_vendor.BlockSizeParams.prototype.setMaxBytes = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 max_gas = 2;
 * @return {number}
 */
proto.forge_vendor.BlockSizeParams.prototype.getMaxGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.forge_vendor.BlockSizeParams.prototype.setMaxGas = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.EvidenceParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.EvidenceParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.EvidenceParams.displayName = 'proto.forge_vendor.EvidenceParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.EvidenceParams.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.EvidenceParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.EvidenceParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.EvidenceParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxAge: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.EvidenceParams}
 */
proto.forge_vendor.EvidenceParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.EvidenceParams;
  return proto.forge_vendor.EvidenceParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.EvidenceParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.EvidenceParams}
 */
proto.forge_vendor.EvidenceParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxAge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.EvidenceParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.EvidenceParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.EvidenceParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.EvidenceParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxAge();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 max_age = 1;
 * @return {number}
 */
proto.forge_vendor.EvidenceParams.prototype.getMaxAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.forge_vendor.EvidenceParams.prototype.setMaxAge = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ValidatorParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_vendor.ValidatorParams.repeatedFields_, null);
};
goog.inherits(proto.forge_vendor.ValidatorParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ValidatorParams.displayName = 'proto.forge_vendor.ValidatorParams';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_vendor.ValidatorParams.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ValidatorParams.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ValidatorParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ValidatorParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ValidatorParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubKeyTypesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ValidatorParams}
 */
proto.forge_vendor.ValidatorParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ValidatorParams;
  return proto.forge_vendor.ValidatorParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ValidatorParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ValidatorParams}
 */
proto.forge_vendor.ValidatorParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPubKeyTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ValidatorParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ValidatorParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ValidatorParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ValidatorParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubKeyTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string pub_key_types = 1;
 * @return {!Array.<string>}
 */
proto.forge_vendor.ValidatorParams.prototype.getPubKeyTypesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.forge_vendor.ValidatorParams.prototype.setPubKeyTypesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.forge_vendor.ValidatorParams.prototype.addPubKeyTypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.forge_vendor.ValidatorParams.prototype.clearPubKeyTypesList = function() {
  this.setPubKeyTypesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ConsensusParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.ConsensusParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ConsensusParams.displayName = 'proto.forge_vendor.ConsensusParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ConsensusParams.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ConsensusParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ConsensusParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ConsensusParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockSize: (f = msg.getBlockSize()) && proto.forge_vendor.BlockSizeParams.toObject(includeInstance, f),
    evidence: (f = msg.getEvidence()) && proto.forge_vendor.EvidenceParams.toObject(includeInstance, f),
    validator: (f = msg.getValidator()) && proto.forge_vendor.ValidatorParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ConsensusParams}
 */
proto.forge_vendor.ConsensusParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ConsensusParams;
  return proto.forge_vendor.ConsensusParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ConsensusParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ConsensusParams}
 */
proto.forge_vendor.ConsensusParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.forge_vendor.BlockSizeParams;
      reader.readMessage(value,proto.forge_vendor.BlockSizeParams.deserializeBinaryFromReader);
      msg.setBlockSize(value);
      break;
    case 2:
      var value = new proto.forge_vendor.EvidenceParams;
      reader.readMessage(value,proto.forge_vendor.EvidenceParams.deserializeBinaryFromReader);
      msg.setEvidence(value);
      break;
    case 3:
      var value = new proto.forge_vendor.ValidatorParams;
      reader.readMessage(value,proto.forge_vendor.ValidatorParams.deserializeBinaryFromReader);
      msg.setValidator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ConsensusParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ConsensusParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ConsensusParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ConsensusParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockSize();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.forge_vendor.BlockSizeParams.serializeBinaryToWriter
    );
  }
  f = message.getEvidence();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.forge_vendor.EvidenceParams.serializeBinaryToWriter
    );
  }
  f = message.getValidator();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.forge_vendor.ValidatorParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlockSizeParams block_size = 1;
 * @return {?proto.forge_vendor.BlockSizeParams}
 */
proto.forge_vendor.ConsensusParams.prototype.getBlockSize = function() {
  return /** @type{?proto.forge_vendor.BlockSizeParams} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.BlockSizeParams, 1));
};


/** @param {?proto.forge_vendor.BlockSizeParams|undefined} value */
proto.forge_vendor.ConsensusParams.prototype.setBlockSize = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.forge_vendor.ConsensusParams.prototype.clearBlockSize = function() {
  this.setBlockSize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.ConsensusParams.prototype.hasBlockSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EvidenceParams evidence = 2;
 * @return {?proto.forge_vendor.EvidenceParams}
 */
proto.forge_vendor.ConsensusParams.prototype.getEvidence = function() {
  return /** @type{?proto.forge_vendor.EvidenceParams} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.EvidenceParams, 2));
};


/** @param {?proto.forge_vendor.EvidenceParams|undefined} value */
proto.forge_vendor.ConsensusParams.prototype.setEvidence = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.forge_vendor.ConsensusParams.prototype.clearEvidence = function() {
  this.setEvidence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.ConsensusParams.prototype.hasEvidence = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ValidatorParams validator = 3;
 * @return {?proto.forge_vendor.ValidatorParams}
 */
proto.forge_vendor.ConsensusParams.prototype.getValidator = function() {
  return /** @type{?proto.forge_vendor.ValidatorParams} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ValidatorParams, 3));
};


/** @param {?proto.forge_vendor.ValidatorParams|undefined} value */
proto.forge_vendor.ConsensusParams.prototype.setValidator = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.forge_vendor.ConsensusParams.prototype.clearValidator = function() {
  this.setValidator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.ConsensusParams.prototype.hasValidator = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.LastCommitInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_vendor.LastCommitInfo.repeatedFields_, null);
};
goog.inherits(proto.forge_vendor.LastCommitInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.LastCommitInfo.displayName = 'proto.forge_vendor.LastCommitInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_vendor.LastCommitInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.LastCommitInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.LastCommitInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.LastCommitInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.LastCommitInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getFieldWithDefault(msg, 1, 0),
    votesList: jspb.Message.toObjectList(msg.getVotesList(),
    proto.forge_vendor.VoteInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.LastCommitInfo}
 */
proto.forge_vendor.LastCommitInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.LastCommitInfo;
  return proto.forge_vendor.LastCommitInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.LastCommitInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.LastCommitInfo}
 */
proto.forge_vendor.LastCommitInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 2:
      var value = new proto.forge_vendor.VoteInfo;
      reader.readMessage(value,proto.forge_vendor.VoteInfo.deserializeBinaryFromReader);
      msg.addVotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.LastCommitInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.LastCommitInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.LastCommitInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.LastCommitInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.forge_vendor.VoteInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 round = 1;
 * @return {number}
 */
proto.forge_vendor.LastCommitInfo.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.forge_vendor.LastCommitInfo.prototype.setRound = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated VoteInfo votes = 2;
 * @return {!Array.<!proto.forge_vendor.VoteInfo>}
 */
proto.forge_vendor.LastCommitInfo.prototype.getVotesList = function() {
  return /** @type{!Array.<!proto.forge_vendor.VoteInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.forge_vendor.VoteInfo, 2));
};


/** @param {!Array.<!proto.forge_vendor.VoteInfo>} value */
proto.forge_vendor.LastCommitInfo.prototype.setVotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.forge_vendor.VoteInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_vendor.VoteInfo}
 */
proto.forge_vendor.LastCommitInfo.prototype.addVotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.forge_vendor.VoteInfo, opt_index);
};


proto.forge_vendor.LastCommitInfo.prototype.clearVotesList = function() {
  this.setVotesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.Version = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.Version, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.Version.displayName = 'proto.forge_vendor.Version';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.Version.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.Version.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.Version} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.Version.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: jspb.Message.getFieldWithDefault(msg, 1, 0),
    app: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.Version}
 */
proto.forge_vendor.Version.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.Version;
  return proto.forge_vendor.Version.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.Version}
 */
proto.forge_vendor.Version.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlock(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setApp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.Version.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.Version.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.Version} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.Version.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getApp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 Block = 1;
 * @return {number}
 */
proto.forge_vendor.Version.prototype.getBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.forge_vendor.Version.prototype.setBlock = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 App = 2;
 * @return {number}
 */
proto.forge_vendor.Version.prototype.getApp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.forge_vendor.Version.prototype.setApp = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.PartSetHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.PartSetHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.PartSetHeader.displayName = 'proto.forge_vendor.PartSetHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.PartSetHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.PartSetHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.PartSetHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.PartSetHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hash: msg.getHash()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.PartSetHeader}
 */
proto.forge_vendor.PartSetHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.PartSetHeader;
  return proto.forge_vendor.PartSetHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.PartSetHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.PartSetHeader}
 */
proto.forge_vendor.PartSetHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.PartSetHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.PartSetHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.PartSetHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.PartSetHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional int32 total = 1;
 * @return {number}
 */
proto.forge_vendor.PartSetHeader.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.forge_vendor.PartSetHeader.prototype.setTotal = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.PartSetHeader.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.forge_vendor.PartSetHeader.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.PartSetHeader.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.PartSetHeader.prototype.setHash = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.BlockID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.BlockID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.BlockID.displayName = 'proto.forge_vendor.BlockID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.BlockID.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.BlockID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.BlockID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.BlockID.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash(),
    partsHeader: (f = msg.getPartsHeader()) && proto.forge_vendor.PartSetHeader.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.BlockID}
 */
proto.forge_vendor.BlockID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.BlockID;
  return proto.forge_vendor.BlockID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.BlockID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.BlockID}
 */
proto.forge_vendor.BlockID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = new proto.forge_vendor.PartSetHeader;
      reader.readMessage(value,proto.forge_vendor.PartSetHeader.deserializeBinaryFromReader);
      msg.setPartsHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.BlockID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.BlockID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.BlockID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.BlockID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPartsHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.forge_vendor.PartSetHeader.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.BlockID.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.forge_vendor.BlockID.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.BlockID.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.BlockID.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional PartSetHeader parts_header = 2;
 * @return {?proto.forge_vendor.PartSetHeader}
 */
proto.forge_vendor.BlockID.prototype.getPartsHeader = function() {
  return /** @type{?proto.forge_vendor.PartSetHeader} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.PartSetHeader, 2));
};


/** @param {?proto.forge_vendor.PartSetHeader|undefined} value */
proto.forge_vendor.BlockID.prototype.setPartsHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.forge_vendor.BlockID.prototype.clearPartsHeader = function() {
  this.setPartsHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.BlockID.prototype.hasPartsHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.Validator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.Validator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.Validator.displayName = 'proto.forge_vendor.Validator';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.Validator.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.Validator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.Validator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.Validator.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress(),
    power: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.Validator}
 */
proto.forge_vendor.Validator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.Validator;
  return proto.forge_vendor.Validator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.Validator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.Validator}
 */
proto.forge_vendor.Validator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.Validator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.Validator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.Validator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.Validator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.Validator.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.forge_vendor.Validator.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.Validator.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.Validator.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 power = 3;
 * @return {number}
 */
proto.forge_vendor.Validator.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.forge_vendor.Validator.prototype.setPower = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.PubKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.PubKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.PubKey.displayName = 'proto.forge_vendor.PubKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.PubKey.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.PubKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.PubKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.PubKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: msg.getData()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.PubKey}
 */
proto.forge_vendor.PubKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.PubKey;
  return proto.forge_vendor.PubKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.PubKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.PubKey}
 */
proto.forge_vendor.PubKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.PubKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.PubKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.PubKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.PubKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.forge_vendor.PubKey.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.forge_vendor.PubKey.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.PubKey.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.forge_vendor.PubKey.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.PubKey.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.PubKey.prototype.setData = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ValidatorUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.ValidatorUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ValidatorUpdate.displayName = 'proto.forge_vendor.ValidatorUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ValidatorUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ValidatorUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ValidatorUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ValidatorUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubKey: (f = msg.getPubKey()) && proto.forge_vendor.PubKey.toObject(includeInstance, f),
    power: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ValidatorUpdate}
 */
proto.forge_vendor.ValidatorUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ValidatorUpdate;
  return proto.forge_vendor.ValidatorUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ValidatorUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ValidatorUpdate}
 */
proto.forge_vendor.ValidatorUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.forge_vendor.PubKey;
      reader.readMessage(value,proto.forge_vendor.PubKey.deserializeBinaryFromReader);
      msg.setPubKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ValidatorUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ValidatorUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ValidatorUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ValidatorUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.forge_vendor.PubKey.serializeBinaryToWriter
    );
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional PubKey pub_key = 1;
 * @return {?proto.forge_vendor.PubKey}
 */
proto.forge_vendor.ValidatorUpdate.prototype.getPubKey = function() {
  return /** @type{?proto.forge_vendor.PubKey} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.PubKey, 1));
};


/** @param {?proto.forge_vendor.PubKey|undefined} value */
proto.forge_vendor.ValidatorUpdate.prototype.setPubKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.forge_vendor.ValidatorUpdate.prototype.clearPubKey = function() {
  this.setPubKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.ValidatorUpdate.prototype.hasPubKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 power = 2;
 * @return {number}
 */
proto.forge_vendor.ValidatorUpdate.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.forge_vendor.ValidatorUpdate.prototype.setPower = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.VoteInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.VoteInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.VoteInfo.displayName = 'proto.forge_vendor.VoteInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.VoteInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.VoteInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.VoteInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.VoteInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: (f = msg.getValidator()) && proto.forge_vendor.Validator.toObject(includeInstance, f),
    signedLastBlock: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.VoteInfo}
 */
proto.forge_vendor.VoteInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.VoteInfo;
  return proto.forge_vendor.VoteInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.VoteInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.VoteInfo}
 */
proto.forge_vendor.VoteInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.forge_vendor.Validator;
      reader.readMessage(value,proto.forge_vendor.Validator.deserializeBinaryFromReader);
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSignedLastBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.VoteInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.VoteInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.VoteInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.VoteInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.forge_vendor.Validator.serializeBinaryToWriter
    );
  }
  f = message.getSignedLastBlock();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional Validator validator = 1;
 * @return {?proto.forge_vendor.Validator}
 */
proto.forge_vendor.VoteInfo.prototype.getValidator = function() {
  return /** @type{?proto.forge_vendor.Validator} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.Validator, 1));
};


/** @param {?proto.forge_vendor.Validator|undefined} value */
proto.forge_vendor.VoteInfo.prototype.setValidator = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.forge_vendor.VoteInfo.prototype.clearValidator = function() {
  this.setValidator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.VoteInfo.prototype.hasValidator = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool signed_last_block = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.forge_vendor.VoteInfo.prototype.getSignedLastBlock = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.forge_vendor.VoteInfo.prototype.setSignedLastBlock = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.Evidence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.Evidence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.Evidence.displayName = 'proto.forge_vendor.Evidence';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.Evidence.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.Evidence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.Evidence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.Evidence.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    validator: (f = msg.getValidator()) && proto.forge_vendor.Validator.toObject(includeInstance, f),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    totalVotingPower: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.Evidence}
 */
proto.forge_vendor.Evidence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.Evidence;
  return proto.forge_vendor.Evidence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.Evidence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.Evidence}
 */
proto.forge_vendor.Evidence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.forge_vendor.Validator;
      reader.readMessage(value,proto.forge_vendor.Validator.deserializeBinaryFromReader);
      msg.setValidator(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalVotingPower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.Evidence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.Evidence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.Evidence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.Evidence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValidator();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.forge_vendor.Validator.serializeBinaryToWriter
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTotalVotingPower();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.forge_vendor.Evidence.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.forge_vendor.Evidence.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Validator validator = 2;
 * @return {?proto.forge_vendor.Validator}
 */
proto.forge_vendor.Evidence.prototype.getValidator = function() {
  return /** @type{?proto.forge_vendor.Validator} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.Validator, 2));
};


/** @param {?proto.forge_vendor.Validator|undefined} value */
proto.forge_vendor.Evidence.prototype.setValidator = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.forge_vendor.Evidence.prototype.clearValidator = function() {
  this.setValidator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Evidence.prototype.hasValidator = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 height = 3;
 * @return {number}
 */
proto.forge_vendor.Evidence.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.forge_vendor.Evidence.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_vendor.Evidence.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.forge_vendor.Evidence.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.forge_vendor.Evidence.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Evidence.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 total_voting_power = 5;
 * @return {number}
 */
proto.forge_vendor.Evidence.prototype.getTotalVotingPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.forge_vendor.Evidence.prototype.setTotalVotingPower = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.Header.displayName = 'proto.forge_vendor.Header';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = msg.getVersion()) && proto.forge_vendor.Version.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    numTxs: jspb.Message.getFieldWithDefault(msg, 5, 0),
    totalTxs: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lastBlockId: (f = msg.getLastBlockId()) && proto.forge_vendor.BlockID.toObject(includeInstance, f),
    lastCommitHash: msg.getLastCommitHash(),
    dataHash: msg.getDataHash(),
    validatorsHash: msg.getValidatorsHash(),
    nextValidatorsHash: msg.getNextValidatorsHash(),
    consensusHash: msg.getConsensusHash(),
    appHash: msg.getAppHash(),
    lastResultsHash: msg.getLastResultsHash(),
    evidenceHash: msg.getEvidenceHash(),
    proposerAddress: msg.getProposerAddress()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.Header}
 */
proto.forge_vendor.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.Header;
  return proto.forge_vendor.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.Header}
 */
proto.forge_vendor.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.forge_vendor.Version;
      reader.readMessage(value,proto.forge_vendor.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumTxs(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalTxs(value);
      break;
    case 7:
      var value = new proto.forge_vendor.BlockID;
      reader.readMessage(value,proto.forge_vendor.BlockID.deserializeBinaryFromReader);
      msg.setLastBlockId(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastCommitHash(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDataHash(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorsHash(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNextValidatorsHash(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConsensusHash(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppHash(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastResultsHash(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvidenceHash(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProposerAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.forge_vendor.Version.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getNumTxs();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTotalTxs();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLastBlockId();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.forge_vendor.BlockID.serializeBinaryToWriter
    );
  }
  f = message.getLastCommitHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getDataHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getNextValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getConsensusHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getAppHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getLastResultsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getEvidenceHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = message.getProposerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
};


/**
 * optional Version version = 1;
 * @return {?proto.forge_vendor.Version}
 */
proto.forge_vendor.Header.prototype.getVersion = function() {
  return /** @type{?proto.forge_vendor.Version} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.Version, 1));
};


/** @param {?proto.forge_vendor.Version|undefined} value */
proto.forge_vendor.Header.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.forge_vendor.Header.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Header.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.forge_vendor.Header.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.forge_vendor.Header.prototype.setChainId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 height = 3;
 * @return {number}
 */
proto.forge_vendor.Header.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.forge_vendor.Header.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_vendor.Header.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.forge_vendor.Header.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.forge_vendor.Header.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Header.prototype.hasTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 num_txs = 5;
 * @return {number}
 */
proto.forge_vendor.Header.prototype.getNumTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.forge_vendor.Header.prototype.setNumTxs = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 total_txs = 6;
 * @return {number}
 */
proto.forge_vendor.Header.prototype.getTotalTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.forge_vendor.Header.prototype.setTotalTxs = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional BlockID last_block_id = 7;
 * @return {?proto.forge_vendor.BlockID}
 */
proto.forge_vendor.Header.prototype.getLastBlockId = function() {
  return /** @type{?proto.forge_vendor.BlockID} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.BlockID, 7));
};


/** @param {?proto.forge_vendor.BlockID|undefined} value */
proto.forge_vendor.Header.prototype.setLastBlockId = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.forge_vendor.Header.prototype.clearLastBlockId = function() {
  this.setLastBlockId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Header.prototype.hasLastBlockId = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes last_commit_hash = 8;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.Header.prototype.getLastCommitHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes last_commit_hash = 8;
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {string}
 */
proto.forge_vendor.Header.prototype.getLastCommitHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastCommitHash()));
};


/**
 * optional bytes last_commit_hash = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.Header.prototype.getLastCommitHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastCommitHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.Header.prototype.setLastCommitHash = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bytes data_hash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.Header.prototype.getDataHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes data_hash = 9;
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {string}
 */
proto.forge_vendor.Header.prototype.getDataHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDataHash()));
};


/**
 * optional bytes data_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.Header.prototype.getDataHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDataHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.Header.prototype.setDataHash = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bytes validators_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.Header.prototype.getValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes validators_hash = 10;
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {string}
 */
proto.forge_vendor.Header.prototype.getValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorsHash()));
};


/**
 * optional bytes validators_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.Header.prototype.getValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorsHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.Header.prototype.setValidatorsHash = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional bytes next_validators_hash = 11;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.Header.prototype.getNextValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes next_validators_hash = 11;
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {string}
 */
proto.forge_vendor.Header.prototype.getNextValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNextValidatorsHash()));
};


/**
 * optional bytes next_validators_hash = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.Header.prototype.getNextValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNextValidatorsHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.Header.prototype.setNextValidatorsHash = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional bytes consensus_hash = 12;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.Header.prototype.getConsensusHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes consensus_hash = 12;
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {string}
 */
proto.forge_vendor.Header.prototype.getConsensusHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConsensusHash()));
};


/**
 * optional bytes consensus_hash = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.Header.prototype.getConsensusHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConsensusHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.Header.prototype.setConsensusHash = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional bytes app_hash = 13;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.Header.prototype.getAppHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes app_hash = 13;
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {string}
 */
proto.forge_vendor.Header.prototype.getAppHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppHash()));
};


/**
 * optional bytes app_hash = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.Header.prototype.getAppHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.Header.prototype.setAppHash = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional bytes last_results_hash = 14;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.Header.prototype.getLastResultsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes last_results_hash = 14;
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {string}
 */
proto.forge_vendor.Header.prototype.getLastResultsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastResultsHash()));
};


/**
 * optional bytes last_results_hash = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.Header.prototype.getLastResultsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastResultsHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.Header.prototype.setLastResultsHash = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional bytes evidence_hash = 15;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.Header.prototype.getEvidenceHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes evidence_hash = 15;
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {string}
 */
proto.forge_vendor.Header.prototype.getEvidenceHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvidenceHash()));
};


/**
 * optional bytes evidence_hash = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.Header.prototype.getEvidenceHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvidenceHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.Header.prototype.setEvidenceHash = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional bytes proposer_address = 16;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.Header.prototype.getProposerAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes proposer_address = 16;
 * This is a type-conversion wrapper around `getProposerAddress()`
 * @return {string}
 */
proto.forge_vendor.Header.prototype.getProposerAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProposerAddress()));
};


/**
 * optional bytes proposer_address = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposerAddress()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.Header.prototype.getProposerAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProposerAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.Header.prototype.setProposerAddress = function(value) {
  jspb.Message.setField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.RequestEcho = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.RequestEcho, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.RequestEcho.displayName = 'proto.forge_vendor.RequestEcho';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.RequestEcho.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.RequestEcho.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.RequestEcho} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestEcho.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.RequestEcho}
 */
proto.forge_vendor.RequestEcho.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.RequestEcho;
  return proto.forge_vendor.RequestEcho.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.RequestEcho} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.RequestEcho}
 */
proto.forge_vendor.RequestEcho.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestEcho.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.RequestEcho.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.RequestEcho} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestEcho.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.forge_vendor.RequestEcho.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.forge_vendor.RequestEcho.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.RequestFlush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.RequestFlush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.RequestFlush.displayName = 'proto.forge_vendor.RequestFlush';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.RequestFlush.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.RequestFlush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.RequestFlush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestFlush.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.RequestFlush}
 */
proto.forge_vendor.RequestFlush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.RequestFlush;
  return proto.forge_vendor.RequestFlush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.RequestFlush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.RequestFlush}
 */
proto.forge_vendor.RequestFlush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestFlush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.RequestFlush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.RequestFlush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestFlush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.RequestInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.RequestInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.RequestInfo.displayName = 'proto.forge_vendor.RequestInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.RequestInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.RequestInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.RequestInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    p2pVersion: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.RequestInfo}
 */
proto.forge_vendor.RequestInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.RequestInfo;
  return proto.forge_vendor.RequestInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.RequestInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.RequestInfo}
 */
proto.forge_vendor.RequestInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setP2pVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.RequestInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.RequestInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockVersion();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getP2pVersion();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.forge_vendor.RequestInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.forge_vendor.RequestInfo.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 block_version = 2;
 * @return {number}
 */
proto.forge_vendor.RequestInfo.prototype.getBlockVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.forge_vendor.RequestInfo.prototype.setBlockVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 p2p_version = 3;
 * @return {number}
 */
proto.forge_vendor.RequestInfo.prototype.getP2pVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.forge_vendor.RequestInfo.prototype.setP2pVersion = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.RequestSetOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.RequestSetOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.RequestSetOption.displayName = 'proto.forge_vendor.RequestSetOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.RequestSetOption.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.RequestSetOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.RequestSetOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestSetOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.RequestSetOption}
 */
proto.forge_vendor.RequestSetOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.RequestSetOption;
  return proto.forge_vendor.RequestSetOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.RequestSetOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.RequestSetOption}
 */
proto.forge_vendor.RequestSetOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestSetOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.RequestSetOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.RequestSetOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestSetOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.forge_vendor.RequestSetOption.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.forge_vendor.RequestSetOption.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.forge_vendor.RequestSetOption.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.forge_vendor.RequestSetOption.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.RequestInitChain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_vendor.RequestInitChain.repeatedFields_, null);
};
goog.inherits(proto.forge_vendor.RequestInitChain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.RequestInitChain.displayName = 'proto.forge_vendor.RequestInitChain';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_vendor.RequestInitChain.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.RequestInitChain.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.RequestInitChain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.RequestInitChain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestInitChain.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    consensusParams: (f = msg.getConsensusParams()) && proto.forge_vendor.ConsensusParams.toObject(includeInstance, f),
    validatorsList: jspb.Message.toObjectList(msg.getValidatorsList(),
    proto.forge_vendor.ValidatorUpdate.toObject, includeInstance),
    appStateBytes: msg.getAppStateBytes()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.RequestInitChain}
 */
proto.forge_vendor.RequestInitChain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.RequestInitChain;
  return proto.forge_vendor.RequestInitChain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.RequestInitChain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.RequestInitChain}
 */
proto.forge_vendor.RequestInitChain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = new proto.forge_vendor.ConsensusParams;
      reader.readMessage(value,proto.forge_vendor.ConsensusParams.deserializeBinaryFromReader);
      msg.setConsensusParams(value);
      break;
    case 4:
      var value = new proto.forge_vendor.ValidatorUpdate;
      reader.readMessage(value,proto.forge_vendor.ValidatorUpdate.deserializeBinaryFromReader);
      msg.addValidators(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppStateBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestInitChain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.RequestInitChain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.RequestInitChain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestInitChain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConsensusParams();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.forge_vendor.ConsensusParams.serializeBinaryToWriter
    );
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.forge_vendor.ValidatorUpdate.serializeBinaryToWriter
    );
  }
  f = message.getAppStateBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp time = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.forge_vendor.RequestInitChain.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.forge_vendor.RequestInitChain.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.forge_vendor.RequestInitChain.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.RequestInitChain.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.forge_vendor.RequestInitChain.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.forge_vendor.RequestInitChain.prototype.setChainId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional ConsensusParams consensus_params = 3;
 * @return {?proto.forge_vendor.ConsensusParams}
 */
proto.forge_vendor.RequestInitChain.prototype.getConsensusParams = function() {
  return /** @type{?proto.forge_vendor.ConsensusParams} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ConsensusParams, 3));
};


/** @param {?proto.forge_vendor.ConsensusParams|undefined} value */
proto.forge_vendor.RequestInitChain.prototype.setConsensusParams = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.forge_vendor.RequestInitChain.prototype.clearConsensusParams = function() {
  this.setConsensusParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.RequestInitChain.prototype.hasConsensusParams = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated ValidatorUpdate validators = 4;
 * @return {!Array.<!proto.forge_vendor.ValidatorUpdate>}
 */
proto.forge_vendor.RequestInitChain.prototype.getValidatorsList = function() {
  return /** @type{!Array.<!proto.forge_vendor.ValidatorUpdate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.forge_vendor.ValidatorUpdate, 4));
};


/** @param {!Array.<!proto.forge_vendor.ValidatorUpdate>} value */
proto.forge_vendor.RequestInitChain.prototype.setValidatorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.forge_vendor.ValidatorUpdate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_vendor.ValidatorUpdate}
 */
proto.forge_vendor.RequestInitChain.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.forge_vendor.ValidatorUpdate, opt_index);
};


proto.forge_vendor.RequestInitChain.prototype.clearValidatorsList = function() {
  this.setValidatorsList([]);
};


/**
 * optional bytes app_state_bytes = 5;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.RequestInitChain.prototype.getAppStateBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes app_state_bytes = 5;
 * This is a type-conversion wrapper around `getAppStateBytes()`
 * @return {string}
 */
proto.forge_vendor.RequestInitChain.prototype.getAppStateBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppStateBytes()));
};


/**
 * optional bytes app_state_bytes = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppStateBytes()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestInitChain.prototype.getAppStateBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppStateBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.RequestInitChain.prototype.setAppStateBytes = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.RequestQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.RequestQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.RequestQuery.displayName = 'proto.forge_vendor.RequestQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.RequestQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.RequestQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.RequestQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData(),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    prove: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.RequestQuery}
 */
proto.forge_vendor.RequestQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.RequestQuery;
  return proto.forge_vendor.RequestQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.RequestQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.RequestQuery}
 */
proto.forge_vendor.RequestQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setProve(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.RequestQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.RequestQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getProve();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.RequestQuery.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.forge_vendor.RequestQuery.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestQuery.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.RequestQuery.prototype.setData = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.forge_vendor.RequestQuery.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.forge_vendor.RequestQuery.prototype.setPath = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 height = 3;
 * @return {number}
 */
proto.forge_vendor.RequestQuery.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.forge_vendor.RequestQuery.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool prove = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.forge_vendor.RequestQuery.prototype.getProve = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.forge_vendor.RequestQuery.prototype.setProve = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.RequestBeginBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_vendor.RequestBeginBlock.repeatedFields_, null);
};
goog.inherits(proto.forge_vendor.RequestBeginBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.RequestBeginBlock.displayName = 'proto.forge_vendor.RequestBeginBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_vendor.RequestBeginBlock.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.RequestBeginBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.RequestBeginBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.RequestBeginBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestBeginBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash(),
    header: (f = msg.getHeader()) && proto.forge_vendor.Header.toObject(includeInstance, f),
    lastCommitInfo: (f = msg.getLastCommitInfo()) && proto.forge_vendor.LastCommitInfo.toObject(includeInstance, f),
    byzantineValidatorsList: jspb.Message.toObjectList(msg.getByzantineValidatorsList(),
    proto.forge_vendor.Evidence.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.RequestBeginBlock}
 */
proto.forge_vendor.RequestBeginBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.RequestBeginBlock;
  return proto.forge_vendor.RequestBeginBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.RequestBeginBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.RequestBeginBlock}
 */
proto.forge_vendor.RequestBeginBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = new proto.forge_vendor.Header;
      reader.readMessage(value,proto.forge_vendor.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.forge_vendor.LastCommitInfo;
      reader.readMessage(value,proto.forge_vendor.LastCommitInfo.deserializeBinaryFromReader);
      msg.setLastCommitInfo(value);
      break;
    case 4:
      var value = new proto.forge_vendor.Evidence;
      reader.readMessage(value,proto.forge_vendor.Evidence.deserializeBinaryFromReader);
      msg.addByzantineValidators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestBeginBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.RequestBeginBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.RequestBeginBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestBeginBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.forge_vendor.Header.serializeBinaryToWriter
    );
  }
  f = message.getLastCommitInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.forge_vendor.LastCommitInfo.serializeBinaryToWriter
    );
  }
  f = message.getByzantineValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.forge_vendor.Evidence.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.RequestBeginBlock.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.forge_vendor.RequestBeginBlock.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestBeginBlock.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.RequestBeginBlock.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Header header = 2;
 * @return {?proto.forge_vendor.Header}
 */
proto.forge_vendor.RequestBeginBlock.prototype.getHeader = function() {
  return /** @type{?proto.forge_vendor.Header} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.Header, 2));
};


/** @param {?proto.forge_vendor.Header|undefined} value */
proto.forge_vendor.RequestBeginBlock.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.forge_vendor.RequestBeginBlock.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.RequestBeginBlock.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LastCommitInfo last_commit_info = 3;
 * @return {?proto.forge_vendor.LastCommitInfo}
 */
proto.forge_vendor.RequestBeginBlock.prototype.getLastCommitInfo = function() {
  return /** @type{?proto.forge_vendor.LastCommitInfo} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.LastCommitInfo, 3));
};


/** @param {?proto.forge_vendor.LastCommitInfo|undefined} value */
proto.forge_vendor.RequestBeginBlock.prototype.setLastCommitInfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.forge_vendor.RequestBeginBlock.prototype.clearLastCommitInfo = function() {
  this.setLastCommitInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.RequestBeginBlock.prototype.hasLastCommitInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Evidence byzantine_validators = 4;
 * @return {!Array.<!proto.forge_vendor.Evidence>}
 */
proto.forge_vendor.RequestBeginBlock.prototype.getByzantineValidatorsList = function() {
  return /** @type{!Array.<!proto.forge_vendor.Evidence>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.forge_vendor.Evidence, 4));
};


/** @param {!Array.<!proto.forge_vendor.Evidence>} value */
proto.forge_vendor.RequestBeginBlock.prototype.setByzantineValidatorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.forge_vendor.Evidence=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_vendor.Evidence}
 */
proto.forge_vendor.RequestBeginBlock.prototype.addByzantineValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.forge_vendor.Evidence, opt_index);
};


proto.forge_vendor.RequestBeginBlock.prototype.clearByzantineValidatorsList = function() {
  this.setByzantineValidatorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.RequestCheckTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.RequestCheckTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.RequestCheckTx.displayName = 'proto.forge_vendor.RequestCheckTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.RequestCheckTx.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.RequestCheckTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.RequestCheckTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestCheckTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    tx: msg.getTx()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.RequestCheckTx}
 */
proto.forge_vendor.RequestCheckTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.RequestCheckTx;
  return proto.forge_vendor.RequestCheckTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.RequestCheckTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.RequestCheckTx}
 */
proto.forge_vendor.RequestCheckTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestCheckTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.RequestCheckTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.RequestCheckTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestCheckTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes tx = 1;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.RequestCheckTx.prototype.getTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes tx = 1;
 * This is a type-conversion wrapper around `getTx()`
 * @return {string}
 */
proto.forge_vendor.RequestCheckTx.prototype.getTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTx()));
};


/**
 * optional bytes tx = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTx()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestCheckTx.prototype.getTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTx()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.RequestCheckTx.prototype.setTx = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.RequestDeliverTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.RequestDeliverTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.RequestDeliverTx.displayName = 'proto.forge_vendor.RequestDeliverTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.RequestDeliverTx.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.RequestDeliverTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.RequestDeliverTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestDeliverTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    tx: msg.getTx()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.RequestDeliverTx}
 */
proto.forge_vendor.RequestDeliverTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.RequestDeliverTx;
  return proto.forge_vendor.RequestDeliverTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.RequestDeliverTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.RequestDeliverTx}
 */
proto.forge_vendor.RequestDeliverTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestDeliverTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.RequestDeliverTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.RequestDeliverTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestDeliverTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes tx = 1;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.RequestDeliverTx.prototype.getTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes tx = 1;
 * This is a type-conversion wrapper around `getTx()`
 * @return {string}
 */
proto.forge_vendor.RequestDeliverTx.prototype.getTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTx()));
};


/**
 * optional bytes tx = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTx()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestDeliverTx.prototype.getTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTx()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.RequestDeliverTx.prototype.setTx = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.RequestEndBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.RequestEndBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.RequestEndBlock.displayName = 'proto.forge_vendor.RequestEndBlock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.RequestEndBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.RequestEndBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.RequestEndBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestEndBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.RequestEndBlock}
 */
proto.forge_vendor.RequestEndBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.RequestEndBlock;
  return proto.forge_vendor.RequestEndBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.RequestEndBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.RequestEndBlock}
 */
proto.forge_vendor.RequestEndBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestEndBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.RequestEndBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.RequestEndBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestEndBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.forge_vendor.RequestEndBlock.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.forge_vendor.RequestEndBlock.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.RequestCommit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.RequestCommit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.RequestCommit.displayName = 'proto.forge_vendor.RequestCommit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.RequestCommit.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.RequestCommit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.RequestCommit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestCommit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.RequestCommit}
 */
proto.forge_vendor.RequestCommit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.RequestCommit;
  return proto.forge_vendor.RequestCommit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.RequestCommit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.RequestCommit}
 */
proto.forge_vendor.RequestCommit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestCommit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.RequestCommit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.RequestCommit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestCommit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.forge_vendor.Request.oneofGroups_);
};
goog.inherits(proto.forge_vendor.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.Request.displayName = 'proto.forge_vendor.Request';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.forge_vendor.Request.oneofGroups_ = [[2,3,4,5,6,7,8,9,19,11,12]];

/**
 * @enum {number}
 */
proto.forge_vendor.Request.ValueCase = {
  VALUE_NOT_SET: 0,
  ECHO: 2,
  FLUSH: 3,
  INFO: 4,
  SET_OPTION: 5,
  INIT_CHAIN: 6,
  QUERY: 7,
  BEGIN_BLOCK: 8,
  CHECK_TX: 9,
  DELIVER_TX: 19,
  END_BLOCK: 11,
  COMMIT: 12
};

/**
 * @return {proto.forge_vendor.Request.ValueCase}
 */
proto.forge_vendor.Request.prototype.getValueCase = function() {
  return /** @type {proto.forge_vendor.Request.ValueCase} */(jspb.Message.computeOneofCase(this, proto.forge_vendor.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    echo: (f = msg.getEcho()) && proto.forge_vendor.RequestEcho.toObject(includeInstance, f),
    flush: (f = msg.getFlush()) && proto.forge_vendor.RequestFlush.toObject(includeInstance, f),
    info: (f = msg.getInfo()) && proto.forge_vendor.RequestInfo.toObject(includeInstance, f),
    setOption: (f = msg.getSetOption()) && proto.forge_vendor.RequestSetOption.toObject(includeInstance, f),
    initChain: (f = msg.getInitChain()) && proto.forge_vendor.RequestInitChain.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && proto.forge_vendor.RequestQuery.toObject(includeInstance, f),
    beginBlock: (f = msg.getBeginBlock()) && proto.forge_vendor.RequestBeginBlock.toObject(includeInstance, f),
    checkTx: (f = msg.getCheckTx()) && proto.forge_vendor.RequestCheckTx.toObject(includeInstance, f),
    deliverTx: (f = msg.getDeliverTx()) && proto.forge_vendor.RequestDeliverTx.toObject(includeInstance, f),
    endBlock: (f = msg.getEndBlock()) && proto.forge_vendor.RequestEndBlock.toObject(includeInstance, f),
    commit: (f = msg.getCommit()) && proto.forge_vendor.RequestCommit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.Request}
 */
proto.forge_vendor.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.Request;
  return proto.forge_vendor.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.Request}
 */
proto.forge_vendor.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.forge_vendor.RequestEcho;
      reader.readMessage(value,proto.forge_vendor.RequestEcho.deserializeBinaryFromReader);
      msg.setEcho(value);
      break;
    case 3:
      var value = new proto.forge_vendor.RequestFlush;
      reader.readMessage(value,proto.forge_vendor.RequestFlush.deserializeBinaryFromReader);
      msg.setFlush(value);
      break;
    case 4:
      var value = new proto.forge_vendor.RequestInfo;
      reader.readMessage(value,proto.forge_vendor.RequestInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 5:
      var value = new proto.forge_vendor.RequestSetOption;
      reader.readMessage(value,proto.forge_vendor.RequestSetOption.deserializeBinaryFromReader);
      msg.setSetOption(value);
      break;
    case 6:
      var value = new proto.forge_vendor.RequestInitChain;
      reader.readMessage(value,proto.forge_vendor.RequestInitChain.deserializeBinaryFromReader);
      msg.setInitChain(value);
      break;
    case 7:
      var value = new proto.forge_vendor.RequestQuery;
      reader.readMessage(value,proto.forge_vendor.RequestQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 8:
      var value = new proto.forge_vendor.RequestBeginBlock;
      reader.readMessage(value,proto.forge_vendor.RequestBeginBlock.deserializeBinaryFromReader);
      msg.setBeginBlock(value);
      break;
    case 9:
      var value = new proto.forge_vendor.RequestCheckTx;
      reader.readMessage(value,proto.forge_vendor.RequestCheckTx.deserializeBinaryFromReader);
      msg.setCheckTx(value);
      break;
    case 19:
      var value = new proto.forge_vendor.RequestDeliverTx;
      reader.readMessage(value,proto.forge_vendor.RequestDeliverTx.deserializeBinaryFromReader);
      msg.setDeliverTx(value);
      break;
    case 11:
      var value = new proto.forge_vendor.RequestEndBlock;
      reader.readMessage(value,proto.forge_vendor.RequestEndBlock.deserializeBinaryFromReader);
      msg.setEndBlock(value);
      break;
    case 12:
      var value = new proto.forge_vendor.RequestCommit;
      reader.readMessage(value,proto.forge_vendor.RequestCommit.deserializeBinaryFromReader);
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcho();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.forge_vendor.RequestEcho.serializeBinaryToWriter
    );
  }
  f = message.getFlush();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.forge_vendor.RequestFlush.serializeBinaryToWriter
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.forge_vendor.RequestInfo.serializeBinaryToWriter
    );
  }
  f = message.getSetOption();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.forge_vendor.RequestSetOption.serializeBinaryToWriter
    );
  }
  f = message.getInitChain();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.forge_vendor.RequestInitChain.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.forge_vendor.RequestQuery.serializeBinaryToWriter
    );
  }
  f = message.getBeginBlock();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.forge_vendor.RequestBeginBlock.serializeBinaryToWriter
    );
  }
  f = message.getCheckTx();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.forge_vendor.RequestCheckTx.serializeBinaryToWriter
    );
  }
  f = message.getDeliverTx();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.forge_vendor.RequestDeliverTx.serializeBinaryToWriter
    );
  }
  f = message.getEndBlock();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.forge_vendor.RequestEndBlock.serializeBinaryToWriter
    );
  }
  f = message.getCommit();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.forge_vendor.RequestCommit.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestEcho echo = 2;
 * @return {?proto.forge_vendor.RequestEcho}
 */
proto.forge_vendor.Request.prototype.getEcho = function() {
  return /** @type{?proto.forge_vendor.RequestEcho} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.RequestEcho, 2));
};


/** @param {?proto.forge_vendor.RequestEcho|undefined} value */
proto.forge_vendor.Request.prototype.setEcho = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.forge_vendor.Request.oneofGroups_[0], value);
};


proto.forge_vendor.Request.prototype.clearEcho = function() {
  this.setEcho(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Request.prototype.hasEcho = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RequestFlush flush = 3;
 * @return {?proto.forge_vendor.RequestFlush}
 */
proto.forge_vendor.Request.prototype.getFlush = function() {
  return /** @type{?proto.forge_vendor.RequestFlush} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.RequestFlush, 3));
};


/** @param {?proto.forge_vendor.RequestFlush|undefined} value */
proto.forge_vendor.Request.prototype.setFlush = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.forge_vendor.Request.oneofGroups_[0], value);
};


proto.forge_vendor.Request.prototype.clearFlush = function() {
  this.setFlush(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Request.prototype.hasFlush = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RequestInfo info = 4;
 * @return {?proto.forge_vendor.RequestInfo}
 */
proto.forge_vendor.Request.prototype.getInfo = function() {
  return /** @type{?proto.forge_vendor.RequestInfo} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.RequestInfo, 4));
};


/** @param {?proto.forge_vendor.RequestInfo|undefined} value */
proto.forge_vendor.Request.prototype.setInfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.forge_vendor.Request.oneofGroups_[0], value);
};


proto.forge_vendor.Request.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Request.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RequestSetOption set_option = 5;
 * @return {?proto.forge_vendor.RequestSetOption}
 */
proto.forge_vendor.Request.prototype.getSetOption = function() {
  return /** @type{?proto.forge_vendor.RequestSetOption} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.RequestSetOption, 5));
};


/** @param {?proto.forge_vendor.RequestSetOption|undefined} value */
proto.forge_vendor.Request.prototype.setSetOption = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.forge_vendor.Request.oneofGroups_[0], value);
};


proto.forge_vendor.Request.prototype.clearSetOption = function() {
  this.setSetOption(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Request.prototype.hasSetOption = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RequestInitChain init_chain = 6;
 * @return {?proto.forge_vendor.RequestInitChain}
 */
proto.forge_vendor.Request.prototype.getInitChain = function() {
  return /** @type{?proto.forge_vendor.RequestInitChain} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.RequestInitChain, 6));
};


/** @param {?proto.forge_vendor.RequestInitChain|undefined} value */
proto.forge_vendor.Request.prototype.setInitChain = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.forge_vendor.Request.oneofGroups_[0], value);
};


proto.forge_vendor.Request.prototype.clearInitChain = function() {
  this.setInitChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Request.prototype.hasInitChain = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RequestQuery query = 7;
 * @return {?proto.forge_vendor.RequestQuery}
 */
proto.forge_vendor.Request.prototype.getQuery = function() {
  return /** @type{?proto.forge_vendor.RequestQuery} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.RequestQuery, 7));
};


/** @param {?proto.forge_vendor.RequestQuery|undefined} value */
proto.forge_vendor.Request.prototype.setQuery = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.forge_vendor.Request.oneofGroups_[0], value);
};


proto.forge_vendor.Request.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Request.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RequestBeginBlock begin_block = 8;
 * @return {?proto.forge_vendor.RequestBeginBlock}
 */
proto.forge_vendor.Request.prototype.getBeginBlock = function() {
  return /** @type{?proto.forge_vendor.RequestBeginBlock} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.RequestBeginBlock, 8));
};


/** @param {?proto.forge_vendor.RequestBeginBlock|undefined} value */
proto.forge_vendor.Request.prototype.setBeginBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.forge_vendor.Request.oneofGroups_[0], value);
};


proto.forge_vendor.Request.prototype.clearBeginBlock = function() {
  this.setBeginBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Request.prototype.hasBeginBlock = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RequestCheckTx check_tx = 9;
 * @return {?proto.forge_vendor.RequestCheckTx}
 */
proto.forge_vendor.Request.prototype.getCheckTx = function() {
  return /** @type{?proto.forge_vendor.RequestCheckTx} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.RequestCheckTx, 9));
};


/** @param {?proto.forge_vendor.RequestCheckTx|undefined} value */
proto.forge_vendor.Request.prototype.setCheckTx = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.forge_vendor.Request.oneofGroups_[0], value);
};


proto.forge_vendor.Request.prototype.clearCheckTx = function() {
  this.setCheckTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Request.prototype.hasCheckTx = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional RequestDeliverTx deliver_tx = 19;
 * @return {?proto.forge_vendor.RequestDeliverTx}
 */
proto.forge_vendor.Request.prototype.getDeliverTx = function() {
  return /** @type{?proto.forge_vendor.RequestDeliverTx} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.RequestDeliverTx, 19));
};


/** @param {?proto.forge_vendor.RequestDeliverTx|undefined} value */
proto.forge_vendor.Request.prototype.setDeliverTx = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.forge_vendor.Request.oneofGroups_[0], value);
};


proto.forge_vendor.Request.prototype.clearDeliverTx = function() {
  this.setDeliverTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Request.prototype.hasDeliverTx = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional RequestEndBlock end_block = 11;
 * @return {?proto.forge_vendor.RequestEndBlock}
 */
proto.forge_vendor.Request.prototype.getEndBlock = function() {
  return /** @type{?proto.forge_vendor.RequestEndBlock} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.RequestEndBlock, 11));
};


/** @param {?proto.forge_vendor.RequestEndBlock|undefined} value */
proto.forge_vendor.Request.prototype.setEndBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.forge_vendor.Request.oneofGroups_[0], value);
};


proto.forge_vendor.Request.prototype.clearEndBlock = function() {
  this.setEndBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Request.prototype.hasEndBlock = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RequestCommit commit = 12;
 * @return {?proto.forge_vendor.RequestCommit}
 */
proto.forge_vendor.Request.prototype.getCommit = function() {
  return /** @type{?proto.forge_vendor.RequestCommit} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.RequestCommit, 12));
};


/** @param {?proto.forge_vendor.RequestCommit|undefined} value */
proto.forge_vendor.Request.prototype.setCommit = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.forge_vendor.Request.oneofGroups_[0], value);
};


proto.forge_vendor.Request.prototype.clearCommit = function() {
  this.setCommit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Request.prototype.hasCommit = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ResponseException = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.ResponseException, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ResponseException.displayName = 'proto.forge_vendor.ResponseException';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ResponseException.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ResponseException.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ResponseException} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseException.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ResponseException}
 */
proto.forge_vendor.ResponseException.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ResponseException;
  return proto.forge_vendor.ResponseException.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ResponseException} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ResponseException}
 */
proto.forge_vendor.ResponseException.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseException.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ResponseException.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ResponseException} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseException.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.forge_vendor.ResponseException.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseException.prototype.setError = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ResponseEcho = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.ResponseEcho, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ResponseEcho.displayName = 'proto.forge_vendor.ResponseEcho';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ResponseEcho.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ResponseEcho.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ResponseEcho} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseEcho.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ResponseEcho}
 */
proto.forge_vendor.ResponseEcho.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ResponseEcho;
  return proto.forge_vendor.ResponseEcho.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ResponseEcho} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ResponseEcho}
 */
proto.forge_vendor.ResponseEcho.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseEcho.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ResponseEcho.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ResponseEcho} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseEcho.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.forge_vendor.ResponseEcho.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseEcho.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ResponseFlush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.ResponseFlush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ResponseFlush.displayName = 'proto.forge_vendor.ResponseFlush';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ResponseFlush.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ResponseFlush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ResponseFlush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseFlush.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ResponseFlush}
 */
proto.forge_vendor.ResponseFlush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ResponseFlush;
  return proto.forge_vendor.ResponseFlush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ResponseFlush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ResponseFlush}
 */
proto.forge_vendor.ResponseFlush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseFlush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ResponseFlush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ResponseFlush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseFlush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ResponseInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.ResponseInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ResponseInfo.displayName = 'proto.forge_vendor.ResponseInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ResponseInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ResponseInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ResponseInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    appVersion: jspb.Message.getFieldWithDefault(msg, 3, 0),
    lastBlockHeight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lastBlockAppHash: msg.getLastBlockAppHash()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ResponseInfo}
 */
proto.forge_vendor.ResponseInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ResponseInfo;
  return proto.forge_vendor.ResponseInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ResponseInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ResponseInfo}
 */
proto.forge_vendor.ResponseInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAppVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastBlockHeight(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastBlockAppHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ResponseInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ResponseInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAppVersion();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getLastBlockHeight();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getLastBlockAppHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.forge_vendor.ResponseInfo.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseInfo.prototype.setData = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.forge_vendor.ResponseInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseInfo.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 app_version = 3;
 * @return {number}
 */
proto.forge_vendor.ResponseInfo.prototype.getAppVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.forge_vendor.ResponseInfo.prototype.setAppVersion = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 last_block_height = 4;
 * @return {number}
 */
proto.forge_vendor.ResponseInfo.prototype.getLastBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.forge_vendor.ResponseInfo.prototype.setLastBlockHeight = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes last_block_app_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.ResponseInfo.prototype.getLastBlockAppHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes last_block_app_hash = 5;
 * This is a type-conversion wrapper around `getLastBlockAppHash()`
 * @return {string}
 */
proto.forge_vendor.ResponseInfo.prototype.getLastBlockAppHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastBlockAppHash()));
};


/**
 * optional bytes last_block_app_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastBlockAppHash()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseInfo.prototype.getLastBlockAppHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastBlockAppHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.ResponseInfo.prototype.setLastBlockAppHash = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ResponseSetOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.ResponseSetOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ResponseSetOption.displayName = 'proto.forge_vendor.ResponseSetOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ResponseSetOption.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ResponseSetOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ResponseSetOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseSetOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    log: jspb.Message.getFieldWithDefault(msg, 3, ""),
    info: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ResponseSetOption}
 */
proto.forge_vendor.ResponseSetOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ResponseSetOption;
  return proto.forge_vendor.ResponseSetOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ResponseSetOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ResponseSetOption}
 */
proto.forge_vendor.ResponseSetOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLog(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseSetOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ResponseSetOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ResponseSetOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseSetOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLog();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.forge_vendor.ResponseSetOption.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.forge_vendor.ResponseSetOption.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string log = 3;
 * @return {string}
 */
proto.forge_vendor.ResponseSetOption.prototype.getLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseSetOption.prototype.setLog = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string info = 4;
 * @return {string}
 */
proto.forge_vendor.ResponseSetOption.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseSetOption.prototype.setInfo = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ResponseInitChain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_vendor.ResponseInitChain.repeatedFields_, null);
};
goog.inherits(proto.forge_vendor.ResponseInitChain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ResponseInitChain.displayName = 'proto.forge_vendor.ResponseInitChain';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_vendor.ResponseInitChain.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ResponseInitChain.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ResponseInitChain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ResponseInitChain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseInitChain.toObject = function(includeInstance, msg) {
  var f, obj = {
    consensusParams: (f = msg.getConsensusParams()) && proto.forge_vendor.ConsensusParams.toObject(includeInstance, f),
    validatorsList: jspb.Message.toObjectList(msg.getValidatorsList(),
    proto.forge_vendor.ValidatorUpdate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ResponseInitChain}
 */
proto.forge_vendor.ResponseInitChain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ResponseInitChain;
  return proto.forge_vendor.ResponseInitChain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ResponseInitChain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ResponseInitChain}
 */
proto.forge_vendor.ResponseInitChain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.forge_vendor.ConsensusParams;
      reader.readMessage(value,proto.forge_vendor.ConsensusParams.deserializeBinaryFromReader);
      msg.setConsensusParams(value);
      break;
    case 2:
      var value = new proto.forge_vendor.ValidatorUpdate;
      reader.readMessage(value,proto.forge_vendor.ValidatorUpdate.deserializeBinaryFromReader);
      msg.addValidators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseInitChain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ResponseInitChain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ResponseInitChain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseInitChain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsensusParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.forge_vendor.ConsensusParams.serializeBinaryToWriter
    );
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.forge_vendor.ValidatorUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConsensusParams consensus_params = 1;
 * @return {?proto.forge_vendor.ConsensusParams}
 */
proto.forge_vendor.ResponseInitChain.prototype.getConsensusParams = function() {
  return /** @type{?proto.forge_vendor.ConsensusParams} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ConsensusParams, 1));
};


/** @param {?proto.forge_vendor.ConsensusParams|undefined} value */
proto.forge_vendor.ResponseInitChain.prototype.setConsensusParams = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.forge_vendor.ResponseInitChain.prototype.clearConsensusParams = function() {
  this.setConsensusParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.ResponseInitChain.prototype.hasConsensusParams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ValidatorUpdate validators = 2;
 * @return {!Array.<!proto.forge_vendor.ValidatorUpdate>}
 */
proto.forge_vendor.ResponseInitChain.prototype.getValidatorsList = function() {
  return /** @type{!Array.<!proto.forge_vendor.ValidatorUpdate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.forge_vendor.ValidatorUpdate, 2));
};


/** @param {!Array.<!proto.forge_vendor.ValidatorUpdate>} value */
proto.forge_vendor.ResponseInitChain.prototype.setValidatorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.forge_vendor.ValidatorUpdate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_vendor.ValidatorUpdate}
 */
proto.forge_vendor.ResponseInitChain.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.forge_vendor.ValidatorUpdate, opt_index);
};


proto.forge_vendor.ResponseInitChain.prototype.clearValidatorsList = function() {
  this.setValidatorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ResponseQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.ResponseQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ResponseQuery.displayName = 'proto.forge_vendor.ResponseQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ResponseQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ResponseQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ResponseQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    log: jspb.Message.getFieldWithDefault(msg, 3, ""),
    info: jspb.Message.getFieldWithDefault(msg, 4, ""),
    index: jspb.Message.getFieldWithDefault(msg, 5, 0),
    key: msg.getKey(),
    value: msg.getValue(),
    proof: (f = msg.getProof()) && proto.forge_vendor.Proof.toObject(includeInstance, f),
    height: jspb.Message.getFieldWithDefault(msg, 9, 0),
    codespace: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ResponseQuery}
 */
proto.forge_vendor.ResponseQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ResponseQuery;
  return proto.forge_vendor.ResponseQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ResponseQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ResponseQuery}
 */
proto.forge_vendor.ResponseQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLog(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIndex(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 8:
      var value = new proto.forge_vendor.Proof;
      reader.readMessage(value,proto.forge_vendor.Proof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ResponseQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ResponseQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLog();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.forge_vendor.Proof.serializeBinaryToWriter
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getCodespace();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.forge_vendor.ResponseQuery.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.forge_vendor.ResponseQuery.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string log = 3;
 * @return {string}
 */
proto.forge_vendor.ResponseQuery.prototype.getLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseQuery.prototype.setLog = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string info = 4;
 * @return {string}
 */
proto.forge_vendor.ResponseQuery.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseQuery.prototype.setInfo = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 index = 5;
 * @return {number}
 */
proto.forge_vendor.ResponseQuery.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.forge_vendor.ResponseQuery.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes key = 6;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.ResponseQuery.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes key = 6;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.forge_vendor.ResponseQuery.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseQuery.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.ResponseQuery.prototype.setKey = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes value = 7;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.ResponseQuery.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes value = 7;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.forge_vendor.ResponseQuery.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseQuery.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.ResponseQuery.prototype.setValue = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional Proof proof = 8;
 * @return {?proto.forge_vendor.Proof}
 */
proto.forge_vendor.ResponseQuery.prototype.getProof = function() {
  return /** @type{?proto.forge_vendor.Proof} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.Proof, 8));
};


/** @param {?proto.forge_vendor.Proof|undefined} value */
proto.forge_vendor.ResponseQuery.prototype.setProof = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.forge_vendor.ResponseQuery.prototype.clearProof = function() {
  this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.ResponseQuery.prototype.hasProof = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 height = 9;
 * @return {number}
 */
proto.forge_vendor.ResponseQuery.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.forge_vendor.ResponseQuery.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string codespace = 10;
 * @return {string}
 */
proto.forge_vendor.ResponseQuery.prototype.getCodespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseQuery.prototype.setCodespace = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ResponseBeginBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_vendor.ResponseBeginBlock.repeatedFields_, null);
};
goog.inherits(proto.forge_vendor.ResponseBeginBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ResponseBeginBlock.displayName = 'proto.forge_vendor.ResponseBeginBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_vendor.ResponseBeginBlock.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ResponseBeginBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ResponseBeginBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ResponseBeginBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseBeginBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.forge_vendor.KVPair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ResponseBeginBlock}
 */
proto.forge_vendor.ResponseBeginBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ResponseBeginBlock;
  return proto.forge_vendor.ResponseBeginBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ResponseBeginBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ResponseBeginBlock}
 */
proto.forge_vendor.ResponseBeginBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.forge_vendor.KVPair;
      reader.readMessage(value,proto.forge_vendor.KVPair.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseBeginBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ResponseBeginBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ResponseBeginBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseBeginBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.forge_vendor.KVPair.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KVPair tags = 1;
 * @return {!Array.<!proto.forge_vendor.KVPair>}
 */
proto.forge_vendor.ResponseBeginBlock.prototype.getTagsList = function() {
  return /** @type{!Array.<!proto.forge_vendor.KVPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.forge_vendor.KVPair, 1));
};


/** @param {!Array.<!proto.forge_vendor.KVPair>} value */
proto.forge_vendor.ResponseBeginBlock.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.forge_vendor.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_vendor.KVPair}
 */
proto.forge_vendor.ResponseBeginBlock.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.forge_vendor.KVPair, opt_index);
};


proto.forge_vendor.ResponseBeginBlock.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ResponseCheckTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_vendor.ResponseCheckTx.repeatedFields_, null);
};
goog.inherits(proto.forge_vendor.ResponseCheckTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ResponseCheckTx.displayName = 'proto.forge_vendor.ResponseCheckTx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_vendor.ResponseCheckTx.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ResponseCheckTx.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ResponseCheckTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ResponseCheckTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseCheckTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: msg.getData(),
    log: jspb.Message.getFieldWithDefault(msg, 3, ""),
    info: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gasWanted: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 6, 0),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.forge_vendor.KVPair.toObject, includeInstance),
    codespace: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ResponseCheckTx}
 */
proto.forge_vendor.ResponseCheckTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ResponseCheckTx;
  return proto.forge_vendor.ResponseCheckTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ResponseCheckTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ResponseCheckTx}
 */
proto.forge_vendor.ResponseCheckTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLog(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGasWanted(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGasUsed(value);
      break;
    case 7:
      var value = new proto.forge_vendor.KVPair;
      reader.readMessage(value,proto.forge_vendor.KVPair.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseCheckTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ResponseCheckTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ResponseCheckTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseCheckTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLog();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGasWanted();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.forge_vendor.KVPair.serializeBinaryToWriter
    );
  }
  f = message.getCodespace();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.forge_vendor.ResponseCheckTx.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.forge_vendor.ResponseCheckTx.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.ResponseCheckTx.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.forge_vendor.ResponseCheckTx.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseCheckTx.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.ResponseCheckTx.prototype.setData = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string log = 3;
 * @return {string}
 */
proto.forge_vendor.ResponseCheckTx.prototype.getLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseCheckTx.prototype.setLog = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string info = 4;
 * @return {string}
 */
proto.forge_vendor.ResponseCheckTx.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseCheckTx.prototype.setInfo = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 gas_wanted = 5;
 * @return {number}
 */
proto.forge_vendor.ResponseCheckTx.prototype.getGasWanted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.forge_vendor.ResponseCheckTx.prototype.setGasWanted = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 gas_used = 6;
 * @return {number}
 */
proto.forge_vendor.ResponseCheckTx.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.forge_vendor.ResponseCheckTx.prototype.setGasUsed = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated KVPair tags = 7;
 * @return {!Array.<!proto.forge_vendor.KVPair>}
 */
proto.forge_vendor.ResponseCheckTx.prototype.getTagsList = function() {
  return /** @type{!Array.<!proto.forge_vendor.KVPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.forge_vendor.KVPair, 7));
};


/** @param {!Array.<!proto.forge_vendor.KVPair>} value */
proto.forge_vendor.ResponseCheckTx.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.forge_vendor.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_vendor.KVPair}
 */
proto.forge_vendor.ResponseCheckTx.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.forge_vendor.KVPair, opt_index);
};


proto.forge_vendor.ResponseCheckTx.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * optional string codespace = 8;
 * @return {string}
 */
proto.forge_vendor.ResponseCheckTx.prototype.getCodespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseCheckTx.prototype.setCodespace = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ResponseDeliverTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_vendor.ResponseDeliverTx.repeatedFields_, null);
};
goog.inherits(proto.forge_vendor.ResponseDeliverTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ResponseDeliverTx.displayName = 'proto.forge_vendor.ResponseDeliverTx';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_vendor.ResponseDeliverTx.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ResponseDeliverTx.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ResponseDeliverTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ResponseDeliverTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseDeliverTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: msg.getData(),
    log: jspb.Message.getFieldWithDefault(msg, 3, ""),
    info: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gasWanted: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 6, 0),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.forge_vendor.KVPair.toObject, includeInstance),
    codespace: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ResponseDeliverTx}
 */
proto.forge_vendor.ResponseDeliverTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ResponseDeliverTx;
  return proto.forge_vendor.ResponseDeliverTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ResponseDeliverTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ResponseDeliverTx}
 */
proto.forge_vendor.ResponseDeliverTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLog(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGasWanted(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGasUsed(value);
      break;
    case 7:
      var value = new proto.forge_vendor.KVPair;
      reader.readMessage(value,proto.forge_vendor.KVPair.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseDeliverTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ResponseDeliverTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ResponseDeliverTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseDeliverTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLog();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGasWanted();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.forge_vendor.KVPair.serializeBinaryToWriter
    );
  }
  f = message.getCodespace();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.forge_vendor.ResponseDeliverTx.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.forge_vendor.ResponseDeliverTx.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.ResponseDeliverTx.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.forge_vendor.ResponseDeliverTx.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseDeliverTx.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.ResponseDeliverTx.prototype.setData = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string log = 3;
 * @return {string}
 */
proto.forge_vendor.ResponseDeliverTx.prototype.getLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseDeliverTx.prototype.setLog = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string info = 4;
 * @return {string}
 */
proto.forge_vendor.ResponseDeliverTx.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseDeliverTx.prototype.setInfo = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 gas_wanted = 5;
 * @return {number}
 */
proto.forge_vendor.ResponseDeliverTx.prototype.getGasWanted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.forge_vendor.ResponseDeliverTx.prototype.setGasWanted = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 gas_used = 6;
 * @return {number}
 */
proto.forge_vendor.ResponseDeliverTx.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.forge_vendor.ResponseDeliverTx.prototype.setGasUsed = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated KVPair tags = 7;
 * @return {!Array.<!proto.forge_vendor.KVPair>}
 */
proto.forge_vendor.ResponseDeliverTx.prototype.getTagsList = function() {
  return /** @type{!Array.<!proto.forge_vendor.KVPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.forge_vendor.KVPair, 7));
};


/** @param {!Array.<!proto.forge_vendor.KVPair>} value */
proto.forge_vendor.ResponseDeliverTx.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.forge_vendor.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_vendor.KVPair}
 */
proto.forge_vendor.ResponseDeliverTx.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.forge_vendor.KVPair, opt_index);
};


proto.forge_vendor.ResponseDeliverTx.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * optional string codespace = 8;
 * @return {string}
 */
proto.forge_vendor.ResponseDeliverTx.prototype.getCodespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.forge_vendor.ResponseDeliverTx.prototype.setCodespace = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ResponseEndBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.forge_vendor.ResponseEndBlock.repeatedFields_, null);
};
goog.inherits(proto.forge_vendor.ResponseEndBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ResponseEndBlock.displayName = 'proto.forge_vendor.ResponseEndBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.forge_vendor.ResponseEndBlock.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ResponseEndBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ResponseEndBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ResponseEndBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseEndBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorUpdatesList: jspb.Message.toObjectList(msg.getValidatorUpdatesList(),
    proto.forge_vendor.ValidatorUpdate.toObject, includeInstance),
    consensusParamUpdates: (f = msg.getConsensusParamUpdates()) && proto.forge_vendor.ConsensusParams.toObject(includeInstance, f),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.forge_vendor.KVPair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ResponseEndBlock}
 */
proto.forge_vendor.ResponseEndBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ResponseEndBlock;
  return proto.forge_vendor.ResponseEndBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ResponseEndBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ResponseEndBlock}
 */
proto.forge_vendor.ResponseEndBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.forge_vendor.ValidatorUpdate;
      reader.readMessage(value,proto.forge_vendor.ValidatorUpdate.deserializeBinaryFromReader);
      msg.addValidatorUpdates(value);
      break;
    case 2:
      var value = new proto.forge_vendor.ConsensusParams;
      reader.readMessage(value,proto.forge_vendor.ConsensusParams.deserializeBinaryFromReader);
      msg.setConsensusParamUpdates(value);
      break;
    case 3:
      var value = new proto.forge_vendor.KVPair;
      reader.readMessage(value,proto.forge_vendor.KVPair.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseEndBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ResponseEndBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ResponseEndBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseEndBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidatorUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.forge_vendor.ValidatorUpdate.serializeBinaryToWriter
    );
  }
  f = message.getConsensusParamUpdates();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.forge_vendor.ConsensusParams.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.forge_vendor.KVPair.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ValidatorUpdate validator_updates = 1;
 * @return {!Array.<!proto.forge_vendor.ValidatorUpdate>}
 */
proto.forge_vendor.ResponseEndBlock.prototype.getValidatorUpdatesList = function() {
  return /** @type{!Array.<!proto.forge_vendor.ValidatorUpdate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.forge_vendor.ValidatorUpdate, 1));
};


/** @param {!Array.<!proto.forge_vendor.ValidatorUpdate>} value */
proto.forge_vendor.ResponseEndBlock.prototype.setValidatorUpdatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.forge_vendor.ValidatorUpdate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_vendor.ValidatorUpdate}
 */
proto.forge_vendor.ResponseEndBlock.prototype.addValidatorUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.forge_vendor.ValidatorUpdate, opt_index);
};


proto.forge_vendor.ResponseEndBlock.prototype.clearValidatorUpdatesList = function() {
  this.setValidatorUpdatesList([]);
};


/**
 * optional ConsensusParams consensus_param_updates = 2;
 * @return {?proto.forge_vendor.ConsensusParams}
 */
proto.forge_vendor.ResponseEndBlock.prototype.getConsensusParamUpdates = function() {
  return /** @type{?proto.forge_vendor.ConsensusParams} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ConsensusParams, 2));
};


/** @param {?proto.forge_vendor.ConsensusParams|undefined} value */
proto.forge_vendor.ResponseEndBlock.prototype.setConsensusParamUpdates = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.forge_vendor.ResponseEndBlock.prototype.clearConsensusParamUpdates = function() {
  this.setConsensusParamUpdates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.ResponseEndBlock.prototype.hasConsensusParamUpdates = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated KVPair tags = 3;
 * @return {!Array.<!proto.forge_vendor.KVPair>}
 */
proto.forge_vendor.ResponseEndBlock.prototype.getTagsList = function() {
  return /** @type{!Array.<!proto.forge_vendor.KVPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.forge_vendor.KVPair, 3));
};


/** @param {!Array.<!proto.forge_vendor.KVPair>} value */
proto.forge_vendor.ResponseEndBlock.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.forge_vendor.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.forge_vendor.KVPair}
 */
proto.forge_vendor.ResponseEndBlock.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.forge_vendor.KVPair, opt_index);
};


proto.forge_vendor.ResponseEndBlock.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ResponseCommit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.ResponseCommit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ResponseCommit.displayName = 'proto.forge_vendor.ResponseCommit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ResponseCommit.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ResponseCommit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ResponseCommit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseCommit.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ResponseCommit}
 */
proto.forge_vendor.ResponseCommit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ResponseCommit;
  return proto.forge_vendor.ResponseCommit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ResponseCommit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ResponseCommit}
 */
proto.forge_vendor.ResponseCommit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseCommit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ResponseCommit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ResponseCommit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseCommit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.ResponseCommit.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.forge_vendor.ResponseCommit.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseCommit.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.ResponseCommit.prototype.setData = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.forge_vendor.Response.oneofGroups_);
};
goog.inherits(proto.forge_vendor.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.Response.displayName = 'proto.forge_vendor.Response';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.forge_vendor.Response.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12]];

/**
 * @enum {number}
 */
proto.forge_vendor.Response.ValueCase = {
  VALUE_NOT_SET: 0,
  EXCEPTION: 1,
  ECHO: 2,
  FLUSH: 3,
  INFO: 4,
  SET_OPTION: 5,
  INIT_CHAIN: 6,
  QUERY: 7,
  BEGIN_BLOCK: 8,
  CHECK_TX: 9,
  DELIVER_TX: 10,
  END_BLOCK: 11,
  COMMIT: 12
};

/**
 * @return {proto.forge_vendor.Response.ValueCase}
 */
proto.forge_vendor.Response.prototype.getValueCase = function() {
  return /** @type {proto.forge_vendor.Response.ValueCase} */(jspb.Message.computeOneofCase(this, proto.forge_vendor.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    exception: (f = msg.getException()) && proto.forge_vendor.ResponseException.toObject(includeInstance, f),
    echo: (f = msg.getEcho()) && proto.forge_vendor.ResponseEcho.toObject(includeInstance, f),
    flush: (f = msg.getFlush()) && proto.forge_vendor.ResponseFlush.toObject(includeInstance, f),
    info: (f = msg.getInfo()) && proto.forge_vendor.ResponseInfo.toObject(includeInstance, f),
    setOption: (f = msg.getSetOption()) && proto.forge_vendor.ResponseSetOption.toObject(includeInstance, f),
    initChain: (f = msg.getInitChain()) && proto.forge_vendor.ResponseInitChain.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && proto.forge_vendor.ResponseQuery.toObject(includeInstance, f),
    beginBlock: (f = msg.getBeginBlock()) && proto.forge_vendor.ResponseBeginBlock.toObject(includeInstance, f),
    checkTx: (f = msg.getCheckTx()) && proto.forge_vendor.ResponseCheckTx.toObject(includeInstance, f),
    deliverTx: (f = msg.getDeliverTx()) && proto.forge_vendor.ResponseDeliverTx.toObject(includeInstance, f),
    endBlock: (f = msg.getEndBlock()) && proto.forge_vendor.ResponseEndBlock.toObject(includeInstance, f),
    commit: (f = msg.getCommit()) && proto.forge_vendor.ResponseCommit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.Response}
 */
proto.forge_vendor.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.Response;
  return proto.forge_vendor.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.Response}
 */
proto.forge_vendor.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.forge_vendor.ResponseException;
      reader.readMessage(value,proto.forge_vendor.ResponseException.deserializeBinaryFromReader);
      msg.setException(value);
      break;
    case 2:
      var value = new proto.forge_vendor.ResponseEcho;
      reader.readMessage(value,proto.forge_vendor.ResponseEcho.deserializeBinaryFromReader);
      msg.setEcho(value);
      break;
    case 3:
      var value = new proto.forge_vendor.ResponseFlush;
      reader.readMessage(value,proto.forge_vendor.ResponseFlush.deserializeBinaryFromReader);
      msg.setFlush(value);
      break;
    case 4:
      var value = new proto.forge_vendor.ResponseInfo;
      reader.readMessage(value,proto.forge_vendor.ResponseInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 5:
      var value = new proto.forge_vendor.ResponseSetOption;
      reader.readMessage(value,proto.forge_vendor.ResponseSetOption.deserializeBinaryFromReader);
      msg.setSetOption(value);
      break;
    case 6:
      var value = new proto.forge_vendor.ResponseInitChain;
      reader.readMessage(value,proto.forge_vendor.ResponseInitChain.deserializeBinaryFromReader);
      msg.setInitChain(value);
      break;
    case 7:
      var value = new proto.forge_vendor.ResponseQuery;
      reader.readMessage(value,proto.forge_vendor.ResponseQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 8:
      var value = new proto.forge_vendor.ResponseBeginBlock;
      reader.readMessage(value,proto.forge_vendor.ResponseBeginBlock.deserializeBinaryFromReader);
      msg.setBeginBlock(value);
      break;
    case 9:
      var value = new proto.forge_vendor.ResponseCheckTx;
      reader.readMessage(value,proto.forge_vendor.ResponseCheckTx.deserializeBinaryFromReader);
      msg.setCheckTx(value);
      break;
    case 10:
      var value = new proto.forge_vendor.ResponseDeliverTx;
      reader.readMessage(value,proto.forge_vendor.ResponseDeliverTx.deserializeBinaryFromReader);
      msg.setDeliverTx(value);
      break;
    case 11:
      var value = new proto.forge_vendor.ResponseEndBlock;
      reader.readMessage(value,proto.forge_vendor.ResponseEndBlock.deserializeBinaryFromReader);
      msg.setEndBlock(value);
      break;
    case 12:
      var value = new proto.forge_vendor.ResponseCommit;
      reader.readMessage(value,proto.forge_vendor.ResponseCommit.deserializeBinaryFromReader);
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getException();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.forge_vendor.ResponseException.serializeBinaryToWriter
    );
  }
  f = message.getEcho();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.forge_vendor.ResponseEcho.serializeBinaryToWriter
    );
  }
  f = message.getFlush();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.forge_vendor.ResponseFlush.serializeBinaryToWriter
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.forge_vendor.ResponseInfo.serializeBinaryToWriter
    );
  }
  f = message.getSetOption();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.forge_vendor.ResponseSetOption.serializeBinaryToWriter
    );
  }
  f = message.getInitChain();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.forge_vendor.ResponseInitChain.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.forge_vendor.ResponseQuery.serializeBinaryToWriter
    );
  }
  f = message.getBeginBlock();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.forge_vendor.ResponseBeginBlock.serializeBinaryToWriter
    );
  }
  f = message.getCheckTx();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.forge_vendor.ResponseCheckTx.serializeBinaryToWriter
    );
  }
  f = message.getDeliverTx();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.forge_vendor.ResponseDeliverTx.serializeBinaryToWriter
    );
  }
  f = message.getEndBlock();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.forge_vendor.ResponseEndBlock.serializeBinaryToWriter
    );
  }
  f = message.getCommit();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.forge_vendor.ResponseCommit.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseException exception = 1;
 * @return {?proto.forge_vendor.ResponseException}
 */
proto.forge_vendor.Response.prototype.getException = function() {
  return /** @type{?proto.forge_vendor.ResponseException} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ResponseException, 1));
};


/** @param {?proto.forge_vendor.ResponseException|undefined} value */
proto.forge_vendor.Response.prototype.setException = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.forge_vendor.Response.oneofGroups_[0], value);
};


proto.forge_vendor.Response.prototype.clearException = function() {
  this.setException(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Response.prototype.hasException = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseEcho echo = 2;
 * @return {?proto.forge_vendor.ResponseEcho}
 */
proto.forge_vendor.Response.prototype.getEcho = function() {
  return /** @type{?proto.forge_vendor.ResponseEcho} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ResponseEcho, 2));
};


/** @param {?proto.forge_vendor.ResponseEcho|undefined} value */
proto.forge_vendor.Response.prototype.setEcho = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.forge_vendor.Response.oneofGroups_[0], value);
};


proto.forge_vendor.Response.prototype.clearEcho = function() {
  this.setEcho(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Response.prototype.hasEcho = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResponseFlush flush = 3;
 * @return {?proto.forge_vendor.ResponseFlush}
 */
proto.forge_vendor.Response.prototype.getFlush = function() {
  return /** @type{?proto.forge_vendor.ResponseFlush} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ResponseFlush, 3));
};


/** @param {?proto.forge_vendor.ResponseFlush|undefined} value */
proto.forge_vendor.Response.prototype.setFlush = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.forge_vendor.Response.oneofGroups_[0], value);
};


proto.forge_vendor.Response.prototype.clearFlush = function() {
  this.setFlush(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Response.prototype.hasFlush = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ResponseInfo info = 4;
 * @return {?proto.forge_vendor.ResponseInfo}
 */
proto.forge_vendor.Response.prototype.getInfo = function() {
  return /** @type{?proto.forge_vendor.ResponseInfo} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ResponseInfo, 4));
};


/** @param {?proto.forge_vendor.ResponseInfo|undefined} value */
proto.forge_vendor.Response.prototype.setInfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.forge_vendor.Response.oneofGroups_[0], value);
};


proto.forge_vendor.Response.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Response.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ResponseSetOption set_option = 5;
 * @return {?proto.forge_vendor.ResponseSetOption}
 */
proto.forge_vendor.Response.prototype.getSetOption = function() {
  return /** @type{?proto.forge_vendor.ResponseSetOption} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ResponseSetOption, 5));
};


/** @param {?proto.forge_vendor.ResponseSetOption|undefined} value */
proto.forge_vendor.Response.prototype.setSetOption = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.forge_vendor.Response.oneofGroups_[0], value);
};


proto.forge_vendor.Response.prototype.clearSetOption = function() {
  this.setSetOption(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Response.prototype.hasSetOption = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ResponseInitChain init_chain = 6;
 * @return {?proto.forge_vendor.ResponseInitChain}
 */
proto.forge_vendor.Response.prototype.getInitChain = function() {
  return /** @type{?proto.forge_vendor.ResponseInitChain} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ResponseInitChain, 6));
};


/** @param {?proto.forge_vendor.ResponseInitChain|undefined} value */
proto.forge_vendor.Response.prototype.setInitChain = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.forge_vendor.Response.oneofGroups_[0], value);
};


proto.forge_vendor.Response.prototype.clearInitChain = function() {
  this.setInitChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Response.prototype.hasInitChain = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ResponseQuery query = 7;
 * @return {?proto.forge_vendor.ResponseQuery}
 */
proto.forge_vendor.Response.prototype.getQuery = function() {
  return /** @type{?proto.forge_vendor.ResponseQuery} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ResponseQuery, 7));
};


/** @param {?proto.forge_vendor.ResponseQuery|undefined} value */
proto.forge_vendor.Response.prototype.setQuery = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.forge_vendor.Response.oneofGroups_[0], value);
};


proto.forge_vendor.Response.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Response.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ResponseBeginBlock begin_block = 8;
 * @return {?proto.forge_vendor.ResponseBeginBlock}
 */
proto.forge_vendor.Response.prototype.getBeginBlock = function() {
  return /** @type{?proto.forge_vendor.ResponseBeginBlock} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ResponseBeginBlock, 8));
};


/** @param {?proto.forge_vendor.ResponseBeginBlock|undefined} value */
proto.forge_vendor.Response.prototype.setBeginBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.forge_vendor.Response.oneofGroups_[0], value);
};


proto.forge_vendor.Response.prototype.clearBeginBlock = function() {
  this.setBeginBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Response.prototype.hasBeginBlock = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ResponseCheckTx check_tx = 9;
 * @return {?proto.forge_vendor.ResponseCheckTx}
 */
proto.forge_vendor.Response.prototype.getCheckTx = function() {
  return /** @type{?proto.forge_vendor.ResponseCheckTx} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ResponseCheckTx, 9));
};


/** @param {?proto.forge_vendor.ResponseCheckTx|undefined} value */
proto.forge_vendor.Response.prototype.setCheckTx = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.forge_vendor.Response.oneofGroups_[0], value);
};


proto.forge_vendor.Response.prototype.clearCheckTx = function() {
  this.setCheckTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Response.prototype.hasCheckTx = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ResponseDeliverTx deliver_tx = 10;
 * @return {?proto.forge_vendor.ResponseDeliverTx}
 */
proto.forge_vendor.Response.prototype.getDeliverTx = function() {
  return /** @type{?proto.forge_vendor.ResponseDeliverTx} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ResponseDeliverTx, 10));
};


/** @param {?proto.forge_vendor.ResponseDeliverTx|undefined} value */
proto.forge_vendor.Response.prototype.setDeliverTx = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.forge_vendor.Response.oneofGroups_[0], value);
};


proto.forge_vendor.Response.prototype.clearDeliverTx = function() {
  this.setDeliverTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Response.prototype.hasDeliverTx = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ResponseEndBlock end_block = 11;
 * @return {?proto.forge_vendor.ResponseEndBlock}
 */
proto.forge_vendor.Response.prototype.getEndBlock = function() {
  return /** @type{?proto.forge_vendor.ResponseEndBlock} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ResponseEndBlock, 11));
};


/** @param {?proto.forge_vendor.ResponseEndBlock|undefined} value */
proto.forge_vendor.Response.prototype.setEndBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.forge_vendor.Response.oneofGroups_[0], value);
};


proto.forge_vendor.Response.prototype.clearEndBlock = function() {
  this.setEndBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Response.prototype.hasEndBlock = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ResponseCommit commit = 12;
 * @return {?proto.forge_vendor.ResponseCommit}
 */
proto.forge_vendor.Response.prototype.getCommit = function() {
  return /** @type{?proto.forge_vendor.ResponseCommit} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ResponseCommit, 12));
};


/** @param {?proto.forge_vendor.ResponseCommit|undefined} value */
proto.forge_vendor.Response.prototype.setCommit = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.forge_vendor.Response.oneofGroups_[0], value);
};


proto.forge_vendor.Response.prototype.clearCommit = function() {
  this.setCommit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.Response.prototype.hasCommit = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.RequestPing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.RequestPing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.RequestPing.displayName = 'proto.forge_vendor.RequestPing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.RequestPing.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.RequestPing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.RequestPing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestPing.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.RequestPing}
 */
proto.forge_vendor.RequestPing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.RequestPing;
  return proto.forge_vendor.RequestPing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.RequestPing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.RequestPing}
 */
proto.forge_vendor.RequestPing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestPing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.RequestPing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.RequestPing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestPing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.RequestBroadcastTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.RequestBroadcastTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.RequestBroadcastTx.displayName = 'proto.forge_vendor.RequestBroadcastTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.RequestBroadcastTx.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.RequestBroadcastTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.RequestBroadcastTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestBroadcastTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    tx: msg.getTx()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.RequestBroadcastTx}
 */
proto.forge_vendor.RequestBroadcastTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.RequestBroadcastTx;
  return proto.forge_vendor.RequestBroadcastTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.RequestBroadcastTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.RequestBroadcastTx}
 */
proto.forge_vendor.RequestBroadcastTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestBroadcastTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.RequestBroadcastTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.RequestBroadcastTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.RequestBroadcastTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes tx = 1;
 * @return {!(string|Uint8Array)}
 */
proto.forge_vendor.RequestBroadcastTx.prototype.getTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes tx = 1;
 * This is a type-conversion wrapper around `getTx()`
 * @return {string}
 */
proto.forge_vendor.RequestBroadcastTx.prototype.getTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTx()));
};


/**
 * optional bytes tx = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTx()`
 * @return {!Uint8Array}
 */
proto.forge_vendor.RequestBroadcastTx.prototype.getTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTx()));
};


/** @param {!(string|Uint8Array)} value */
proto.forge_vendor.RequestBroadcastTx.prototype.setTx = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ResponsePing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.ResponsePing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ResponsePing.displayName = 'proto.forge_vendor.ResponsePing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ResponsePing.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ResponsePing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ResponsePing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponsePing.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ResponsePing}
 */
proto.forge_vendor.ResponsePing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ResponsePing;
  return proto.forge_vendor.ResponsePing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ResponsePing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ResponsePing}
 */
proto.forge_vendor.ResponsePing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponsePing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ResponsePing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ResponsePing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponsePing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.forge_vendor.ResponseBroadcastTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.forge_vendor.ResponseBroadcastTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.forge_vendor.ResponseBroadcastTx.displayName = 'proto.forge_vendor.ResponseBroadcastTx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.forge_vendor.ResponseBroadcastTx.prototype.toObject = function(opt_includeInstance) {
  return proto.forge_vendor.ResponseBroadcastTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.forge_vendor.ResponseBroadcastTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseBroadcastTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    checkTx: (f = msg.getCheckTx()) && proto.forge_vendor.ResponseCheckTx.toObject(includeInstance, f),
    deliverTx: (f = msg.getDeliverTx()) && proto.forge_vendor.ResponseDeliverTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.forge_vendor.ResponseBroadcastTx}
 */
proto.forge_vendor.ResponseBroadcastTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.forge_vendor.ResponseBroadcastTx;
  return proto.forge_vendor.ResponseBroadcastTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.forge_vendor.ResponseBroadcastTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.forge_vendor.ResponseBroadcastTx}
 */
proto.forge_vendor.ResponseBroadcastTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.forge_vendor.ResponseCheckTx;
      reader.readMessage(value,proto.forge_vendor.ResponseCheckTx.deserializeBinaryFromReader);
      msg.setCheckTx(value);
      break;
    case 2:
      var value = new proto.forge_vendor.ResponseDeliverTx;
      reader.readMessage(value,proto.forge_vendor.ResponseDeliverTx.deserializeBinaryFromReader);
      msg.setDeliverTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.forge_vendor.ResponseBroadcastTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.forge_vendor.ResponseBroadcastTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.forge_vendor.ResponseBroadcastTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.forge_vendor.ResponseBroadcastTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCheckTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.forge_vendor.ResponseCheckTx.serializeBinaryToWriter
    );
  }
  f = message.getDeliverTx();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.forge_vendor.ResponseDeliverTx.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseCheckTx check_tx = 1;
 * @return {?proto.forge_vendor.ResponseCheckTx}
 */
proto.forge_vendor.ResponseBroadcastTx.prototype.getCheckTx = function() {
  return /** @type{?proto.forge_vendor.ResponseCheckTx} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ResponseCheckTx, 1));
};


/** @param {?proto.forge_vendor.ResponseCheckTx|undefined} value */
proto.forge_vendor.ResponseBroadcastTx.prototype.setCheckTx = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.forge_vendor.ResponseBroadcastTx.prototype.clearCheckTx = function() {
  this.setCheckTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.ResponseBroadcastTx.prototype.hasCheckTx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseDeliverTx deliver_tx = 2;
 * @return {?proto.forge_vendor.ResponseDeliverTx}
 */
proto.forge_vendor.ResponseBroadcastTx.prototype.getDeliverTx = function() {
  return /** @type{?proto.forge_vendor.ResponseDeliverTx} */ (
    jspb.Message.getWrapperField(this, proto.forge_vendor.ResponseDeliverTx, 2));
};


/** @param {?proto.forge_vendor.ResponseDeliverTx|undefined} value */
proto.forge_vendor.ResponseBroadcastTx.prototype.setDeliverTx = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.forge_vendor.ResponseBroadcastTx.prototype.clearDeliverTx = function() {
  this.setDeliverTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.forge_vendor.ResponseBroadcastTx.prototype.hasDeliverTx = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.forge_vendor);

module.exports = proto.forge_vendor;
